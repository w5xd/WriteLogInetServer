/* ContestQsos.h
   Generated by wsdl2h 2.8.112 from ContestQsos.wsdl and typemap.dat
   2021-03-26 00:18:40 GMT

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE.

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on ContestQsos.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://www.Contestqsos.com/qso                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER typemap variable:                                               *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * $SIZE typemap variable:                                                    *
 *   int                                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

contest1 = "http://www.Contestqsos.com/qso"
contest2 = "urn:xml-soap-Contest"

*/

#define SOAP_NAMESPACE_OF_contest2	"urn:xml-soap-Contest"
//gsoap contest2 schema namespace:	urn:xml-soap-Contest
//gsoap contest2 schema form:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


class contest2__ArrayOfstring;

class contest2__ArrayOfint;

class contest2__Qso;

class contest2__ArrayOfQso;

class contest2__QsoUpdate;

class contest2__QsoIdVersion;

class contest2__ArrayOfQsoIdVersion;

class contest2__LogSummary;

class contest2__RigFrequency;

class contest2__ArrayOfRigFrequency;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   urn:xml-soap-Contest                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   urn:xml-soap-Contest                                                     *
 *                                                                            *
\******************************************************************************/

/// @brief "urn:xml-soap-Contest":ArrayOfstring is a complexType.
///
/// @note class contest2__ArrayOfstring operations:
/// - contest2__ArrayOfstring* soap_new_contest2__ArrayOfstring(soap*) allocate and default initialize
/// - contest2__ArrayOfstring* soap_new_contest2__ArrayOfstring(soap*, int num) allocate and default initialize an array
/// - contest2__ArrayOfstring* soap_new_req_contest2__ArrayOfstring(soap*, ...) allocate, set required members
/// - contest2__ArrayOfstring* soap_new_set_contest2__ArrayOfstring(soap*, ...) allocate, set all public members
/// - contest2__ArrayOfstring::soap_default(soap*) default initialize members
/// - int soap_read_contest2__ArrayOfstring(soap*, contest2__ArrayOfstring*) deserialize from a stream
/// - int soap_write_contest2__ArrayOfstring(soap*, contest2__ArrayOfstring*) serialize to a stream
/// - contest2__ArrayOfstring* contest2__ArrayOfstring::soap_dup(soap*) returns deep copy of contest2__ArrayOfstring, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - contest2__ArrayOfstring::soap_del() deep deletes contest2__ArrayOfstring data members, use only after contest2__ArrayOfstring::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int contest2__ArrayOfstring::soap_type() returns SOAP_TYPE_contest2__ArrayOfstring or derived type identifier
class contest2__ArrayOfstring
{ public:
/// Vector of std::string of length 0..unbounded.
    std::vector<std::string            > str_USCOREel                   0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:xml-soap-Contest":ArrayOfint is a complexType.
///
/// @note class contest2__ArrayOfint operations:
/// - contest2__ArrayOfint* soap_new_contest2__ArrayOfint(soap*) allocate and default initialize
/// - contest2__ArrayOfint* soap_new_contest2__ArrayOfint(soap*, int num) allocate and default initialize an array
/// - contest2__ArrayOfint* soap_new_req_contest2__ArrayOfint(soap*, ...) allocate, set required members
/// - contest2__ArrayOfint* soap_new_set_contest2__ArrayOfint(soap*, ...) allocate, set all public members
/// - contest2__ArrayOfint::soap_default(soap*) default initialize members
/// - int soap_read_contest2__ArrayOfint(soap*, contest2__ArrayOfint*) deserialize from a stream
/// - int soap_write_contest2__ArrayOfint(soap*, contest2__ArrayOfint*) serialize to a stream
/// - contest2__ArrayOfint* contest2__ArrayOfint::soap_dup(soap*) returns deep copy of contest2__ArrayOfint, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - contest2__ArrayOfint::soap_del() deep deletes contest2__ArrayOfint data members, use only after contest2__ArrayOfint::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int contest2__ArrayOfint::soap_type() returns SOAP_TYPE_contest2__ArrayOfint or derived type identifier
class contest2__ArrayOfint
{ public:
/// Vector of int of length 0..unbounded.
    std::vector<int                    > int_USCOREel                   0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:xml-soap-Contest":Qso is a complexType.
///
/// @note class contest2__Qso operations:
/// - contest2__Qso* soap_new_contest2__Qso(soap*) allocate and default initialize
/// - contest2__Qso* soap_new_contest2__Qso(soap*, int num) allocate and default initialize an array
/// - contest2__Qso* soap_new_req_contest2__Qso(soap*, ...) allocate, set required members
/// - contest2__Qso* soap_new_set_contest2__Qso(soap*, ...) allocate, set all public members
/// - contest2__Qso::soap_default(soap*) default initialize members
/// - int soap_read_contest2__Qso(soap*, contest2__Qso*) deserialize from a stream
/// - int soap_write_contest2__Qso(soap*, contest2__Qso*) serialize to a stream
/// - contest2__Qso* contest2__Qso::soap_dup(soap*) returns deep copy of contest2__Qso, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - contest2__Qso::soap_del() deep deletes contest2__Qso data members, use only after contest2__Qso::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int contest2__Qso::soap_type() returns SOAP_TYPE_contest2__Qso or derived type identifier
class contest2__Qso
{ public:
/// Element "time64H" of type xs:int.
    int                                  time64H                        1;	///< Required element.
/// Element "time64L" of type xs:int.
    int                                  time64L                        1;	///< Required element.
/// Element "xmitFreq" of type xs:double.
    double                               xmitFreq                       1;	///< Required element.
/// Element "recvFreq" of type xs:double.
    double                               recvFreq                       1;	///< Required element.
/// Element "band" of type xs:int.
    int                                  band                           1;	///< Required element.
/// Element "station" of type xs:string.
    std::string                          station                        1;	///< Required element.
/// Element "mode" of type xs:int.
    int                                  mode                           1;	///< Required element.
/// Element "dupe" of type xs:int.
    int                                  dupe                           1;	///< Required element.
/// Element "serial" of type xs:int.
    int                                  serial                         1;	///< Required element.
/// Element "qsoparts" of type "urn:xml-soap-Contest":ArrayOfstring.
    contest2__ArrayOfstring*             qsoparts                       1;	///< Required element.
/// Element "version" of type xs:int.
    int                                  version                        1;	///< Required element.
/// Element "idKey" of type xs:string.
    std::string                          idKey                          1;	///< Required element.
/// Element "updatedBy" of type xs:string.
    std::string                          updatedBy                      1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:xml-soap-Contest":ArrayOfQso is a complexType.
///
/// @note class contest2__ArrayOfQso operations:
/// - contest2__ArrayOfQso* soap_new_contest2__ArrayOfQso(soap*) allocate and default initialize
/// - contest2__ArrayOfQso* soap_new_contest2__ArrayOfQso(soap*, int num) allocate and default initialize an array
/// - contest2__ArrayOfQso* soap_new_req_contest2__ArrayOfQso(soap*, ...) allocate, set required members
/// - contest2__ArrayOfQso* soap_new_set_contest2__ArrayOfQso(soap*, ...) allocate, set all public members
/// - contest2__ArrayOfQso::soap_default(soap*) default initialize members
/// - int soap_read_contest2__ArrayOfQso(soap*, contest2__ArrayOfQso*) deserialize from a stream
/// - int soap_write_contest2__ArrayOfQso(soap*, contest2__ArrayOfQso*) serialize to a stream
/// - contest2__ArrayOfQso* contest2__ArrayOfQso::soap_dup(soap*) returns deep copy of contest2__ArrayOfQso, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - contest2__ArrayOfQso::soap_del() deep deletes contest2__ArrayOfQso data members, use only after contest2__ArrayOfQso::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int contest2__ArrayOfQso::soap_type() returns SOAP_TYPE_contest2__ArrayOfQso or derived type identifier
class contest2__ArrayOfQso
{ public:
/// Vector of contest2__Qso* of length 0..unbounded.
    std::vector<contest2__Qso*         > qso_USCOREel                   0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:xml-soap-Contest":QsoUpdate is a complexType.
///
/// @note class contest2__QsoUpdate operations:
/// - contest2__QsoUpdate* soap_new_contest2__QsoUpdate(soap*) allocate and default initialize
/// - contest2__QsoUpdate* soap_new_contest2__QsoUpdate(soap*, int num) allocate and default initialize an array
/// - contest2__QsoUpdate* soap_new_req_contest2__QsoUpdate(soap*, ...) allocate, set required members
/// - contest2__QsoUpdate* soap_new_set_contest2__QsoUpdate(soap*, ...) allocate, set all public members
/// - contest2__QsoUpdate::soap_default(soap*) default initialize members
/// - int soap_read_contest2__QsoUpdate(soap*, contest2__QsoUpdate*) deserialize from a stream
/// - int soap_write_contest2__QsoUpdate(soap*, contest2__QsoUpdate*) serialize to a stream
/// - contest2__QsoUpdate* contest2__QsoUpdate::soap_dup(soap*) returns deep copy of contest2__QsoUpdate, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - contest2__QsoUpdate::soap_del() deep deletes contest2__QsoUpdate data members, use only after contest2__QsoUpdate::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int contest2__QsoUpdate::soap_type() returns SOAP_TYPE_contest2__QsoUpdate or derived type identifier
class contest2__QsoUpdate
{ public:
/// Element "qsoArray" of type "urn:xml-soap-Contest":ArrayOfQso.
    contest2__ArrayOfQso*                qsoArray                       1;	///< Required element.
/// Element "logState" of type xs:int.
    int                                  logState                       1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:xml-soap-Contest":QsoIdVersion is a complexType.
///
/// @note class contest2__QsoIdVersion operations:
/// - contest2__QsoIdVersion* soap_new_contest2__QsoIdVersion(soap*) allocate and default initialize
/// - contest2__QsoIdVersion* soap_new_contest2__QsoIdVersion(soap*, int num) allocate and default initialize an array
/// - contest2__QsoIdVersion* soap_new_req_contest2__QsoIdVersion(soap*, ...) allocate, set required members
/// - contest2__QsoIdVersion* soap_new_set_contest2__QsoIdVersion(soap*, ...) allocate, set all public members
/// - contest2__QsoIdVersion::soap_default(soap*) default initialize members
/// - int soap_read_contest2__QsoIdVersion(soap*, contest2__QsoIdVersion*) deserialize from a stream
/// - int soap_write_contest2__QsoIdVersion(soap*, contest2__QsoIdVersion*) serialize to a stream
/// - contest2__QsoIdVersion* contest2__QsoIdVersion::soap_dup(soap*) returns deep copy of contest2__QsoIdVersion, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - contest2__QsoIdVersion::soap_del() deep deletes contest2__QsoIdVersion data members, use only after contest2__QsoIdVersion::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int contest2__QsoIdVersion::soap_type() returns SOAP_TYPE_contest2__QsoIdVersion or derived type identifier
class contest2__QsoIdVersion
{ public:
/// Element "version" of type xs:int.
    int                                  version                        1;	///< Required element.
/// Element "updatedBy" of type xs:string.
    std::string                          updatedBy                      1;	///< Required element.
/// Element "id" of type xs:string.
    std::string                          id                             1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:xml-soap-Contest":ArrayOfQsoIdVersion is a complexType.
///
/// @note class contest2__ArrayOfQsoIdVersion operations:
/// - contest2__ArrayOfQsoIdVersion* soap_new_contest2__ArrayOfQsoIdVersion(soap*) allocate and default initialize
/// - contest2__ArrayOfQsoIdVersion* soap_new_contest2__ArrayOfQsoIdVersion(soap*, int num) allocate and default initialize an array
/// - contest2__ArrayOfQsoIdVersion* soap_new_req_contest2__ArrayOfQsoIdVersion(soap*, ...) allocate, set required members
/// - contest2__ArrayOfQsoIdVersion* soap_new_set_contest2__ArrayOfQsoIdVersion(soap*, ...) allocate, set all public members
/// - contest2__ArrayOfQsoIdVersion::soap_default(soap*) default initialize members
/// - int soap_read_contest2__ArrayOfQsoIdVersion(soap*, contest2__ArrayOfQsoIdVersion*) deserialize from a stream
/// - int soap_write_contest2__ArrayOfQsoIdVersion(soap*, contest2__ArrayOfQsoIdVersion*) serialize to a stream
/// - contest2__ArrayOfQsoIdVersion* contest2__ArrayOfQsoIdVersion::soap_dup(soap*) returns deep copy of contest2__ArrayOfQsoIdVersion, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - contest2__ArrayOfQsoIdVersion::soap_del() deep deletes contest2__ArrayOfQsoIdVersion data members, use only after contest2__ArrayOfQsoIdVersion::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int contest2__ArrayOfQsoIdVersion::soap_type() returns SOAP_TYPE_contest2__ArrayOfQsoIdVersion or derived type identifier
class contest2__ArrayOfQsoIdVersion
{ public:
/// Vector of contest2__QsoIdVersion* of length 0..unbounded.
    std::vector<contest2__QsoIdVersion*> id_USCOREel                    0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:xml-soap-Contest":LogSummary is a complexType.
///
/// @note class contest2__LogSummary operations:
/// - contest2__LogSummary* soap_new_contest2__LogSummary(soap*) allocate and default initialize
/// - contest2__LogSummary* soap_new_contest2__LogSummary(soap*, int num) allocate and default initialize an array
/// - contest2__LogSummary* soap_new_req_contest2__LogSummary(soap*, ...) allocate, set required members
/// - contest2__LogSummary* soap_new_set_contest2__LogSummary(soap*, ...) allocate, set all public members
/// - contest2__LogSummary::soap_default(soap*) default initialize members
/// - int soap_read_contest2__LogSummary(soap*, contest2__LogSummary*) deserialize from a stream
/// - int soap_write_contest2__LogSummary(soap*, contest2__LogSummary*) serialize to a stream
/// - contest2__LogSummary* contest2__LogSummary::soap_dup(soap*) returns deep copy of contest2__LogSummary, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - contest2__LogSummary::soap_del() deep deletes contest2__LogSummary data members, use only after contest2__LogSummary::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int contest2__LogSummary::soap_type() returns SOAP_TYPE_contest2__LogSummary or derived type identifier
class contest2__LogSummary
{ public:
/// Element "logState" of type xs:int.
    int                                  logState                       1;	///< Required element.
/// Element "logSummaryIds" of type "urn:xml-soap-Contest":ArrayOfQsoIdVersion.
    contest2__ArrayOfQsoIdVersion*       logSummaryIds                  1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:xml-soap-Contest":RigFrequency is a complexType.
///
/// @note class contest2__RigFrequency operations:
/// - contest2__RigFrequency* soap_new_contest2__RigFrequency(soap*) allocate and default initialize
/// - contest2__RigFrequency* soap_new_contest2__RigFrequency(soap*, int num) allocate and default initialize an array
/// - contest2__RigFrequency* soap_new_req_contest2__RigFrequency(soap*, ...) allocate, set required members
/// - contest2__RigFrequency* soap_new_set_contest2__RigFrequency(soap*, ...) allocate, set all public members
/// - contest2__RigFrequency::soap_default(soap*) default initialize members
/// - int soap_read_contest2__RigFrequency(soap*, contest2__RigFrequency*) deserialize from a stream
/// - int soap_write_contest2__RigFrequency(soap*, contest2__RigFrequency*) serialize to a stream
/// - contest2__RigFrequency* contest2__RigFrequency::soap_dup(soap*) returns deep copy of contest2__RigFrequency, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - contest2__RigFrequency::soap_del() deep deletes contest2__RigFrequency data members, use only after contest2__RigFrequency::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int contest2__RigFrequency::soap_type() returns SOAP_TYPE_contest2__RigFrequency or derived type identifier
class contest2__RigFrequency
{ public:
/// Element "station" of type xs:string.
    std::string                          station                        1;	///< Required element.
/// Element "networkLetter" of type xs:int.
    int                                  networkLetter                  1;	///< Required element.
/// Element "label" of type xs:string.
    std::string                          label                          1;	///< Required element.
/// Element "rigNumber" of type xs:int.
    int                                  rigNumber                      1;	///< Required element.
/// Element "xmitFreq" of type xs:double.
    double                               xmitFreq                       1;	///< Required element.
/// Element "recvFreq" of type xs:double.
    double                               recvFreq                       1;	///< Required element.
/// Element "mode" of type xs:int.
    int                                  mode                           1;	///< Required element.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};

/// @brief "urn:xml-soap-Contest":ArrayOfRigFrequency is a complexType.
///
/// @note class contest2__ArrayOfRigFrequency operations:
/// - contest2__ArrayOfRigFrequency* soap_new_contest2__ArrayOfRigFrequency(soap*) allocate and default initialize
/// - contest2__ArrayOfRigFrequency* soap_new_contest2__ArrayOfRigFrequency(soap*, int num) allocate and default initialize an array
/// - contest2__ArrayOfRigFrequency* soap_new_req_contest2__ArrayOfRigFrequency(soap*, ...) allocate, set required members
/// - contest2__ArrayOfRigFrequency* soap_new_set_contest2__ArrayOfRigFrequency(soap*, ...) allocate, set all public members
/// - contest2__ArrayOfRigFrequency::soap_default(soap*) default initialize members
/// - int soap_read_contest2__ArrayOfRigFrequency(soap*, contest2__ArrayOfRigFrequency*) deserialize from a stream
/// - int soap_write_contest2__ArrayOfRigFrequency(soap*, contest2__ArrayOfRigFrequency*) serialize to a stream
/// - contest2__ArrayOfRigFrequency* contest2__ArrayOfRigFrequency::soap_dup(soap*) returns deep copy of contest2__ArrayOfRigFrequency, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - contest2__ArrayOfRigFrequency::soap_del() deep deletes contest2__ArrayOfRigFrequency data members, use only after contest2__ArrayOfRigFrequency::soap_dup(NULL) (use soapcpp2 -Ed)
/// - int contest2__ArrayOfRigFrequency::soap_type() returns SOAP_TYPE_contest2__ArrayOfRigFrequency or derived type identifier
class contest2__ArrayOfRigFrequency
{ public:
/// Vector of contest2__RigFrequency* of length 0..unbounded.
    std::vector<contest2__RigFrequency*> rf_USCOREel                    0;	///< Multiple elements.
/// Pointer to soap context that manages this instance.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   urn:xml-soap-Contest                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   urn:xml-soap-Contest                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap contest1 service name:	ContestQsos_USCOREServiceBinding 
//gsoap contest1 service type:	ContestQsos_USCOREPort 
//gsoap contest1 service port:	http://localhost:8001 
//gsoap contest1 service namespace:	urn:ContestQsos 
//gsoap contest1 service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage ContestQsos_USCOREService Definitions

@section ContestQsos_USCOREService_bindings Service Bindings

  - @ref ContestQsos_USCOREServiceBinding

@section ContestQsos_USCOREService_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/** @page ContestQsos_USCOREServiceBinding Binding "ContestQsos_USCOREServiceBinding"

@section ContestQsos_USCOREUSCOREServiceBinding_service Service Documentation "ContestQsos_USCOREServiceBinding"
Contest QSO Service

@section ContestQsos_USCOREServiceBinding_operations Operations of Binding "ContestQsos_USCOREServiceBinding"

  - @ref contest1__GetSessionId

  - @ref contest1__AddAndGetLogSummary

  - @ref contest1__addAndGetQsos

  - @ref contest1__getQsosByKeyArray

  - @ref contest1__ColumnNamesToIndices

  - @ref contest1__ExchangeFrequencies

@section ContestQsos_USCOREServiceBinding_ports Default endpoints of Binding "ContestQsos_USCOREServiceBinding"

  - http://localhost:8001

@note Use wsdl2h option -Nname to change the service binding prefix name


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   ContestQsos_USCOREServiceBinding                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   contest1__GetSessionId                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "contest1__GetSessionId" of service binding "ContestQsos_USCOREServiceBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://localhost:8001

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_contest1__GetSessionId(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    // output parameters:
    std::string                        &response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int contest1__GetSessionId(
    struct soap *soap,
    // input parameters:
    // output parameters:
    std::string                        &response
  );
@endcode

C++ proxy class (defined in soapContestQsos_USCOREServiceBindingProxy.h generated with soapcpp2):
@code
  class ContestQsos_USCOREServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapContestQsos_USCOREServiceBindingService.h generated with soapcpp2):
@code
  class ContestQsos_USCOREServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap contest1 service method-protocol:	GetSessionId SOAP
//gsoap contest1 service method-style:	GetSessionId rpc
//gsoap contest1 service method-encoding:	GetSessionId http://schemas.xmlsoap.org/soap/encoding/
//gsoap contest1 service method-action:	GetSessionId ""
//gsoap contest1 service method-output-action:	GetSessionId Response
int contest1__GetSessionId(
    std::string                        &:response	///< Output parameter, :unqualified name as per RPC encoding
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   contest1__AddAndGetLogSummary                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "contest1__AddAndGetLogSummaryResponse" of operation "contest1__AddAndGetLogSummary".
struct contest1__AddAndGetLogSummaryResponse
{
    contest2__LogSummary*               :_response;	///< Output parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
};

/** Operation "contest1__AddAndGetLogSummary" of service binding "ContestQsos_USCOREServiceBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://localhost:8001

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_contest1__AddAndGetLogSummary(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         SessionId,
    contest2__ArrayOfQso*               QsoAddArray,
    int                                 OldState,
    int                                 MaxRequested,
    // output parameters:
    struct contest1__AddAndGetLogSummaryResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int contest1__AddAndGetLogSummary(
    struct soap *soap,
    // input parameters:
    std::string                         SessionId,
    contest2__ArrayOfQso*               QsoAddArray,
    int                                 OldState,
    int                                 MaxRequested,
    // output parameters:
    struct contest1__AddAndGetLogSummaryResponse&
  );
@endcode

C++ proxy class (defined in soapContestQsos_USCOREServiceBindingProxy.h generated with soapcpp2):
@code
  class ContestQsos_USCOREServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapContestQsos_USCOREServiceBindingService.h generated with soapcpp2):
@code
  class ContestQsos_USCOREServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap contest1 service method-protocol:	AddAndGetLogSummary SOAP
//gsoap contest1 service method-style:	AddAndGetLogSummary rpc
//gsoap contest1 service method-encoding:	AddAndGetLogSummary http://schemas.xmlsoap.org/soap/encoding/
//gsoap contest1 service method-action:	AddAndGetLogSummary ""
//gsoap contest1 service method-output-action:	AddAndGetLogSummary Response
int contest1__AddAndGetLogSummary(
    std::string                         :_SessionId,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    contest2__ArrayOfQso*               :_QsoAddArray,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    int                                 :_OldState,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    int                                 :_MaxRequested,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    struct contest1__AddAndGetLogSummaryResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   contest1__addAndGetQsos                                                  *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "contest1__addAndGetQsosResponse" of operation "contest1__addAndGetQsos".
struct contest1__addAndGetQsosResponse
{
    contest2__QsoUpdate*                :_response;	///< Output parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
};

/** Operation "contest1__addAndGetQsos" of service binding "ContestQsos_USCOREServiceBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://localhost:8001

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_contest1__addAndGetQsos(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         SessionId,
    contest2__ArrayOfQso*               QsoAddArray,
    int                                 OldState,
    int                                 MaxRequested,
    // output parameters:
    struct contest1__addAndGetQsosResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int contest1__addAndGetQsos(
    struct soap *soap,
    // input parameters:
    std::string                         SessionId,
    contest2__ArrayOfQso*               QsoAddArray,
    int                                 OldState,
    int                                 MaxRequested,
    // output parameters:
    struct contest1__addAndGetQsosResponse&
  );
@endcode

C++ proxy class (defined in soapContestQsos_USCOREServiceBindingProxy.h generated with soapcpp2):
@code
  class ContestQsos_USCOREServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapContestQsos_USCOREServiceBindingService.h generated with soapcpp2):
@code
  class ContestQsos_USCOREServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap contest1 service method-protocol:	addAndGetQsos SOAP
//gsoap contest1 service method-style:	addAndGetQsos rpc
//gsoap contest1 service method-encoding:	addAndGetQsos http://schemas.xmlsoap.org/soap/encoding/
//gsoap contest1 service method-action:	addAndGetQsos ""
//gsoap contest1 service method-output-action:	addAndGetQsos Response
int contest1__addAndGetQsos(
    std::string                         :_SessionId,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    contest2__ArrayOfQso*               :_QsoAddArray,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    int                                 :_OldState,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    int                                 :_MaxRequested,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    struct contest1__addAndGetQsosResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   contest1__getQsosByKeyArray                                              *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "contest1__getQsosByKeyArrayResponse" of operation "contest1__getQsosByKeyArray".
struct contest1__getQsosByKeyArrayResponse
{
    contest2__QsoUpdate*                :_response;	///< Output parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
};

/** Operation "contest1__getQsosByKeyArray" of service binding "ContestQsos_USCOREServiceBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://localhost:8001

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_contest1__getQsosByKeyArray(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         SessionId,
    contest2__ArrayOfstring*            QsoKeyArray,
    // output parameters:
    struct contest1__getQsosByKeyArrayResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int contest1__getQsosByKeyArray(
    struct soap *soap,
    // input parameters:
    std::string                         SessionId,
    contest2__ArrayOfstring*            QsoKeyArray,
    // output parameters:
    struct contest1__getQsosByKeyArrayResponse&
  );
@endcode

C++ proxy class (defined in soapContestQsos_USCOREServiceBindingProxy.h generated with soapcpp2):
@code
  class ContestQsos_USCOREServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapContestQsos_USCOREServiceBindingService.h generated with soapcpp2):
@code
  class ContestQsos_USCOREServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap contest1 service method-protocol:	getQsosByKeyArray SOAP
//gsoap contest1 service method-style:	getQsosByKeyArray rpc
//gsoap contest1 service method-encoding:	getQsosByKeyArray http://schemas.xmlsoap.org/soap/encoding/
//gsoap contest1 service method-action:	getQsosByKeyArray ""
//gsoap contest1 service method-output-action:	getQsosByKeyArray Response
int contest1__getQsosByKeyArray(
    std::string                         :_SessionId,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    contest2__ArrayOfstring*            :_QsoKeyArray,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    struct contest1__getQsosByKeyArrayResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   contest1__ColumnNamesToIndices                                           *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "contest1__ColumnNamesToIndicesResponse" of operation "contest1__ColumnNamesToIndices".
struct contest1__ColumnNamesToIndicesResponse
{
    contest2__ArrayOfint*               :_response;	///< Output parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
};

/** Operation "contest1__ColumnNamesToIndices" of service binding "ContestQsos_USCOREServiceBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://localhost:8001

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_contest1__ColumnNamesToIndices(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    std::string                         SessionId,
    contest2__ArrayOfstring*            ColumnNames,
    // output parameters:
    struct contest1__ColumnNamesToIndicesResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int contest1__ColumnNamesToIndices(
    struct soap *soap,
    // input parameters:
    std::string                         SessionId,
    contest2__ArrayOfstring*            ColumnNames,
    // output parameters:
    struct contest1__ColumnNamesToIndicesResponse&
  );
@endcode

C++ proxy class (defined in soapContestQsos_USCOREServiceBindingProxy.h generated with soapcpp2):
@code
  class ContestQsos_USCOREServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapContestQsos_USCOREServiceBindingService.h generated with soapcpp2):
@code
  class ContestQsos_USCOREServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap contest1 service method-protocol:	ColumnNamesToIndices SOAP
//gsoap contest1 service method-style:	ColumnNamesToIndices rpc
//gsoap contest1 service method-encoding:	ColumnNamesToIndices http://schemas.xmlsoap.org/soap/encoding/
//gsoap contest1 service method-action:	ColumnNamesToIndices ""
//gsoap contest1 service method-output-action:	ColumnNamesToIndices Response
int contest1__ColumnNamesToIndices(
    std::string                         :_SessionId,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    contest2__ArrayOfstring*            :_ColumnNames,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    struct contest1__ColumnNamesToIndicesResponse&	///< Output response struct parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   contest1__ExchangeFrequencies                                            *
 *                                                                            *
\******************************************************************************/

/// Operation response struct "contest1__ExchangeFrequenciesResponse" of operation "contest1__ExchangeFrequencies".
struct contest1__ExchangeFrequenciesResponse
{
    contest2__ArrayOfRigFrequency*      :_response;	///< Output parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
};

/** Operation "contest1__ExchangeFrequencies" of service binding "ContestQsos_USCOREServiceBinding".

  - SOAP RPC encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"

  - Default endpoints:
    - http://localhost:8001

  - Addressing input action: ""

  - Addressing output action: "Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call_contest1__ExchangeFrequencies(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    contest2__ArrayOfRigFrequency*      IncomingFreqs,
    // output parameters:
    struct contest1__ExchangeFrequenciesResponse&
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int contest1__ExchangeFrequencies(
    struct soap *soap,
    // input parameters:
    contest2__ArrayOfRigFrequency*      IncomingFreqs,
    // output parameters:
    struct contest1__ExchangeFrequenciesResponse&
  );
@endcode

C++ proxy class (defined in soapContestQsos_USCOREServiceBindingProxy.h generated with soapcpp2):
@code
  class ContestQsos_USCOREServiceBindingProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapContestQsos_USCOREServiceBindingService.h generated with soapcpp2):
@code
  class ContestQsos_USCOREServiceBindingService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap contest1 service method-protocol:	ExchangeFrequencies SOAP
//gsoap contest1 service method-style:	ExchangeFrequencies rpc
//gsoap contest1 service method-encoding:	ExchangeFrequencies http://schemas.xmlsoap.org/soap/encoding/
//gsoap contest1 service method-action:	ExchangeFrequencies ""
//gsoap contest1 service method-output-action:	ExchangeFrequencies Response
int contest1__ExchangeFrequencies(
    contest2__ArrayOfRigFrequency*      :_IncomingFreqs,	///< Input parameter, :unqualified name as per RPC encoding, _wildcard name as per RPC parameterOrder
    struct contest1__ExchangeFrequenciesResponse&	///< Output response struct parameter
);

/** @page ContestQsos_USCOREServiceBinding Binding "ContestQsos_USCOREServiceBinding"

@section ContestQsos_USCOREServiceBinding_policy_enablers Policy Enablers of Binding "ContestQsos_USCOREServiceBinding"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/** @page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDLs and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


*/

/**

@section contest2 Top-level root elements of schema "urn:xml-soap-Contest"

*/

/* End of ContestQsos.h */
