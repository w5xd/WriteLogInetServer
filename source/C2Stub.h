/* C2Stub.h
   Generated by gSOAP 2.8.112 for ContestQsos2.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_NAMESPACE_OF_contest26	"http://schemas.microsoft.com/2003/10/Serialization/Arrays"
#define SOAP_NAMESPACE_OF_contest24	"http://schemas.microsoft.com/2003/10/Serialization/"
#define SOAP_NAMESPACE_OF_contest25	"http://schemas.datacontract.org/2004/07/ContestQsos"
#define SOAP_NAMESPACE_OF_contest23	"urn:ContestQsos2"
#define SOAP_NAMESPACE_OF_contest22	"urn:ContestQsos2/Imports"

#ifndef C2Stub_H
#define C2Stub_H
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"
#if GSOAP_VERSION != 208112
# error "GSOAP VERSION 208112 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


namespace C2 {

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/* ContestQsos2.h:183 */
#ifndef SOAP_TYPE_C2_xsd__QName
#define SOAP_TYPE_C2_xsd__QName (-822800394)

typedef std::string xsd__QName;
#endif


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class xsd__anyType;	/* ContestQsos2.h:176 */
class xsd__base64Binary;	/* ContestQsos2.h:186 */
class xsd__ID__;	/* ContestQsos2.h:204 */
class xsd__IDREF__;	/* ContestQsos2.h:214 */
class xsd__QName__;	/* ContestQsos2.h:221 */
class xsd__anyURI__;	/* ContestQsos2.h:231 */
class xsd__base64Binary__;	/* ContestQsos2.h:238 */
class xsd__boolean_;	/* ContestQsos2.h:245 */
class xsd__byte__;	/* ContestQsos2.h:252 */
class xsd__dateTime_;	/* ContestQsos2.h:259 */
class xsd__decimal__;	/* ContestQsos2.h:269 */
class xsd__double_;	/* ContestQsos2.h:276 */
class xsd__duration__;	/* ContestQsos2.h:286 */
class xsd__float_;	/* ContestQsos2.h:293 */
class xsd__int_;	/* ContestQsos2.h:300 */
class xsd__long_;	/* ContestQsos2.h:307 */
class xsd__short_;	/* ContestQsos2.h:314 */
class xsd__string_;	/* ContestQsos2.h:321 */
class xsd__unsignedByte__;	/* ContestQsos2.h:328 */
class xsd__unsignedInt_;	/* ContestQsos2.h:335 */
class xsd__unsignedLong_;	/* ContestQsos2.h:342 */
class xsd__unsignedShort_;	/* ContestQsos2.h:349 */
class contest24__char__;	/* ContestQsos2.h:453 */
class contest24__duration__;	/* ContestQsos2.h:467 */
class contest24__guid__;	/* ContestQsos2.h:480 */
class contest26__ArrayOfstring;	/* ContestQsos2.h:362 */
class contest26__ArrayOfint;	/* ContestQsos2.h:364 */
class contest25__ArrayOfQso;	/* ContestQsos2.h:366 */
class contest25__Qso;	/* ContestQsos2.h:368 */
class contest25__QsoUpdate;	/* ContestQsos2.h:370 */
class contest25__LogSummary;	/* ContestQsos2.h:372 */
class contest25__ArrayOfQsoIdVersion;	/* ContestQsos2.h:374 */
class contest25__QsoIdVersion;	/* ContestQsos2.h:376 */
class contest25__ArrayOfRigFrequency;	/* ContestQsos2.h:378 */
class contest25__RigFrequency;	/* ContestQsos2.h:380 */
class _contest23__GetSessionId;	/* ContestQsos2.h:382 */
class _contest23__GetSessionIdResponse;	/* ContestQsos2.h:384 */
class _contest23__addAndGetQsos;	/* ContestQsos2.h:386 */
class _contest23__addAndGetQsosResponse;	/* ContestQsos2.h:388 */
class _contest23__AddAndGetLogSummary;	/* ContestQsos2.h:390 */
class _contest23__AddAndGetLogSummaryResponse;	/* ContestQsos2.h:392 */
class _contest23__getQsosByKeyArray;	/* ContestQsos2.h:394 */
class _contest23__getQsosByKeyArrayResponse;	/* ContestQsos2.h:396 */
class _contest23__ColumnNamesToIndices;	/* ContestQsos2.h:398 */
class _contest23__ColumnNamesToIndicesResponse;	/* ContestQsos2.h:400 */
class _contest23__ExchangeFrequencies;	/* ContestQsos2.h:402 */
class _contest23__ExchangeFrequenciesResponse;	/* ContestQsos2.h:404 */
struct __contest23__GetSessionId;	/* ContestQsos2.h:1373 */
struct __contest23__addAndGetQsos;	/* ContestQsos2.h:1440 */
struct __contest23__AddAndGetLogSummary;	/* ContestQsos2.h:1507 */
struct __contest23__getQsosByKeyArray;	/* ContestQsos2.h:1574 */
struct __contest23__ColumnNamesToIndices;	/* ContestQsos2.h:1641 */
struct __contest23__ExchangeFrequencies;	/* ContestQsos2.h:1708 */

/* ContestQsos2.h:176 */
#ifndef SOAP_TYPE_C2_xsd__anyType
#define SOAP_TYPE_C2_xsd__anyType (-822800391)
/* simple XML schema type 'xsd:anyType': */
class SOAP_CMAC xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:anyType' wrapped by this struct
        char *__item;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C2_xsd__anyType
        virtual long soap_type(void) const { return SOAP_TYPE_C2_xsd__anyType; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__anyType, default initialized and not managed by a soap context
        virtual xsd__anyType *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__anyType); }
      public:
        /// Constructor with default initializations
        xsd__anyType() : __item(), soap() { }
        virtual ~xsd__anyType() { }
        /// Friend allocator used by soap_new_xsd__anyType(struct soap*, int)
        friend SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:186 */
#ifndef SOAP_TYPE_C2_xsd__base64Binary
#define SOAP_TYPE_C2_xsd__base64Binary (-822800395)
/* binary data attached as MTOM/MIME/DIME attachment or included as *`xsd:base64Binary`* base64: */
class SOAP_CMAC xsd__base64Binary {
      public:
        unsigned char *__ptr;
        int __size;
        /// Optional element 'id' of XML schema type 'xsd:string'
        char *id;
        /// Optional element 'type' of XML schema type 'xsd:string'
        char *type;
        /// Optional element 'options' of XML schema type 'xsd:string'
        char *options;
      public:
        /// Return unique type id SOAP_TYPE_C2_xsd__base64Binary
        virtual long soap_type(void) const { return SOAP_TYPE_C2_xsd__base64Binary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__base64Binary, default initialized and not managed by a soap context
        virtual xsd__base64Binary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__base64Binary); }
      public:
        /// Constructor with default initializations
        xsd__base64Binary() : __ptr(), __size(), id(), type(), options() { }
        virtual ~xsd__base64Binary() { }
        /// Friend allocator used by soap_new_xsd__base64Binary(struct soap*, int)
        friend SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:204 */
#ifndef SOAP_TYPE_C2_xsd__ID__
#define SOAP_TYPE_C2_xsd__ID__ (-822800402)
/* simple XML schema type 'xsd:ID': */
class SOAP_CMAC xsd__ID__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:ID' wrapped by this struct
        std::string __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_xsd__ID__
        virtual long soap_type(void) const { return SOAP_TYPE_C2_xsd__ID__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__ID__, default initialized and not managed by a soap context
        virtual xsd__ID__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__ID__); }
      public:
        /// Constructor with default initializations
        xsd__ID__() : __item() { }
        virtual ~xsd__ID__() { }
        /// Friend allocator used by soap_new_xsd__ID__(struct soap*, int)
        friend SOAP_FMAC1 xsd__ID__ * SOAP_FMAC2 soap_instantiate_xsd__ID__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:214 */
#ifndef SOAP_TYPE_C2_xsd__IDREF__
#define SOAP_TYPE_C2_xsd__IDREF__ (-822800404)
/* simple XML schema type 'xsd:IDREF': */
class SOAP_CMAC xsd__IDREF__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:IDREF' wrapped by this struct
        std::string __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_xsd__IDREF__
        virtual long soap_type(void) const { return SOAP_TYPE_C2_xsd__IDREF__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__IDREF__, default initialized and not managed by a soap context
        virtual xsd__IDREF__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__IDREF__); }
      public:
        /// Constructor with default initializations
        xsd__IDREF__() : __item() { }
        virtual ~xsd__IDREF__() { }
        /// Friend allocator used by soap_new_xsd__IDREF__(struct soap*, int)
        friend SOAP_FMAC1 xsd__IDREF__ * SOAP_FMAC2 soap_instantiate_xsd__IDREF__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:221 */
#ifndef SOAP_TYPE_C2_xsd__QName__
#define SOAP_TYPE_C2_xsd__QName__ (-822800405)
/* simple XML schema type 'xsd:QName': */
class SOAP_CMAC xsd__QName__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:QName' wrapped by this struct
        std::string __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_xsd__QName__
        virtual long soap_type(void) const { return SOAP_TYPE_C2_xsd__QName__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__QName__, default initialized and not managed by a soap context
        virtual xsd__QName__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__QName__); }
      public:
        /// Constructor with default initializations
        xsd__QName__() : __item() { }
        virtual ~xsd__QName__() { }
        /// Friend allocator used by soap_new_xsd__QName__(struct soap*, int)
        friend SOAP_FMAC1 xsd__QName__ * SOAP_FMAC2 soap_instantiate_xsd__QName__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:231 */
#ifndef SOAP_TYPE_C2_xsd__anyURI__
#define SOAP_TYPE_C2_xsd__anyURI__ (-822800407)
/* simple XML schema type 'xsd:anyURI': */
class SOAP_CMAC xsd__anyURI__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:anyURI' wrapped by this struct
        std::string __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_xsd__anyURI__
        virtual long soap_type(void) const { return SOAP_TYPE_C2_xsd__anyURI__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__anyURI__, default initialized and not managed by a soap context
        virtual xsd__anyURI__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__anyURI__); }
      public:
        /// Constructor with default initializations
        xsd__anyURI__() : __item() { }
        virtual ~xsd__anyURI__() { }
        /// Friend allocator used by soap_new_xsd__anyURI__(struct soap*, int)
        friend SOAP_FMAC1 xsd__anyURI__ * SOAP_FMAC2 soap_instantiate_xsd__anyURI__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:238 */
#ifndef SOAP_TYPE_C2_xsd__base64Binary__
#define SOAP_TYPE_C2_xsd__base64Binary__ (-822800408)
/* simple XML schema type 'xsd:base64Binary': */
class SOAP_CMAC xsd__base64Binary__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:base64Binary' wrapped by this struct
        xsd__base64Binary __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_xsd__base64Binary__
        virtual long soap_type(void) const { return SOAP_TYPE_C2_xsd__base64Binary__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__base64Binary__, default initialized and not managed by a soap context
        virtual xsd__base64Binary__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__base64Binary__); }
      public:
        /// Constructor with default initializations
        xsd__base64Binary__() : __item() { }
        virtual ~xsd__base64Binary__() { }
        /// Friend allocator used by soap_new_xsd__base64Binary__(struct soap*, int)
        friend SOAP_FMAC1 xsd__base64Binary__ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:245 */
#ifndef SOAP_TYPE_C2_xsd__boolean_
#define SOAP_TYPE_C2_xsd__boolean_ (-822800409)
/* simple XML schema type 'xsd:boolean': */
class SOAP_CMAC xsd__boolean_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:boolean' wrapped by this struct
        bool __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_xsd__boolean_
        virtual long soap_type(void) const { return SOAP_TYPE_C2_xsd__boolean_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__boolean_, default initialized and not managed by a soap context
        virtual xsd__boolean_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__boolean_); }
      public:
        /// Constructor with default initializations
        xsd__boolean_() : __item() { }
        virtual ~xsd__boolean_() { }
        /// Friend allocator used by soap_new_xsd__boolean_(struct soap*, int)
        friend SOAP_FMAC1 xsd__boolean_ * SOAP_FMAC2 soap_instantiate_xsd__boolean_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:252 */
#ifndef SOAP_TYPE_C2_xsd__byte__
#define SOAP_TYPE_C2_xsd__byte__ (-822800411)
/* simple XML schema type 'xsd:byte': */
class SOAP_CMAC xsd__byte__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:byte' wrapped by this struct
        char __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_xsd__byte__
        virtual long soap_type(void) const { return SOAP_TYPE_C2_xsd__byte__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__byte__, default initialized and not managed by a soap context
        virtual xsd__byte__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__byte__); }
      public:
        /// Constructor with default initializations
        xsd__byte__() : __item() { }
        virtual ~xsd__byte__() { }
        /// Friend allocator used by soap_new_xsd__byte__(struct soap*, int)
        friend SOAP_FMAC1 xsd__byte__ * SOAP_FMAC2 soap_instantiate_xsd__byte__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:259 */
#ifndef SOAP_TYPE_C2_xsd__dateTime_
#define SOAP_TYPE_C2_xsd__dateTime_ (-822800412)
/* simple XML schema type 'xsd:dateTime': */
class SOAP_CMAC xsd__dateTime_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:dateTime' wrapped by this struct
        time_t __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_xsd__dateTime_
        virtual long soap_type(void) const { return SOAP_TYPE_C2_xsd__dateTime_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__dateTime_, default initialized and not managed by a soap context
        virtual xsd__dateTime_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__dateTime_); }
      public:
        /// Constructor with default initializations
        xsd__dateTime_() : __item() { }
        virtual ~xsd__dateTime_() { }
        /// Friend allocator used by soap_new_xsd__dateTime_(struct soap*, int)
        friend SOAP_FMAC1 xsd__dateTime_ * SOAP_FMAC2 soap_instantiate_xsd__dateTime_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:269 */
#ifndef SOAP_TYPE_C2_xsd__decimal__
#define SOAP_TYPE_C2_xsd__decimal__ (-822800415)
/* simple XML schema type 'xsd:decimal': */
class SOAP_CMAC xsd__decimal__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:decimal' wrapped by this struct
        std::string __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_xsd__decimal__
        virtual long soap_type(void) const { return SOAP_TYPE_C2_xsd__decimal__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__decimal__, default initialized and not managed by a soap context
        virtual xsd__decimal__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__decimal__); }
      public:
        /// Constructor with default initializations
        xsd__decimal__() : __item() { }
        virtual ~xsd__decimal__() { }
        /// Friend allocator used by soap_new_xsd__decimal__(struct soap*, int)
        friend SOAP_FMAC1 xsd__decimal__ * SOAP_FMAC2 soap_instantiate_xsd__decimal__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:276 */
#ifndef SOAP_TYPE_C2_xsd__double_
#define SOAP_TYPE_C2_xsd__double_ (-822800416)
/* simple XML schema type 'xsd:double': */
class SOAP_CMAC xsd__double_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:double' wrapped by this struct
        double __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_xsd__double_
        virtual long soap_type(void) const { return SOAP_TYPE_C2_xsd__double_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__double_, default initialized and not managed by a soap context
        virtual xsd__double_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__double_); }
      public:
        /// Constructor with default initializations
        xsd__double_() : __item() { }
        virtual ~xsd__double_() { }
        /// Friend allocator used by soap_new_xsd__double_(struct soap*, int)
        friend SOAP_FMAC1 xsd__double_ * SOAP_FMAC2 soap_instantiate_xsd__double_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:286 */
#ifndef SOAP_TYPE_C2_xsd__duration__
#define SOAP_TYPE_C2_xsd__duration__ (-822800419)
/* simple XML schema type 'xsd:duration': */
class SOAP_CMAC xsd__duration__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:duration' wrapped by this struct
        std::string __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_xsd__duration__
        virtual long soap_type(void) const { return SOAP_TYPE_C2_xsd__duration__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__duration__, default initialized and not managed by a soap context
        virtual xsd__duration__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__duration__); }
      public:
        /// Constructor with default initializations
        xsd__duration__() : __item() { }
        virtual ~xsd__duration__() { }
        /// Friend allocator used by soap_new_xsd__duration__(struct soap*, int)
        friend SOAP_FMAC1 xsd__duration__ * SOAP_FMAC2 soap_instantiate_xsd__duration__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:293 */
#ifndef SOAP_TYPE_C2_xsd__float_
#define SOAP_TYPE_C2_xsd__float_ (-822800420)
/* simple XML schema type 'xsd:float': */
class SOAP_CMAC xsd__float_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:float' wrapped by this struct
        float __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_xsd__float_
        virtual long soap_type(void) const { return SOAP_TYPE_C2_xsd__float_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__float_, default initialized and not managed by a soap context
        virtual xsd__float_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__float_); }
      public:
        /// Constructor with default initializations
        xsd__float_() : __item() { }
        virtual ~xsd__float_() { }
        /// Friend allocator used by soap_new_xsd__float_(struct soap*, int)
        friend SOAP_FMAC1 xsd__float_ * SOAP_FMAC2 soap_instantiate_xsd__float_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:300 */
#ifndef SOAP_TYPE_C2_xsd__int_
#define SOAP_TYPE_C2_xsd__int_ (-822800422)
/* simple XML schema type 'xsd:int': */
class SOAP_CMAC xsd__int_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:int' wrapped by this struct
        int __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_xsd__int_
        virtual long soap_type(void) const { return SOAP_TYPE_C2_xsd__int_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__int_, default initialized and not managed by a soap context
        virtual xsd__int_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__int_); }
      public:
        /// Constructor with default initializations
        xsd__int_() : __item() { }
        virtual ~xsd__int_() { }
        /// Friend allocator used by soap_new_xsd__int_(struct soap*, int)
        friend SOAP_FMAC1 xsd__int_ * SOAP_FMAC2 soap_instantiate_xsd__int_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:307 */
#ifndef SOAP_TYPE_C2_xsd__long_
#define SOAP_TYPE_C2_xsd__long_ (-822800423)
/* simple XML schema type 'xsd:long': */
class SOAP_CMAC xsd__long_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:long' wrapped by this struct
        LONG64 __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_xsd__long_
        virtual long soap_type(void) const { return SOAP_TYPE_C2_xsd__long_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__long_, default initialized and not managed by a soap context
        virtual xsd__long_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__long_); }
      public:
        /// Constructor with default initializations
        xsd__long_() : __item() { }
        virtual ~xsd__long_() { }
        /// Friend allocator used by soap_new_xsd__long_(struct soap*, int)
        friend SOAP_FMAC1 xsd__long_ * SOAP_FMAC2 soap_instantiate_xsd__long_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:314 */
#ifndef SOAP_TYPE_C2_xsd__short_
#define SOAP_TYPE_C2_xsd__short_ (-822800425)
/* simple XML schema type 'xsd:short': */
class SOAP_CMAC xsd__short_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:short' wrapped by this struct
        short __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_xsd__short_
        virtual long soap_type(void) const { return SOAP_TYPE_C2_xsd__short_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__short_, default initialized and not managed by a soap context
        virtual xsd__short_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__short_); }
      public:
        /// Constructor with default initializations
        xsd__short_() : __item() { }
        virtual ~xsd__short_() { }
        /// Friend allocator used by soap_new_xsd__short_(struct soap*, int)
        friend SOAP_FMAC1 xsd__short_ * SOAP_FMAC2 soap_instantiate_xsd__short_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:321 */
#ifndef SOAP_TYPE_C2_xsd__string_
#define SOAP_TYPE_C2_xsd__string_ (-822800427)
/* simple XML schema type 'xsd:string': */
class SOAP_CMAC xsd__string_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:string' wrapped by this struct
        std::string __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_xsd__string_
        virtual long soap_type(void) const { return SOAP_TYPE_C2_xsd__string_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__string_, default initialized and not managed by a soap context
        virtual xsd__string_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__string_); }
      public:
        /// Constructor with default initializations
        xsd__string_() : __item() { }
        virtual ~xsd__string_() { }
        /// Friend allocator used by soap_new_xsd__string_(struct soap*, int)
        friend SOAP_FMAC1 xsd__string_ * SOAP_FMAC2 soap_instantiate_xsd__string_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:328 */
#ifndef SOAP_TYPE_C2_xsd__unsignedByte__
#define SOAP_TYPE_C2_xsd__unsignedByte__ (-822800428)
/* simple XML schema type 'xsd:unsignedByte': */
class SOAP_CMAC xsd__unsignedByte__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:unsignedByte' wrapped by this struct
        unsigned char __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_xsd__unsignedByte__
        virtual long soap_type(void) const { return SOAP_TYPE_C2_xsd__unsignedByte__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__unsignedByte__, default initialized and not managed by a soap context
        virtual xsd__unsignedByte__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__unsignedByte__); }
      public:
        /// Constructor with default initializations
        xsd__unsignedByte__() : __item() { }
        virtual ~xsd__unsignedByte__() { }
        /// Friend allocator used by soap_new_xsd__unsignedByte__(struct soap*, int)
        friend SOAP_FMAC1 xsd__unsignedByte__ * SOAP_FMAC2 soap_instantiate_xsd__unsignedByte__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:335 */
#ifndef SOAP_TYPE_C2_xsd__unsignedInt_
#define SOAP_TYPE_C2_xsd__unsignedInt_ (-822800429)
/* simple XML schema type 'xsd:unsignedInt': */
class SOAP_CMAC xsd__unsignedInt_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:unsignedInt' wrapped by this struct
        unsigned int __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_xsd__unsignedInt_
        virtual long soap_type(void) const { return SOAP_TYPE_C2_xsd__unsignedInt_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__unsignedInt_, default initialized and not managed by a soap context
        virtual xsd__unsignedInt_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__unsignedInt_); }
      public:
        /// Constructor with default initializations
        xsd__unsignedInt_() : __item() { }
        virtual ~xsd__unsignedInt_() { }
        /// Friend allocator used by soap_new_xsd__unsignedInt_(struct soap*, int)
        friend SOAP_FMAC1 xsd__unsignedInt_ * SOAP_FMAC2 soap_instantiate_xsd__unsignedInt_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:342 */
#ifndef SOAP_TYPE_C2_xsd__unsignedLong_
#define SOAP_TYPE_C2_xsd__unsignedLong_ (-822800430)
/* simple XML schema type 'xsd:unsignedLong': */
class SOAP_CMAC xsd__unsignedLong_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:unsignedLong' wrapped by this struct
        ULONG64 __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_xsd__unsignedLong_
        virtual long soap_type(void) const { return SOAP_TYPE_C2_xsd__unsignedLong_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__unsignedLong_, default initialized and not managed by a soap context
        virtual xsd__unsignedLong_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__unsignedLong_); }
      public:
        /// Constructor with default initializations
        xsd__unsignedLong_() : __item() { }
        virtual ~xsd__unsignedLong_() { }
        /// Friend allocator used by soap_new_xsd__unsignedLong_(struct soap*, int)
        friend SOAP_FMAC1 xsd__unsignedLong_ * SOAP_FMAC2 soap_instantiate_xsd__unsignedLong_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:349 */
#ifndef SOAP_TYPE_C2_xsd__unsignedShort_
#define SOAP_TYPE_C2_xsd__unsignedShort_ (-822800432)
/* simple XML schema type 'xsd:unsignedShort': */
class SOAP_CMAC xsd__unsignedShort_ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'xsd:unsignedShort' wrapped by this struct
        unsigned short __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_xsd__unsignedShort_
        virtual long soap_type(void) const { return SOAP_TYPE_C2_xsd__unsignedShort_; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type xsd__unsignedShort_, default initialized and not managed by a soap context
        virtual xsd__unsignedShort_ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(xsd__unsignedShort_); }
      public:
        /// Constructor with default initializations
        xsd__unsignedShort_() : __item() { }
        virtual ~xsd__unsignedShort_() { }
        /// Friend allocator used by soap_new_xsd__unsignedShort_(struct soap*, int)
        friend SOAP_FMAC1 xsd__unsignedShort_ * SOAP_FMAC2 soap_instantiate_xsd__unsignedShort_(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:453 */
#ifndef SOAP_TYPE_C2_contest24__char__
#define SOAP_TYPE_C2_contest24__char__ (-822800457)
/* simple XML schema type 'contest24:char': */
class SOAP_CMAC contest24__char__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'contest24:char' wrapped by this struct
        int __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_contest24__char__
        virtual long soap_type(void) const { return SOAP_TYPE_C2_contest24__char__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest24__char__, default initialized and not managed by a soap context
        virtual contest24__char__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest24__char__); }
      public:
        /// Constructor with default initializations
        contest24__char__() : __item() { }
        virtual ~contest24__char__() { }
        /// Friend allocator used by soap_new_contest24__char__(struct soap*, int)
        friend SOAP_FMAC1 contest24__char__ * SOAP_FMAC2 soap_instantiate_contest24__char__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:467 */
#ifndef SOAP_TYPE_C2_contest24__duration__
#define SOAP_TYPE_C2_contest24__duration__ (-822800459)
/* simple XML schema type 'contest24:duration': */
class SOAP_CMAC contest24__duration__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'contest24:duration' wrapped by this struct
        std::string __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_contest24__duration__
        virtual long soap_type(void) const { return SOAP_TYPE_C2_contest24__duration__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest24__duration__, default initialized and not managed by a soap context
        virtual contest24__duration__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest24__duration__); }
      public:
        /// Constructor with default initializations
        contest24__duration__() : __item() { }
        virtual ~contest24__duration__() { }
        /// Friend allocator used by soap_new_contest24__duration__(struct soap*, int)
        friend SOAP_FMAC1 contest24__duration__ * SOAP_FMAC2 soap_instantiate_contest24__duration__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:480 */
#ifndef SOAP_TYPE_C2_contest24__guid__
#define SOAP_TYPE_C2_contest24__guid__ (-822800461)
/* simple XML schema type 'contest24:guid': */
class SOAP_CMAC contest24__guid__ : public xsd__anyType {
      public:
        /// Simple content of XML schema type 'contest24:guid' wrapped by this struct
        std::string __item;
      public:
        /// Return unique type id SOAP_TYPE_C2_contest24__guid__
        virtual long soap_type(void) const { return SOAP_TYPE_C2_contest24__guid__; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest24__guid__, default initialized and not managed by a soap context
        virtual contest24__guid__ *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest24__guid__); }
      public:
        /// Constructor with default initializations
        contest24__guid__() : __item() { }
        virtual ~contest24__guid__() { }
        /// Friend allocator used by soap_new_contest24__guid__(struct soap*, int)
        friend SOAP_FMAC1 contest24__guid__ * SOAP_FMAC2 soap_instantiate_contest24__guid__(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:362 */
#ifndef SOAP_TYPE_C2_contest26__ArrayOfstring
#define SOAP_TYPE_C2_contest26__ArrayOfstring (-822800434)
/* complex XML schema type 'contest26:ArrayOfstring': */
class SOAP_CMAC contest26__ArrayOfstring : public xsd__anyType {
      public:
        /// Optional element 'contest26:string' of XML schema type 'xsd:string'
        std::vector<std::string> string;
      public:
        /// Return unique type id SOAP_TYPE_C2_contest26__ArrayOfstring
        virtual long soap_type(void) const { return SOAP_TYPE_C2_contest26__ArrayOfstring; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest26__ArrayOfstring, default initialized and not managed by a soap context
        virtual contest26__ArrayOfstring *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest26__ArrayOfstring); }
      public:
        /// Constructor with default initializations
        contest26__ArrayOfstring() : string() { }
        virtual ~contest26__ArrayOfstring() { }
        /// Friend allocator used by soap_new_contest26__ArrayOfstring(struct soap*, int)
        friend SOAP_FMAC1 contest26__ArrayOfstring * SOAP_FMAC2 soap_instantiate_contest26__ArrayOfstring(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:364 */
#ifndef SOAP_TYPE_C2_contest26__ArrayOfint
#define SOAP_TYPE_C2_contest26__ArrayOfint (-822800435)
/* complex XML schema type 'contest26:ArrayOfint': */
class SOAP_CMAC contest26__ArrayOfint : public xsd__anyType {
      public:
        /// Optional element 'contest26:int' of XML schema type 'xsd:int'
        std::vector<int> int_;
      public:
        /// Return unique type id SOAP_TYPE_C2_contest26__ArrayOfint
        virtual long soap_type(void) const { return SOAP_TYPE_C2_contest26__ArrayOfint; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest26__ArrayOfint, default initialized and not managed by a soap context
        virtual contest26__ArrayOfint *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest26__ArrayOfint); }
      public:
        /// Constructor with default initializations
        contest26__ArrayOfint() : int_() { }
        virtual ~contest26__ArrayOfint() { }
        /// Friend allocator used by soap_new_contest26__ArrayOfint(struct soap*, int)
        friend SOAP_FMAC1 contest26__ArrayOfint * SOAP_FMAC2 soap_instantiate_contest26__ArrayOfint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:366 */
#ifndef SOAP_TYPE_C2_contest25__ArrayOfQso
#define SOAP_TYPE_C2_contest25__ArrayOfQso (-822800436)
/* complex XML schema type 'contest25:ArrayOfQso': */
class SOAP_CMAC contest25__ArrayOfQso : public xsd__anyType {
      public:
        /// Optional element 'contest25:Qso' of XML schema type 'contest25:Qso'
        std::vector<contest25__Qso *> Qso;
      public:
        /// Return unique type id SOAP_TYPE_C2_contest25__ArrayOfQso
        virtual long soap_type(void) const { return SOAP_TYPE_C2_contest25__ArrayOfQso; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest25__ArrayOfQso, default initialized and not managed by a soap context
        virtual contest25__ArrayOfQso *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest25__ArrayOfQso); }
      public:
        /// Constructor with default initializations
        contest25__ArrayOfQso() : Qso() { }
        virtual ~contest25__ArrayOfQso() { }
        /// Friend allocator used by soap_new_contest25__ArrayOfQso(struct soap*, int)
        friend SOAP_FMAC1 contest25__ArrayOfQso * SOAP_FMAC2 soap_instantiate_contest25__ArrayOfQso(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:368 */
#ifndef SOAP_TYPE_C2_contest25__Qso
#define SOAP_TYPE_C2_contest25__Qso (-822800437)
/* complex XML schema type 'contest25:Qso': */
class SOAP_CMAC contest25__Qso : public xsd__anyType {
      public:
        /// Required element 'contest25:band' of XML schema type 'xsd:int'
        int band;
        /// Required element 'contest25:dupe' of XML schema type 'xsd:int'
        int dupe;
        /// Required element 'contest25:idKey' of XML schema type 'xsd:string'
        std::string idKey;
        /// Required element 'contest25:mode' of XML schema type 'xsd:int'
        int mode;
        /// Required nillable (xsi:nil when NULL) element 'contest25:qsoparts' of XML schema type 'contest26:ArrayOfstring'
        contest26__ArrayOfstring *qsoparts;
        /// Required element 'contest25:recvFreq' of XML schema type 'xsd:double'
        double recvFreq;
        /// Required element 'contest25:serial' of XML schema type 'xsd:int'
        int serial;
        /// Required element 'contest25:station' of XML schema type 'xsd:string'
        std::string station;
        /// Required element 'contest25:time64H' of XML schema type 'xsd:int'
        int time64H;
        /// Required element 'contest25:time64L' of XML schema type 'xsd:int'
        int time64L;
        /// Required element 'contest25:updatedBy' of XML schema type 'xsd:string'
        std::string updatedBy;
        /// Required element 'contest25:version' of XML schema type 'xsd:int'
        int version;
        /// Required element 'contest25:xmitFreq' of XML schema type 'xsd:double'
        double xmitFreq;
      public:
        /// Return unique type id SOAP_TYPE_C2_contest25__Qso
        virtual long soap_type(void) const { return SOAP_TYPE_C2_contest25__Qso; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest25__Qso, default initialized and not managed by a soap context
        virtual contest25__Qso *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest25__Qso); }
      public:
        /// Constructor with default initializations
        contest25__Qso() : band(), dupe(), idKey(), mode(), qsoparts(), recvFreq(), serial(), station(), time64H(), time64L(), updatedBy(), version(), xmitFreq() { }
        virtual ~contest25__Qso() { }
        /// Friend allocator used by soap_new_contest25__Qso(struct soap*, int)
        friend SOAP_FMAC1 contest25__Qso * SOAP_FMAC2 soap_instantiate_contest25__Qso(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:370 */
#ifndef SOAP_TYPE_C2_contest25__QsoUpdate
#define SOAP_TYPE_C2_contest25__QsoUpdate (-822800438)
/* complex XML schema type 'contest25:QsoUpdate': */
class SOAP_CMAC contest25__QsoUpdate : public xsd__anyType {
      public:
        /// Required element 'contest25:logState' of XML schema type 'xsd:int'
        int logState;
        /// Required nillable (xsi:nil when NULL) element 'contest25:qsoArray' of XML schema type 'contest25:ArrayOfQso'
        contest25__ArrayOfQso *qsoArray;
      public:
        /// Return unique type id SOAP_TYPE_C2_contest25__QsoUpdate
        virtual long soap_type(void) const { return SOAP_TYPE_C2_contest25__QsoUpdate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest25__QsoUpdate, default initialized and not managed by a soap context
        virtual contest25__QsoUpdate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest25__QsoUpdate); }
      public:
        /// Constructor with default initializations
        contest25__QsoUpdate() : logState(), qsoArray() { }
        virtual ~contest25__QsoUpdate() { }
        /// Friend allocator used by soap_new_contest25__QsoUpdate(struct soap*, int)
        friend SOAP_FMAC1 contest25__QsoUpdate * SOAP_FMAC2 soap_instantiate_contest25__QsoUpdate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:372 */
#ifndef SOAP_TYPE_C2_contest25__LogSummary
#define SOAP_TYPE_C2_contest25__LogSummary (-822800439)
/* complex XML schema type 'contest25:LogSummary': */
class SOAP_CMAC contest25__LogSummary : public xsd__anyType {
      public:
        /// Required element 'contest25:logState' of XML schema type 'xsd:int'
        int logState;
        /// Required nillable (xsi:nil when NULL) element 'contest25:logSummaryIds' of XML schema type 'contest25:ArrayOfQsoIdVersion'
        contest25__ArrayOfQsoIdVersion *logSummaryIds;
      public:
        /// Return unique type id SOAP_TYPE_C2_contest25__LogSummary
        virtual long soap_type(void) const { return SOAP_TYPE_C2_contest25__LogSummary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest25__LogSummary, default initialized and not managed by a soap context
        virtual contest25__LogSummary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest25__LogSummary); }
      public:
        /// Constructor with default initializations
        contest25__LogSummary() : logState(), logSummaryIds() { }
        virtual ~contest25__LogSummary() { }
        /// Friend allocator used by soap_new_contest25__LogSummary(struct soap*, int)
        friend SOAP_FMAC1 contest25__LogSummary * SOAP_FMAC2 soap_instantiate_contest25__LogSummary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:374 */
#ifndef SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion
#define SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion (-822800440)
/* complex XML schema type 'contest25:ArrayOfQsoIdVersion': */
class SOAP_CMAC contest25__ArrayOfQsoIdVersion : public xsd__anyType {
      public:
        /// Optional element 'contest25:QsoIdVersion' of XML schema type 'contest25:QsoIdVersion'
        std::vector<contest25__QsoIdVersion *> QsoIdVersion;
      public:
        /// Return unique type id SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion
        virtual long soap_type(void) const { return SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest25__ArrayOfQsoIdVersion, default initialized and not managed by a soap context
        virtual contest25__ArrayOfQsoIdVersion *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest25__ArrayOfQsoIdVersion); }
      public:
        /// Constructor with default initializations
        contest25__ArrayOfQsoIdVersion() : QsoIdVersion() { }
        virtual ~contest25__ArrayOfQsoIdVersion() { }
        /// Friend allocator used by soap_new_contest25__ArrayOfQsoIdVersion(struct soap*, int)
        friend SOAP_FMAC1 contest25__ArrayOfQsoIdVersion * SOAP_FMAC2 soap_instantiate_contest25__ArrayOfQsoIdVersion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:376 */
#ifndef SOAP_TYPE_C2_contest25__QsoIdVersion
#define SOAP_TYPE_C2_contest25__QsoIdVersion (-822800441)
/* complex XML schema type 'contest25:QsoIdVersion': */
class SOAP_CMAC contest25__QsoIdVersion : public xsd__anyType {
      public:
        /// Required element 'contest25:id' of XML schema type 'xsd:string'
        std::string id;
        /// Required element 'contest25:updatedBy' of XML schema type 'xsd:string'
        std::string updatedBy;
        /// Required element 'contest25:version' of XML schema type 'xsd:int'
        int version;
      public:
        /// Return unique type id SOAP_TYPE_C2_contest25__QsoIdVersion
        virtual long soap_type(void) const { return SOAP_TYPE_C2_contest25__QsoIdVersion; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest25__QsoIdVersion, default initialized and not managed by a soap context
        virtual contest25__QsoIdVersion *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest25__QsoIdVersion); }
      public:
        /// Constructor with default initializations
        contest25__QsoIdVersion() : id(), updatedBy(), version() { }
        virtual ~contest25__QsoIdVersion() { }
        /// Friend allocator used by soap_new_contest25__QsoIdVersion(struct soap*, int)
        friend SOAP_FMAC1 contest25__QsoIdVersion * SOAP_FMAC2 soap_instantiate_contest25__QsoIdVersion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:378 */
#ifndef SOAP_TYPE_C2_contest25__ArrayOfRigFrequency
#define SOAP_TYPE_C2_contest25__ArrayOfRigFrequency (-822800442)
/* complex XML schema type 'contest25:ArrayOfRigFrequency': */
class SOAP_CMAC contest25__ArrayOfRigFrequency : public xsd__anyType {
      public:
        /// Required element 'contest25:RigFrequency' of XML schema type 'contest25:RigFrequency'
        std::vector<contest25__RigFrequency *> RigFrequency;
      public:
        /// Return unique type id SOAP_TYPE_C2_contest25__ArrayOfRigFrequency
        virtual long soap_type(void) const { return SOAP_TYPE_C2_contest25__ArrayOfRigFrequency; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest25__ArrayOfRigFrequency, default initialized and not managed by a soap context
        virtual contest25__ArrayOfRigFrequency *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest25__ArrayOfRigFrequency); }
      public:
        /// Constructor with default initializations
        contest25__ArrayOfRigFrequency() : RigFrequency() { }
        virtual ~contest25__ArrayOfRigFrequency() { }
        /// Friend allocator used by soap_new_contest25__ArrayOfRigFrequency(struct soap*, int)
        friend SOAP_FMAC1 contest25__ArrayOfRigFrequency * SOAP_FMAC2 soap_instantiate_contest25__ArrayOfRigFrequency(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:380 */
#ifndef SOAP_TYPE_C2_contest25__RigFrequency
#define SOAP_TYPE_C2_contest25__RigFrequency (-822800443)
/* complex XML schema type 'contest25:RigFrequency': */
class SOAP_CMAC contest25__RigFrequency : public xsd__anyType {
      public:
        /// Required element 'contest25:label' of XML schema type 'xsd:string'
        std::string label;
        /// Required element 'contest25:mode' of XML schema type 'xsd:int'
        int mode;
        /// Required element 'contest25:networkLetter' of XML schema type 'xsd:int'
        int networkLetter;
        /// Required element 'contest25:recvFreq' of XML schema type 'xsd:double'
        double recvFreq;
        /// Required element 'contest25:rigNumber' of XML schema type 'xsd:int'
        int rigNumber;
        /// Required element 'contest25:station' of XML schema type 'xsd:string'
        std::string station;
        /// Required element 'contest25:xmitFreq' of XML schema type 'xsd:double'
        double xmitFreq;
      public:
        /// Return unique type id SOAP_TYPE_C2_contest25__RigFrequency
        virtual long soap_type(void) const { return SOAP_TYPE_C2_contest25__RigFrequency; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest25__RigFrequency, default initialized and not managed by a soap context
        virtual contest25__RigFrequency *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest25__RigFrequency); }
      public:
        /// Constructor with default initializations
        contest25__RigFrequency() : label(), mode(), networkLetter(), recvFreq(), rigNumber(), station(), xmitFreq() { }
        virtual ~contest25__RigFrequency() { }
        /// Friend allocator used by soap_new_contest25__RigFrequency(struct soap*, int)
        friend SOAP_FMAC1 contest25__RigFrequency * SOAP_FMAC2 soap_instantiate_contest25__RigFrequency(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:382 */
#ifndef SOAP_TYPE_C2__contest23__GetSessionId
#define SOAP_TYPE_C2__contest23__GetSessionId (-822800444)
/* complex XML schema type 'contest23:GetSessionId': */
class SOAP_CMAC _contest23__GetSessionId {
      public:
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C2__contest23__GetSessionId
        virtual long soap_type(void) const { return SOAP_TYPE_C2__contest23__GetSessionId; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _contest23__GetSessionId, default initialized and not managed by a soap context
        virtual _contest23__GetSessionId *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_contest23__GetSessionId); }
      public:
        /// Constructor with default initializations
        _contest23__GetSessionId() : soap() { }
        virtual ~_contest23__GetSessionId() { }
        /// Friend allocator used by soap_new__contest23__GetSessionId(struct soap*, int)
        friend SOAP_FMAC1 _contest23__GetSessionId * SOAP_FMAC2 soap_instantiate__contest23__GetSessionId(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:384 */
#ifndef SOAP_TYPE_C2__contest23__GetSessionIdResponse
#define SOAP_TYPE_C2__contest23__GetSessionIdResponse (-822800445)
/* complex XML schema type 'contest23:GetSessionIdResponse': */
class SOAP_CMAC _contest23__GetSessionIdResponse {
      public:
        /// Required element 'contest23:GetSessionIdResult' of XML schema type 'xsd:string'
        std::string GetSessionIdResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C2__contest23__GetSessionIdResponse
        virtual long soap_type(void) const { return SOAP_TYPE_C2__contest23__GetSessionIdResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _contest23__GetSessionIdResponse, default initialized and not managed by a soap context
        virtual _contest23__GetSessionIdResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_contest23__GetSessionIdResponse); }
      public:
        /// Constructor with default initializations
        _contest23__GetSessionIdResponse() : GetSessionIdResult(), soap() { }
        virtual ~_contest23__GetSessionIdResponse() { }
        /// Friend allocator used by soap_new__contest23__GetSessionIdResponse(struct soap*, int)
        friend SOAP_FMAC1 _contest23__GetSessionIdResponse * SOAP_FMAC2 soap_instantiate__contest23__GetSessionIdResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:386 */
#ifndef SOAP_TYPE_C2__contest23__addAndGetQsos
#define SOAP_TYPE_C2__contest23__addAndGetQsos (-822800446)
/* complex XML schema type 'contest23:addAndGetQsos': */
class SOAP_CMAC _contest23__addAndGetQsos {
      public:
        /// Required element 'contest23:SessionId' of XML schema type 'xsd:string'
        std::string SessionId;
        /// Required nillable (xsi:nil when NULL) element 'contest23:QsoAddArray' of XML schema type 'contest25:ArrayOfQso'
        contest25__ArrayOfQso *QsoAddArray;
        /// Required element 'contest23:OldState' of XML schema type 'xsd:int'
        int OldState;
        /// Required element 'contest23:MaxRequested' of XML schema type 'xsd:int'
        int MaxRequested;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C2__contest23__addAndGetQsos
        virtual long soap_type(void) const { return SOAP_TYPE_C2__contest23__addAndGetQsos; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _contest23__addAndGetQsos, default initialized and not managed by a soap context
        virtual _contest23__addAndGetQsos *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_contest23__addAndGetQsos); }
      public:
        /// Constructor with default initializations
        _contest23__addAndGetQsos() : SessionId(), QsoAddArray(), OldState(), MaxRequested(), soap() { }
        virtual ~_contest23__addAndGetQsos() { }
        /// Friend allocator used by soap_new__contest23__addAndGetQsos(struct soap*, int)
        friend SOAP_FMAC1 _contest23__addAndGetQsos * SOAP_FMAC2 soap_instantiate__contest23__addAndGetQsos(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:388 */
#ifndef SOAP_TYPE_C2__contest23__addAndGetQsosResponse
#define SOAP_TYPE_C2__contest23__addAndGetQsosResponse (-822800447)
/* complex XML schema type 'contest23:addAndGetQsosResponse': */
class SOAP_CMAC _contest23__addAndGetQsosResponse {
      public:
        /// Required element 'contest23:addAndGetQsosResult' of XML schema type 'contest25:QsoUpdate'
        contest25__QsoUpdate *addAndGetQsosResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C2__contest23__addAndGetQsosResponse
        virtual long soap_type(void) const { return SOAP_TYPE_C2__contest23__addAndGetQsosResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _contest23__addAndGetQsosResponse, default initialized and not managed by a soap context
        virtual _contest23__addAndGetQsosResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_contest23__addAndGetQsosResponse); }
      public:
        /// Constructor with default initializations
        _contest23__addAndGetQsosResponse() : addAndGetQsosResult(), soap() { }
        virtual ~_contest23__addAndGetQsosResponse() { }
        /// Friend allocator used by soap_new__contest23__addAndGetQsosResponse(struct soap*, int)
        friend SOAP_FMAC1 _contest23__addAndGetQsosResponse * SOAP_FMAC2 soap_instantiate__contest23__addAndGetQsosResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:390 */
#ifndef SOAP_TYPE_C2__contest23__AddAndGetLogSummary
#define SOAP_TYPE_C2__contest23__AddAndGetLogSummary (-822800448)
/* complex XML schema type 'contest23:AddAndGetLogSummary': */
class SOAP_CMAC _contest23__AddAndGetLogSummary {
      public:
        /// Required element 'contest23:SessionId' of XML schema type 'xsd:string'
        std::string SessionId;
        /// Required nillable (xsi:nil when NULL) element 'contest23:QsoAddArray' of XML schema type 'contest25:ArrayOfQso'
        contest25__ArrayOfQso *QsoAddArray;
        /// Required element 'contest23:OldState' of XML schema type 'xsd:int'
        int OldState;
        /// Required element 'contest23:MaxRequested' of XML schema type 'xsd:int'
        int MaxRequested;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C2__contest23__AddAndGetLogSummary
        virtual long soap_type(void) const { return SOAP_TYPE_C2__contest23__AddAndGetLogSummary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _contest23__AddAndGetLogSummary, default initialized and not managed by a soap context
        virtual _contest23__AddAndGetLogSummary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_contest23__AddAndGetLogSummary); }
      public:
        /// Constructor with default initializations
        _contest23__AddAndGetLogSummary() : SessionId(), QsoAddArray(), OldState(), MaxRequested(), soap() { }
        virtual ~_contest23__AddAndGetLogSummary() { }
        /// Friend allocator used by soap_new__contest23__AddAndGetLogSummary(struct soap*, int)
        friend SOAP_FMAC1 _contest23__AddAndGetLogSummary * SOAP_FMAC2 soap_instantiate__contest23__AddAndGetLogSummary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:392 */
#ifndef SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse
#define SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse (-822800449)
/* complex XML schema type 'contest23:AddAndGetLogSummaryResponse': */
class SOAP_CMAC _contest23__AddAndGetLogSummaryResponse {
      public:
        /// Required element 'contest23:AddAndGetLogSummaryResult' of XML schema type 'contest25:LogSummary'
        contest25__LogSummary *AddAndGetLogSummaryResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse
        virtual long soap_type(void) const { return SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _contest23__AddAndGetLogSummaryResponse, default initialized and not managed by a soap context
        virtual _contest23__AddAndGetLogSummaryResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_contest23__AddAndGetLogSummaryResponse); }
      public:
        /// Constructor with default initializations
        _contest23__AddAndGetLogSummaryResponse() : AddAndGetLogSummaryResult(), soap() { }
        virtual ~_contest23__AddAndGetLogSummaryResponse() { }
        /// Friend allocator used by soap_new__contest23__AddAndGetLogSummaryResponse(struct soap*, int)
        friend SOAP_FMAC1 _contest23__AddAndGetLogSummaryResponse * SOAP_FMAC2 soap_instantiate__contest23__AddAndGetLogSummaryResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:394 */
#ifndef SOAP_TYPE_C2__contest23__getQsosByKeyArray
#define SOAP_TYPE_C2__contest23__getQsosByKeyArray (-822800450)
/* complex XML schema type 'contest23:getQsosByKeyArray': */
class SOAP_CMAC _contest23__getQsosByKeyArray {
      public:
        /// Required element 'contest23:SessionId' of XML schema type 'xsd:string'
        std::string SessionId;
        /// Required nillable (xsi:nil when NULL) element 'contest23:QsoKeyArray' of XML schema type 'contest26:ArrayOfstring'
        contest26__ArrayOfstring *QsoKeyArray;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C2__contest23__getQsosByKeyArray
        virtual long soap_type(void) const { return SOAP_TYPE_C2__contest23__getQsosByKeyArray; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _contest23__getQsosByKeyArray, default initialized and not managed by a soap context
        virtual _contest23__getQsosByKeyArray *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_contest23__getQsosByKeyArray); }
      public:
        /// Constructor with default initializations
        _contest23__getQsosByKeyArray() : SessionId(), QsoKeyArray(), soap() { }
        virtual ~_contest23__getQsosByKeyArray() { }
        /// Friend allocator used by soap_new__contest23__getQsosByKeyArray(struct soap*, int)
        friend SOAP_FMAC1 _contest23__getQsosByKeyArray * SOAP_FMAC2 soap_instantiate__contest23__getQsosByKeyArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:396 */
#ifndef SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse
#define SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse (-822800451)
/* complex XML schema type 'contest23:getQsosByKeyArrayResponse': */
class SOAP_CMAC _contest23__getQsosByKeyArrayResponse {
      public:
        /// Required element 'contest23:getQsosByKeyArrayResult' of XML schema type 'contest25:QsoUpdate'
        contest25__QsoUpdate *getQsosByKeyArrayResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse
        virtual long soap_type(void) const { return SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _contest23__getQsosByKeyArrayResponse, default initialized and not managed by a soap context
        virtual _contest23__getQsosByKeyArrayResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_contest23__getQsosByKeyArrayResponse); }
      public:
        /// Constructor with default initializations
        _contest23__getQsosByKeyArrayResponse() : getQsosByKeyArrayResult(), soap() { }
        virtual ~_contest23__getQsosByKeyArrayResponse() { }
        /// Friend allocator used by soap_new__contest23__getQsosByKeyArrayResponse(struct soap*, int)
        friend SOAP_FMAC1 _contest23__getQsosByKeyArrayResponse * SOAP_FMAC2 soap_instantiate__contest23__getQsosByKeyArrayResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:398 */
#ifndef SOAP_TYPE_C2__contest23__ColumnNamesToIndices
#define SOAP_TYPE_C2__contest23__ColumnNamesToIndices (-822800452)
/* complex XML schema type 'contest23:ColumnNamesToIndices': */
class SOAP_CMAC _contest23__ColumnNamesToIndices {
      public:
        /// Required element 'contest23:SessionId' of XML schema type 'xsd:string'
        std::string SessionId;
        /// Required nillable (xsi:nil when NULL) element 'contest23:ColumnNames' of XML schema type 'contest26:ArrayOfstring'
        contest26__ArrayOfstring *ColumnNames;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C2__contest23__ColumnNamesToIndices
        virtual long soap_type(void) const { return SOAP_TYPE_C2__contest23__ColumnNamesToIndices; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _contest23__ColumnNamesToIndices, default initialized and not managed by a soap context
        virtual _contest23__ColumnNamesToIndices *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_contest23__ColumnNamesToIndices); }
      public:
        /// Constructor with default initializations
        _contest23__ColumnNamesToIndices() : SessionId(), ColumnNames(), soap() { }
        virtual ~_contest23__ColumnNamesToIndices() { }
        /// Friend allocator used by soap_new__contest23__ColumnNamesToIndices(struct soap*, int)
        friend SOAP_FMAC1 _contest23__ColumnNamesToIndices * SOAP_FMAC2 soap_instantiate__contest23__ColumnNamesToIndices(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:400 */
#ifndef SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse
#define SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse (-822800453)
/* complex XML schema type 'contest23:ColumnNamesToIndicesResponse': */
class SOAP_CMAC _contest23__ColumnNamesToIndicesResponse {
      public:
        /// Required nillable (xsi:nil when NULL) element 'contest23:ColumnNamesToIndicesResult' of XML schema type 'contest26:ArrayOfint'
        contest26__ArrayOfint *ColumnNamesToIndicesResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse
        virtual long soap_type(void) const { return SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _contest23__ColumnNamesToIndicesResponse, default initialized and not managed by a soap context
        virtual _contest23__ColumnNamesToIndicesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_contest23__ColumnNamesToIndicesResponse); }
      public:
        /// Constructor with default initializations
        _contest23__ColumnNamesToIndicesResponse() : ColumnNamesToIndicesResult(), soap() { }
        virtual ~_contest23__ColumnNamesToIndicesResponse() { }
        /// Friend allocator used by soap_new__contest23__ColumnNamesToIndicesResponse(struct soap*, int)
        friend SOAP_FMAC1 _contest23__ColumnNamesToIndicesResponse * SOAP_FMAC2 soap_instantiate__contest23__ColumnNamesToIndicesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:402 */
#ifndef SOAP_TYPE_C2__contest23__ExchangeFrequencies
#define SOAP_TYPE_C2__contest23__ExchangeFrequencies (-822800454)
/* complex XML schema type 'contest23:ExchangeFrequencies': */
class SOAP_CMAC _contest23__ExchangeFrequencies {
      public:
        /// Required nillable (xsi:nil when NULL) element 'contest23:IncomingFreqs' of XML schema type 'contest25:ArrayOfRigFrequency'
        contest25__ArrayOfRigFrequency *IncomingFreqs;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C2__contest23__ExchangeFrequencies
        virtual long soap_type(void) const { return SOAP_TYPE_C2__contest23__ExchangeFrequencies; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _contest23__ExchangeFrequencies, default initialized and not managed by a soap context
        virtual _contest23__ExchangeFrequencies *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_contest23__ExchangeFrequencies); }
      public:
        /// Constructor with default initializations
        _contest23__ExchangeFrequencies() : IncomingFreqs(), soap() { }
        virtual ~_contest23__ExchangeFrequencies() { }
        /// Friend allocator used by soap_new__contest23__ExchangeFrequencies(struct soap*, int)
        friend SOAP_FMAC1 _contest23__ExchangeFrequencies * SOAP_FMAC2 soap_instantiate__contest23__ExchangeFrequencies(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:404 */
#ifndef SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse
#define SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse (-822800455)
/* complex XML schema type 'contest23:ExchangeFrequenciesResponse': */
class SOAP_CMAC _contest23__ExchangeFrequenciesResponse {
      public:
        /// Required nillable (xsi:nil when NULL) element 'contest23:ExchangeFrequenciesResult' of XML schema type 'contest25:ArrayOfRigFrequency'
        contest25__ArrayOfRigFrequency *ExchangeFrequenciesResult;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse
        virtual long soap_type(void) const { return SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type _contest23__ExchangeFrequenciesResponse, default initialized and not managed by a soap context
        virtual _contest23__ExchangeFrequenciesResponse *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(_contest23__ExchangeFrequenciesResponse); }
      public:
        /// Constructor with default initializations
        _contest23__ExchangeFrequenciesResponse() : ExchangeFrequenciesResult(), soap() { }
        virtual ~_contest23__ExchangeFrequenciesResponse() { }
        /// Friend allocator used by soap_new__contest23__ExchangeFrequenciesResponse(struct soap*, int)
        friend SOAP_FMAC1 _contest23__ExchangeFrequenciesResponse * SOAP_FMAC2 soap_instantiate__contest23__ExchangeFrequenciesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:1373 */
#ifndef SOAP_TYPE_C2___contest23__GetSessionId
#define SOAP_TYPE_C2___contest23__GetSessionId (-822800480)
/* Wrapper: */
struct SOAP_CMAC __contest23__GetSessionId {
      public:
        /** Optional element 'contest23:GetSessionId' of XML schema type 'contest23:GetSessionId' */
        _contest23__GetSessionId *contest23__GetSessionId;
      public:
        /** Return unique type id SOAP_TYPE_C2___contest23__GetSessionId */
        long soap_type() const { return SOAP_TYPE_C2___contest23__GetSessionId; }
        /** Constructor with member initializations */
        __contest23__GetSessionId() : contest23__GetSessionId() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __contest23__GetSessionId * SOAP_FMAC2 soap_instantiate___contest23__GetSessionId(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:1440 */
#ifndef SOAP_TYPE_C2___contest23__addAndGetQsos
#define SOAP_TYPE_C2___contest23__addAndGetQsos (-822800484)
/* Wrapper: */
struct SOAP_CMAC __contest23__addAndGetQsos {
      public:
        /** Optional element 'contest23:addAndGetQsos' of XML schema type 'contest23:addAndGetQsos' */
        _contest23__addAndGetQsos *contest23__addAndGetQsos;
      public:
        /** Return unique type id SOAP_TYPE_C2___contest23__addAndGetQsos */
        long soap_type() const { return SOAP_TYPE_C2___contest23__addAndGetQsos; }
        /** Constructor with member initializations */
        __contest23__addAndGetQsos() : contest23__addAndGetQsos() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __contest23__addAndGetQsos * SOAP_FMAC2 soap_instantiate___contest23__addAndGetQsos(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:1507 */
#ifndef SOAP_TYPE_C2___contest23__AddAndGetLogSummary
#define SOAP_TYPE_C2___contest23__AddAndGetLogSummary (-822800488)
/* Wrapper: */
struct SOAP_CMAC __contest23__AddAndGetLogSummary {
      public:
        /** Optional element 'contest23:AddAndGetLogSummary' of XML schema type 'contest23:AddAndGetLogSummary' */
        _contest23__AddAndGetLogSummary *contest23__AddAndGetLogSummary;
      public:
        /** Return unique type id SOAP_TYPE_C2___contest23__AddAndGetLogSummary */
        long soap_type() const { return SOAP_TYPE_C2___contest23__AddAndGetLogSummary; }
        /** Constructor with member initializations */
        __contest23__AddAndGetLogSummary() : contest23__AddAndGetLogSummary() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __contest23__AddAndGetLogSummary * SOAP_FMAC2 soap_instantiate___contest23__AddAndGetLogSummary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:1574 */
#ifndef SOAP_TYPE_C2___contest23__getQsosByKeyArray
#define SOAP_TYPE_C2___contest23__getQsosByKeyArray (-822800492)
/* Wrapper: */
struct SOAP_CMAC __contest23__getQsosByKeyArray {
      public:
        /** Optional element 'contest23:getQsosByKeyArray' of XML schema type 'contest23:getQsosByKeyArray' */
        _contest23__getQsosByKeyArray *contest23__getQsosByKeyArray;
      public:
        /** Return unique type id SOAP_TYPE_C2___contest23__getQsosByKeyArray */
        long soap_type() const { return SOAP_TYPE_C2___contest23__getQsosByKeyArray; }
        /** Constructor with member initializations */
        __contest23__getQsosByKeyArray() : contest23__getQsosByKeyArray() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __contest23__getQsosByKeyArray * SOAP_FMAC2 soap_instantiate___contest23__getQsosByKeyArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:1641 */
#ifndef SOAP_TYPE_C2___contest23__ColumnNamesToIndices
#define SOAP_TYPE_C2___contest23__ColumnNamesToIndices (-822800496)
/* Wrapper: */
struct SOAP_CMAC __contest23__ColumnNamesToIndices {
      public:
        /** Optional element 'contest23:ColumnNamesToIndices' of XML schema type 'contest23:ColumnNamesToIndices' */
        _contest23__ColumnNamesToIndices *contest23__ColumnNamesToIndices;
      public:
        /** Return unique type id SOAP_TYPE_C2___contest23__ColumnNamesToIndices */
        long soap_type() const { return SOAP_TYPE_C2___contest23__ColumnNamesToIndices; }
        /** Constructor with member initializations */
        __contest23__ColumnNamesToIndices() : contest23__ColumnNamesToIndices() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __contest23__ColumnNamesToIndices * SOAP_FMAC2 soap_instantiate___contest23__ColumnNamesToIndices(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:1708 */
#ifndef SOAP_TYPE_C2___contest23__ExchangeFrequencies
#define SOAP_TYPE_C2___contest23__ExchangeFrequencies (-822800500)
/* Wrapper: */
struct SOAP_CMAC __contest23__ExchangeFrequencies {
      public:
        /** Optional element 'contest23:ExchangeFrequencies' of XML schema type 'contest23:ExchangeFrequencies' */
        _contest23__ExchangeFrequencies *contest23__ExchangeFrequencies;
      public:
        /** Return unique type id SOAP_TYPE_C2___contest23__ExchangeFrequencies */
        long soap_type() const { return SOAP_TYPE_C2___contest23__ExchangeFrequencies; }
        /** Constructor with member initializations */
        __contest23__ExchangeFrequencies() : contest23__ExchangeFrequencies() { }
        /** Friend allocator */
        friend SOAP_FMAC1 __contest23__ExchangeFrequencies * SOAP_FMAC2 soap_instantiate___contest23__ExchangeFrequencies(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos2.h:2035 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_C2_SOAP_ENV__Header
#define SOAP_TYPE_C2_SOAP_ENV__Header (-822800501)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_C2_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_C2_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ContestQsos2.h:2035 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_C2_SOAP_ENV__Code
#define SOAP_TYPE_C2_SOAP_ENV__Code (-822800502)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_C2_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_C2_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ContestQsos2.h:2035 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_C2_SOAP_ENV__Detail
#define SOAP_TYPE_C2_SOAP_ENV__Detail (-822800504)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_<typename> assigned to __type */
        /** Do not create a cyclic data structure through this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_C2_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_C2_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ContestQsos2.h:2035 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_C2_SOAP_ENV__Reason
#define SOAP_TYPE_C2_SOAP_ENV__Reason (-822800507)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_C2_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_C2_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ContestQsos2.h:2035 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_C2_SOAP_ENV__Fault
#define SOAP_TYPE_C2_SOAP_ENV__Fault (-822800508)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_C2_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_C2_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE_C2__XML
#define SOAP_TYPE_C2__XML (-822800388)

typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE_C2__QName
#define SOAP_TYPE_C2__QName (-822800389)

typedef char *_QName;
#endif

/* ContestQsos2.h:194 */
#ifndef SOAP_TYPE_C2_xsd__byte
#define SOAP_TYPE_C2_xsd__byte (-822800399)

typedef char xsd__byte;
#endif

/* ContestQsos2.h:197 */
#ifndef SOAP_TYPE_C2_xsd__unsignedByte
#define SOAP_TYPE_C2_xsd__unsignedByte (-822800400)

typedef unsigned char xsd__unsignedByte;
#endif

/* ContestQsos2.h:200 */
#ifndef SOAP_TYPE_C2_xsd__ID
#define SOAP_TYPE_C2_xsd__ID (-822800401)

typedef std::string xsd__ID;
#endif

/* ContestQsos2.h:210 */
#ifndef SOAP_TYPE_C2_xsd__IDREF
#define SOAP_TYPE_C2_xsd__IDREF (-822800403)

typedef std::string xsd__IDREF;
#endif

/* ContestQsos2.h:227 */
#ifndef SOAP_TYPE_C2_xsd__anyURI
#define SOAP_TYPE_C2_xsd__anyURI (-822800406)

typedef std::string xsd__anyURI;
#endif

/* ContestQsos2.h:265 */
#ifndef SOAP_TYPE_C2_xsd__decimal
#define SOAP_TYPE_C2_xsd__decimal (-822800414)

typedef std::string xsd__decimal;
#endif

/* ContestQsos2.h:282 */
#ifndef SOAP_TYPE_C2_xsd__duration
#define SOAP_TYPE_C2_xsd__duration (-822800418)

typedef std::string xsd__duration;
#endif

/* ContestQsos2.h:448 */
#ifndef SOAP_TYPE_C2_contest24__char
#define SOAP_TYPE_C2_contest24__char (-822800456)

typedef int contest24__char;
#endif

/* ContestQsos2.h:462 */
#ifndef SOAP_TYPE_C2_contest24__duration
#define SOAP_TYPE_C2_contest24__duration (-822800458)

typedef std::string contest24__duration;
#endif

/* ContestQsos2.h:475 */
#ifndef SOAP_TYPE_C2_contest24__guid
#define SOAP_TYPE_C2_contest24__guid (-822800460)

typedef std::string contest24__guid;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* xsd__byte has binding name 'xsd__byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_C2_xsd__byte
#define SOAP_TYPE_C2_xsd__byte (-822800399)

#endif

/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_C2_byte
#define SOAP_TYPE_C2_byte (-822800386)

#endif

/* short has binding name 'short' for type 'xsd:short' */
#ifndef SOAP_TYPE_C2_short
#define SOAP_TYPE_C2_short (-822800426)

#endif

/* contest24__char has binding name 'contest24__char' for type 'contest24:char' */
#ifndef SOAP_TYPE_C2_contest24__char
#define SOAP_TYPE_C2_contest24__char (-822800456)

#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_C2_int
#define SOAP_TYPE_C2_int (-822800384)

#endif

/* LONG64 has binding name 'LONG64' for type 'xsd:long' */
#ifndef SOAP_TYPE_C2_LONG64
#define SOAP_TYPE_C2_LONG64 (-822800424)

#endif

/* float has binding name 'float' for type 'xsd:float' */
#ifndef SOAP_TYPE_C2_float
#define SOAP_TYPE_C2_float (-822800421)

#endif

/* double has binding name 'double' for type 'xsd:double' */
#ifndef SOAP_TYPE_C2_double
#define SOAP_TYPE_C2_double (-822800417)

#endif

/* xsd__unsignedByte has binding name 'xsd__unsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_C2_xsd__unsignedByte
#define SOAP_TYPE_C2_xsd__unsignedByte (-822800400)

#endif

/* unsigned char has binding name 'unsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_C2_unsignedByte
#define SOAP_TYPE_C2_unsignedByte (-822800397)

#endif

/* unsigned short has binding name 'unsignedShort' for type 'xsd:unsignedShort' */
#ifndef SOAP_TYPE_C2_unsignedShort
#define SOAP_TYPE_C2_unsignedShort (-822800433)

#endif

/* unsigned int has binding name 'unsignedInt' for type 'xsd:unsignedInt' */
#ifndef SOAP_TYPE_C2_unsignedInt
#define SOAP_TYPE_C2_unsignedInt (-822800396)

#endif

/* ULONG64 has binding name 'ULONG64' for type 'xsd:unsignedLong' */
#ifndef SOAP_TYPE_C2_ULONG64
#define SOAP_TYPE_C2_ULONG64 (-822800431)

#endif

/* time_t has binding name 'dateTime' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_C2_dateTime
#define SOAP_TYPE_C2_dateTime (-822800413)

#endif

/* bool has binding name 'bool' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_C2_bool
#define SOAP_TYPE_C2_bool (-822800410)

#endif

/* contest24__guid__ has binding name 'contest24__guid__' for type 'contest24:guid' */
#ifndef SOAP_TYPE_C2_contest24__guid__
#define SOAP_TYPE_C2_contest24__guid__ (-822800461)

#endif

/* contest24__guid has binding name 'contest24__guid' for type 'contest24:guid' */
#ifndef SOAP_TYPE_C2_contest24__guid
#define SOAP_TYPE_C2_contest24__guid (-822800460)

#endif

/* contest24__duration__ has binding name 'contest24__duration__' for type 'contest24:duration' */
#ifndef SOAP_TYPE_C2_contest24__duration__
#define SOAP_TYPE_C2_contest24__duration__ (-822800459)

#endif

/* contest24__duration has binding name 'contest24__duration' for type 'contest24:duration' */
#ifndef SOAP_TYPE_C2_contest24__duration
#define SOAP_TYPE_C2_contest24__duration (-822800458)

#endif

/* contest24__char__ has binding name 'contest24__char__' for type 'contest24:char' */
#ifndef SOAP_TYPE_C2_contest24__char__
#define SOAP_TYPE_C2_contest24__char__ (-822800457)

#endif

/* _contest23__ExchangeFrequenciesResponse has binding name '_contest23__ExchangeFrequenciesResponse' for type '' */
#ifndef SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse
#define SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse (-822800455)

#endif

/* _contest23__ExchangeFrequencies has binding name '_contest23__ExchangeFrequencies' for type '' */
#ifndef SOAP_TYPE_C2__contest23__ExchangeFrequencies
#define SOAP_TYPE_C2__contest23__ExchangeFrequencies (-822800454)

#endif

/* _contest23__ColumnNamesToIndicesResponse has binding name '_contest23__ColumnNamesToIndicesResponse' for type '' */
#ifndef SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse
#define SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse (-822800453)

#endif

/* _contest23__ColumnNamesToIndices has binding name '_contest23__ColumnNamesToIndices' for type '' */
#ifndef SOAP_TYPE_C2__contest23__ColumnNamesToIndices
#define SOAP_TYPE_C2__contest23__ColumnNamesToIndices (-822800452)

#endif

/* _contest23__getQsosByKeyArrayResponse has binding name '_contest23__getQsosByKeyArrayResponse' for type '' */
#ifndef SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse
#define SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse (-822800451)

#endif

/* _contest23__getQsosByKeyArray has binding name '_contest23__getQsosByKeyArray' for type '' */
#ifndef SOAP_TYPE_C2__contest23__getQsosByKeyArray
#define SOAP_TYPE_C2__contest23__getQsosByKeyArray (-822800450)

#endif

/* _contest23__AddAndGetLogSummaryResponse has binding name '_contest23__AddAndGetLogSummaryResponse' for type '' */
#ifndef SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse
#define SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse (-822800449)

#endif

/* _contest23__AddAndGetLogSummary has binding name '_contest23__AddAndGetLogSummary' for type '' */
#ifndef SOAP_TYPE_C2__contest23__AddAndGetLogSummary
#define SOAP_TYPE_C2__contest23__AddAndGetLogSummary (-822800448)

#endif

/* _contest23__addAndGetQsosResponse has binding name '_contest23__addAndGetQsosResponse' for type '' */
#ifndef SOAP_TYPE_C2__contest23__addAndGetQsosResponse
#define SOAP_TYPE_C2__contest23__addAndGetQsosResponse (-822800447)

#endif

/* _contest23__addAndGetQsos has binding name '_contest23__addAndGetQsos' for type '' */
#ifndef SOAP_TYPE_C2__contest23__addAndGetQsos
#define SOAP_TYPE_C2__contest23__addAndGetQsos (-822800446)

#endif

/* _contest23__GetSessionIdResponse has binding name '_contest23__GetSessionIdResponse' for type '' */
#ifndef SOAP_TYPE_C2__contest23__GetSessionIdResponse
#define SOAP_TYPE_C2__contest23__GetSessionIdResponse (-822800445)

#endif

/* _contest23__GetSessionId has binding name '_contest23__GetSessionId' for type '' */
#ifndef SOAP_TYPE_C2__contest23__GetSessionId
#define SOAP_TYPE_C2__contest23__GetSessionId (-822800444)

#endif

/* contest25__RigFrequency has binding name 'contest25__RigFrequency' for type 'contest25:RigFrequency' */
#ifndef SOAP_TYPE_C2_contest25__RigFrequency
#define SOAP_TYPE_C2_contest25__RigFrequency (-822800443)

#endif

/* contest25__ArrayOfRigFrequency has binding name 'contest25__ArrayOfRigFrequency' for type 'contest25:ArrayOfRigFrequency' */
#ifndef SOAP_TYPE_C2_contest25__ArrayOfRigFrequency
#define SOAP_TYPE_C2_contest25__ArrayOfRigFrequency (-822800442)

#endif

/* contest25__QsoIdVersion has binding name 'contest25__QsoIdVersion' for type 'contest25:QsoIdVersion' */
#ifndef SOAP_TYPE_C2_contest25__QsoIdVersion
#define SOAP_TYPE_C2_contest25__QsoIdVersion (-822800441)

#endif

/* contest25__ArrayOfQsoIdVersion has binding name 'contest25__ArrayOfQsoIdVersion' for type 'contest25:ArrayOfQsoIdVersion' */
#ifndef SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion
#define SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion (-822800440)

#endif

/* contest25__LogSummary has binding name 'contest25__LogSummary' for type 'contest25:LogSummary' */
#ifndef SOAP_TYPE_C2_contest25__LogSummary
#define SOAP_TYPE_C2_contest25__LogSummary (-822800439)

#endif

/* contest25__QsoUpdate has binding name 'contest25__QsoUpdate' for type 'contest25:QsoUpdate' */
#ifndef SOAP_TYPE_C2_contest25__QsoUpdate
#define SOAP_TYPE_C2_contest25__QsoUpdate (-822800438)

#endif

/* contest25__Qso has binding name 'contest25__Qso' for type 'contest25:Qso' */
#ifndef SOAP_TYPE_C2_contest25__Qso
#define SOAP_TYPE_C2_contest25__Qso (-822800437)

#endif

/* contest25__ArrayOfQso has binding name 'contest25__ArrayOfQso' for type 'contest25:ArrayOfQso' */
#ifndef SOAP_TYPE_C2_contest25__ArrayOfQso
#define SOAP_TYPE_C2_contest25__ArrayOfQso (-822800436)

#endif

/* contest26__ArrayOfint has binding name 'contest26__ArrayOfint' for type 'contest26:ArrayOfint' */
#ifndef SOAP_TYPE_C2_contest26__ArrayOfint
#define SOAP_TYPE_C2_contest26__ArrayOfint (-822800435)

#endif

/* contest26__ArrayOfstring has binding name 'contest26__ArrayOfstring' for type 'contest26:ArrayOfstring' */
#ifndef SOAP_TYPE_C2_contest26__ArrayOfstring
#define SOAP_TYPE_C2_contest26__ArrayOfstring (-822800434)

#endif

/* xsd__unsignedShort_ has binding name 'xsd__unsignedShort_' for type 'xsd:unsignedShort' */
#ifndef SOAP_TYPE_C2_xsd__unsignedShort_
#define SOAP_TYPE_C2_xsd__unsignedShort_ (-822800432)

#endif

/* xsd__unsignedLong_ has binding name 'xsd__unsignedLong_' for type 'xsd:unsignedLong' */
#ifndef SOAP_TYPE_C2_xsd__unsignedLong_
#define SOAP_TYPE_C2_xsd__unsignedLong_ (-822800430)

#endif

/* xsd__unsignedInt_ has binding name 'xsd__unsignedInt_' for type 'xsd:unsignedInt' */
#ifndef SOAP_TYPE_C2_xsd__unsignedInt_
#define SOAP_TYPE_C2_xsd__unsignedInt_ (-822800429)

#endif

/* xsd__unsignedByte__ has binding name 'xsd__unsignedByte__' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_C2_xsd__unsignedByte__
#define SOAP_TYPE_C2_xsd__unsignedByte__ (-822800428)

#endif

/* xsd__string_ has binding name 'xsd__string_' for type 'xsd:string' */
#ifndef SOAP_TYPE_C2_xsd__string_
#define SOAP_TYPE_C2_xsd__string_ (-822800427)

#endif

/* xsd__short_ has binding name 'xsd__short_' for type 'xsd:short' */
#ifndef SOAP_TYPE_C2_xsd__short_
#define SOAP_TYPE_C2_xsd__short_ (-822800425)

#endif

/* xsd__long_ has binding name 'xsd__long_' for type 'xsd:long' */
#ifndef SOAP_TYPE_C2_xsd__long_
#define SOAP_TYPE_C2_xsd__long_ (-822800423)

#endif

/* xsd__int_ has binding name 'xsd__int_' for type 'xsd:int' */
#ifndef SOAP_TYPE_C2_xsd__int_
#define SOAP_TYPE_C2_xsd__int_ (-822800422)

#endif

/* xsd__float_ has binding name 'xsd__float_' for type 'xsd:float' */
#ifndef SOAP_TYPE_C2_xsd__float_
#define SOAP_TYPE_C2_xsd__float_ (-822800420)

#endif

/* xsd__duration__ has binding name 'xsd__duration__' for type 'xsd:duration' */
#ifndef SOAP_TYPE_C2_xsd__duration__
#define SOAP_TYPE_C2_xsd__duration__ (-822800419)

#endif

/* xsd__duration has binding name 'xsd__duration' for type 'xsd:duration' */
#ifndef SOAP_TYPE_C2_xsd__duration
#define SOAP_TYPE_C2_xsd__duration (-822800418)

#endif

/* xsd__double_ has binding name 'xsd__double_' for type 'xsd:double' */
#ifndef SOAP_TYPE_C2_xsd__double_
#define SOAP_TYPE_C2_xsd__double_ (-822800416)

#endif

/* xsd__decimal__ has binding name 'xsd__decimal__' for type 'xsd:decimal' */
#ifndef SOAP_TYPE_C2_xsd__decimal__
#define SOAP_TYPE_C2_xsd__decimal__ (-822800415)

#endif

/* xsd__decimal has binding name 'xsd__decimal' for type 'xsd:decimal' */
#ifndef SOAP_TYPE_C2_xsd__decimal
#define SOAP_TYPE_C2_xsd__decimal (-822800414)

#endif

/* xsd__dateTime_ has binding name 'xsd__dateTime_' for type 'xsd:dateTime' */
#ifndef SOAP_TYPE_C2_xsd__dateTime_
#define SOAP_TYPE_C2_xsd__dateTime_ (-822800412)

#endif

/* xsd__byte__ has binding name 'xsd__byte__' for type 'xsd:byte' */
#ifndef SOAP_TYPE_C2_xsd__byte__
#define SOAP_TYPE_C2_xsd__byte__ (-822800411)

#endif

/* xsd__boolean_ has binding name 'xsd__boolean_' for type 'xsd:boolean' */
#ifndef SOAP_TYPE_C2_xsd__boolean_
#define SOAP_TYPE_C2_xsd__boolean_ (-822800409)

#endif

/* xsd__base64Binary__ has binding name 'xsd__base64Binary__' for type 'xsd:base64Binary' */
#ifndef SOAP_TYPE_C2_xsd__base64Binary__
#define SOAP_TYPE_C2_xsd__base64Binary__ (-822800408)

#endif

/* xsd__anyURI__ has binding name 'xsd__anyURI__' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_C2_xsd__anyURI__
#define SOAP_TYPE_C2_xsd__anyURI__ (-822800407)

#endif

/* xsd__anyURI has binding name 'xsd__anyURI' for type 'xsd:anyURI' */
#ifndef SOAP_TYPE_C2_xsd__anyURI
#define SOAP_TYPE_C2_xsd__anyURI (-822800406)

#endif

/* xsd__QName__ has binding name 'xsd__QName__' for type 'xsd:QName' */
#ifndef SOAP_TYPE_C2_xsd__QName__
#define SOAP_TYPE_C2_xsd__QName__ (-822800405)

#endif

/* xsd__IDREF__ has binding name 'xsd__IDREF__' for type 'xsd:IDREF' */
#ifndef SOAP_TYPE_C2_xsd__IDREF__
#define SOAP_TYPE_C2_xsd__IDREF__ (-822800404)

#endif

/* xsd__IDREF has binding name 'xsd__IDREF' for type 'xsd:IDREF' */
#ifndef SOAP_TYPE_C2_xsd__IDREF
#define SOAP_TYPE_C2_xsd__IDREF (-822800403)

#endif

/* xsd__ID__ has binding name 'xsd__ID__' for type 'xsd:ID' */
#ifndef SOAP_TYPE_C2_xsd__ID__
#define SOAP_TYPE_C2_xsd__ID__ (-822800402)

#endif

/* xsd__ID has binding name 'xsd__ID' for type 'xsd:ID' */
#ifndef SOAP_TYPE_C2_xsd__ID
#define SOAP_TYPE_C2_xsd__ID (-822800401)

#endif

/* xsd__base64Binary has binding name 'xsd__base64Binary' for type 'xsd:base64Binary' */
#ifndef SOAP_TYPE_C2_xsd__base64Binary
#define SOAP_TYPE_C2_xsd__base64Binary (-822800395)

#endif

/* xsd__QName has binding name 'xsd__QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE_C2_xsd__QName
#define SOAP_TYPE_C2_xsd__QName (-822800394)

#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_C2_std__string
#define SOAP_TYPE_C2_std__string (-822800393)

#endif

/* xsd__anyType has binding name 'xsd__anyType' for type 'xsd:anyType' */
#ifndef SOAP_TYPE_C2_xsd__anyType
#define SOAP_TYPE_C2_xsd__anyType (-822800391)

#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_C2_SOAP_ENV__Fault
#define SOAP_TYPE_C2_SOAP_ENV__Fault (-822800508)

#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_C2_SOAP_ENV__Reason
#define SOAP_TYPE_C2_SOAP_ENV__Reason (-822800507)

#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_C2_SOAP_ENV__Detail
#define SOAP_TYPE_C2_SOAP_ENV__Detail (-822800504)

#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_C2_SOAP_ENV__Code
#define SOAP_TYPE_C2_SOAP_ENV__Code (-822800502)

#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_C2_SOAP_ENV__Header
#define SOAP_TYPE_C2_SOAP_ENV__Header (-822800501)

#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_C2_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_C2_PointerToSOAP_ENV__Reason (-822800510)

#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_C2_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_C2_PointerToSOAP_ENV__Detail (-822800509)

#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_C2_PointerToSOAP_ENV__Code
#define SOAP_TYPE_C2_PointerToSOAP_ENV__Code (-822800503)

#endif

/* _contest23__ExchangeFrequencies * has binding name 'PointerTo_contest23__ExchangeFrequencies' for type '' */
#ifndef SOAP_TYPE_C2_PointerTo_contest23__ExchangeFrequencies
#define SOAP_TYPE_C2_PointerTo_contest23__ExchangeFrequencies (-822800497)

#endif

/* _contest23__ColumnNamesToIndices * has binding name 'PointerTo_contest23__ColumnNamesToIndices' for type '' */
#ifndef SOAP_TYPE_C2_PointerTo_contest23__ColumnNamesToIndices
#define SOAP_TYPE_C2_PointerTo_contest23__ColumnNamesToIndices (-822800493)

#endif

/* _contest23__getQsosByKeyArray * has binding name 'PointerTo_contest23__getQsosByKeyArray' for type '' */
#ifndef SOAP_TYPE_C2_PointerTo_contest23__getQsosByKeyArray
#define SOAP_TYPE_C2_PointerTo_contest23__getQsosByKeyArray (-822800489)

#endif

/* _contest23__AddAndGetLogSummary * has binding name 'PointerTo_contest23__AddAndGetLogSummary' for type '' */
#ifndef SOAP_TYPE_C2_PointerTo_contest23__AddAndGetLogSummary
#define SOAP_TYPE_C2_PointerTo_contest23__AddAndGetLogSummary (-822800485)

#endif

/* _contest23__addAndGetQsos * has binding name 'PointerTo_contest23__addAndGetQsos' for type '' */
#ifndef SOAP_TYPE_C2_PointerTo_contest23__addAndGetQsos
#define SOAP_TYPE_C2_PointerTo_contest23__addAndGetQsos (-822800481)

#endif

/* _contest23__GetSessionId * has binding name 'PointerTo_contest23__GetSessionId' for type '' */
#ifndef SOAP_TYPE_C2_PointerTo_contest23__GetSessionId
#define SOAP_TYPE_C2_PointerTo_contest23__GetSessionId (-822800477)

#endif

/* contest25__ArrayOfRigFrequency * has binding name 'PointerTocontest25__ArrayOfRigFrequency' for type 'contest25:ArrayOfRigFrequency' */
#ifndef SOAP_TYPE_C2_PointerTocontest25__ArrayOfRigFrequency
#define SOAP_TYPE_C2_PointerTocontest25__ArrayOfRigFrequency (-822800476)

#endif

/* contest26__ArrayOfint * has binding name 'PointerTocontest26__ArrayOfint' for type 'contest26:ArrayOfint' */
#ifndef SOAP_TYPE_C2_PointerTocontest26__ArrayOfint
#define SOAP_TYPE_C2_PointerTocontest26__ArrayOfint (-822800475)

#endif

/* contest25__LogSummary * has binding name 'PointerTocontest25__LogSummary' for type 'contest25:LogSummary' */
#ifndef SOAP_TYPE_C2_PointerTocontest25__LogSummary
#define SOAP_TYPE_C2_PointerTocontest25__LogSummary (-822800474)

#endif

/* contest25__QsoUpdate * has binding name 'PointerTocontest25__QsoUpdate' for type 'contest25:QsoUpdate' */
#ifndef SOAP_TYPE_C2_PointerTocontest25__QsoUpdate
#define SOAP_TYPE_C2_PointerTocontest25__QsoUpdate (-822800473)

#endif

/* contest25__RigFrequency * has binding name 'PointerTocontest25__RigFrequency' for type 'contest25:RigFrequency' */
#ifndef SOAP_TYPE_C2_PointerTocontest25__RigFrequency
#define SOAP_TYPE_C2_PointerTocontest25__RigFrequency (-822800471)

#endif

/* contest25__QsoIdVersion * has binding name 'PointerTocontest25__QsoIdVersion' for type 'contest25:QsoIdVersion' */
#ifndef SOAP_TYPE_C2_PointerTocontest25__QsoIdVersion
#define SOAP_TYPE_C2_PointerTocontest25__QsoIdVersion (-822800469)

#endif

/* contest25__ArrayOfQsoIdVersion * has binding name 'PointerTocontest25__ArrayOfQsoIdVersion' for type 'contest25:ArrayOfQsoIdVersion' */
#ifndef SOAP_TYPE_C2_PointerTocontest25__ArrayOfQsoIdVersion
#define SOAP_TYPE_C2_PointerTocontest25__ArrayOfQsoIdVersion (-822800468)

#endif

/* contest25__ArrayOfQso * has binding name 'PointerTocontest25__ArrayOfQso' for type 'contest25:ArrayOfQso' */
#ifndef SOAP_TYPE_C2_PointerTocontest25__ArrayOfQso
#define SOAP_TYPE_C2_PointerTocontest25__ArrayOfQso (-822800467)

#endif

/* contest26__ArrayOfstring * has binding name 'PointerTocontest26__ArrayOfstring' for type 'contest26:ArrayOfstring' */
#ifndef SOAP_TYPE_C2_PointerTocontest26__ArrayOfstring
#define SOAP_TYPE_C2_PointerTocontest26__ArrayOfstring (-822800466)

#endif

/* contest25__Qso * has binding name 'PointerTocontest25__Qso' for type 'contest25:Qso' */
#ifndef SOAP_TYPE_C2_PointerTocontest25__Qso
#define SOAP_TYPE_C2_PointerTocontest25__Qso (-822800464)

#endif

/* unsigned char * has binding name 'PointerTounsignedByte' for type 'xsd:unsignedByte' */
#ifndef SOAP_TYPE_C2_PointerTounsignedByte
#define SOAP_TYPE_C2_PointerTounsignedByte (-822800398)

#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE_C2__QName
#define SOAP_TYPE_C2__QName (-822800389)

#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE_C2__XML
#define SOAP_TYPE_C2__XML (-822800388)

#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_C2_string
#define SOAP_TYPE_C2_string (-822800387)

#endif

/* std::vector<contest25__RigFrequency *>  has binding name 'std__vectorTemplateOfPointerTocontest25__RigFrequency' for type 'contest25:RigFrequency' */
#ifndef SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__RigFrequency
#define SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__RigFrequency (-822800472)

#endif

/* std::vector<contest25__QsoIdVersion *>  has binding name 'std__vectorTemplateOfPointerTocontest25__QsoIdVersion' for type 'contest25:QsoIdVersion' */
#ifndef SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__QsoIdVersion
#define SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__QsoIdVersion (-822800470)

#endif

/* std::vector<contest25__Qso *>  has binding name 'std__vectorTemplateOfPointerTocontest25__Qso' for type 'contest25:Qso' */
#ifndef SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__Qso
#define SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__Qso (-822800465)

#endif

/* std::vector<int>  has binding name 'std__vectorTemplateOfint' for type 'xsd:int' */
#ifndef SOAP_TYPE_C2_std__vectorTemplateOfint
#define SOAP_TYPE_C2_std__vectorTemplateOfint (-822800463)

#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfstd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_C2_std__vectorTemplateOfstd__string
#define SOAP_TYPE_C2_std__vectorTemplateOfstd__string (-822800462)

#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/

    /** Web service operation '__contest23__GetSessionId' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __contest23__GetSessionId(struct soap*, _contest23__GetSessionId *contest23__GetSessionId, _contest23__GetSessionIdResponse &contest23__GetSessionIdResponse);
    /** Web service operation '__contest23__addAndGetQsos' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __contest23__addAndGetQsos(struct soap*, _contest23__addAndGetQsos *contest23__addAndGetQsos, _contest23__addAndGetQsosResponse &contest23__addAndGetQsosResponse);
    /** Web service operation '__contest23__AddAndGetLogSummary' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __contest23__AddAndGetLogSummary(struct soap*, _contest23__AddAndGetLogSummary *contest23__AddAndGetLogSummary, _contest23__AddAndGetLogSummaryResponse &contest23__AddAndGetLogSummaryResponse);
    /** Web service operation '__contest23__getQsosByKeyArray' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __contest23__getQsosByKeyArray(struct soap*, _contest23__getQsosByKeyArray *contest23__getQsosByKeyArray, _contest23__getQsosByKeyArrayResponse &contest23__getQsosByKeyArrayResponse);
    /** Web service operation '__contest23__ColumnNamesToIndices' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __contest23__ColumnNamesToIndices(struct soap*, _contest23__ColumnNamesToIndices *contest23__ColumnNamesToIndices, _contest23__ColumnNamesToIndicesResponse &contest23__ColumnNamesToIndicesResponse);
    /** Web service operation '__contest23__ExchangeFrequencies' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 __contest23__ExchangeFrequencies(struct soap*, _contest23__ExchangeFrequencies *contest23__ExchangeFrequencies, _contest23__ExchangeFrequenciesResponse &contest23__ExchangeFrequenciesResponse);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 C2_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 C2_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___contest23__GetSessionId(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___contest23__addAndGetQsos(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___contest23__AddAndGetLogSummary(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___contest23__getQsosByKeyArray(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___contest23__ColumnNamesToIndices(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___contest23__ExchangeFrequencies(struct soap*);

} // namespace C2


#endif

/* End of C2Stub.h */
