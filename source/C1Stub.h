/* C1Stub.h
   Generated by gSOAP 2.8.112 for ContestQsos.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include <vector>
#define SOAP_NAMESPACE_OF_contest2	"urn:xml-soap-Contest"

#ifndef C1Stub_H
#define C1Stub_H
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"
#if GSOAP_VERSION != 208112
# error "GSOAP VERSION 208112 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


namespace C1 {

/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes, Structs and Unions                                                *
 *                                                                            *
\******************************************************************************/

class contest2__ArrayOfstring;	/* ContestQsos.h:159 */
class contest2__ArrayOfint;	/* ContestQsos.h:161 */
class contest2__Qso;	/* ContestQsos.h:163 */
class contest2__ArrayOfQso;	/* ContestQsos.h:165 */
class contest2__QsoUpdate;	/* ContestQsos.h:167 */
class contest2__QsoIdVersion;	/* ContestQsos.h:169 */
class contest2__ArrayOfQsoIdVersion;	/* ContestQsos.h:171 */
class contest2__LogSummary;	/* ContestQsos.h:173 */
class contest2__RigFrequency;	/* ContestQsos.h:175 */
class contest2__ArrayOfRigFrequency;	/* ContestQsos.h:177 */
struct contest1__GetSessionIdResponse;	/* ContestQsos.h:596 */
struct contest1__GetSessionId;	/* ContestQsos.h:596 */
struct contest1__AddAndGetLogSummaryResponse;	/* ContestQsos.h:607 */
struct contest1__AddAndGetLogSummary;	/* ContestQsos.h:677 */
struct contest1__addAndGetQsosResponse;	/* ContestQsos.h:688 */
struct contest1__addAndGetQsos;	/* ContestQsos.h:758 */
struct contest1__getQsosByKeyArrayResponse;	/* ContestQsos.h:769 */
struct contest1__getQsosByKeyArray;	/* ContestQsos.h:833 */
struct contest1__ColumnNamesToIndicesResponse;	/* ContestQsos.h:844 */
struct contest1__ColumnNamesToIndices;	/* ContestQsos.h:908 */
struct contest1__ExchangeFrequenciesResponse;	/* ContestQsos.h:919 */
struct contest1__ExchangeFrequencies;	/* ContestQsos.h:980 */

/* ContestQsos.h:159 */
#ifndef SOAP_TYPE_C1_contest2__ArrayOfstring
#define SOAP_TYPE_C1_contest2__ArrayOfstring (-822796295)
/* complex XML schema type 'contest2:ArrayOfstring': */
class SOAP_CMAC contest2__ArrayOfstring {
      public:
        /// Optional element 'str_el' of XML schema type 'xsd:string'
        std::vector<std::string> str_USCOREel;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C1_contest2__ArrayOfstring
        virtual long soap_type(void) const { return SOAP_TYPE_C1_contest2__ArrayOfstring; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest2__ArrayOfstring, default initialized and not managed by a soap context
        virtual contest2__ArrayOfstring *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest2__ArrayOfstring); }
      public:
        /// Constructor with default initializations
        contest2__ArrayOfstring() : str_USCOREel(), soap() { }
        virtual ~contest2__ArrayOfstring() { }
        /// Friend allocator used by soap_new_contest2__ArrayOfstring(struct soap*, int)
        friend SOAP_FMAC1 contest2__ArrayOfstring * SOAP_FMAC2 soap_instantiate_contest2__ArrayOfstring(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos.h:161 */
#ifndef SOAP_TYPE_C1_contest2__ArrayOfint
#define SOAP_TYPE_C1_contest2__ArrayOfint (-822796296)
/* complex XML schema type 'contest2:ArrayOfint': */
class SOAP_CMAC contest2__ArrayOfint {
      public:
        /// Optional element 'int_el' of XML schema type 'xsd:int'
        std::vector<int> int_USCOREel;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C1_contest2__ArrayOfint
        virtual long soap_type(void) const { return SOAP_TYPE_C1_contest2__ArrayOfint; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest2__ArrayOfint, default initialized and not managed by a soap context
        virtual contest2__ArrayOfint *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest2__ArrayOfint); }
      public:
        /// Constructor with default initializations
        contest2__ArrayOfint() : int_USCOREel(), soap() { }
        virtual ~contest2__ArrayOfint() { }
        /// Friend allocator used by soap_new_contest2__ArrayOfint(struct soap*, int)
        friend SOAP_FMAC1 contest2__ArrayOfint * SOAP_FMAC2 soap_instantiate_contest2__ArrayOfint(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos.h:163 */
#ifndef SOAP_TYPE_C1_contest2__Qso
#define SOAP_TYPE_C1_contest2__Qso (-822796297)
/* complex XML schema type 'contest2:Qso': */
class SOAP_CMAC contest2__Qso {
      public:
        /// Required element 'time64H' of XML schema type 'xsd:int'
        int time64H;
        /// Required element 'time64L' of XML schema type 'xsd:int'
        int time64L;
        /// Required element 'xmitFreq' of XML schema type 'xsd:double'
        double xmitFreq;
        /// Required element 'recvFreq' of XML schema type 'xsd:double'
        double recvFreq;
        /// Required element 'band' of XML schema type 'xsd:int'
        int band;
        /// Required element 'station' of XML schema type 'xsd:string'
        std::string station;
        /// Required element 'mode' of XML schema type 'xsd:int'
        int mode;
        /// Required element 'dupe' of XML schema type 'xsd:int'
        int dupe;
        /// Required element 'serial' of XML schema type 'xsd:int'
        int serial;
        /// Required element 'qsoparts' of XML schema type 'contest2:ArrayOfstring'
        contest2__ArrayOfstring *qsoparts;
        /// Required element 'version' of XML schema type 'xsd:int'
        int version;
        /// Required element 'idKey' of XML schema type 'xsd:string'
        std::string idKey;
        /// Required element 'updatedBy' of XML schema type 'xsd:string'
        std::string updatedBy;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C1_contest2__Qso
        virtual long soap_type(void) const { return SOAP_TYPE_C1_contest2__Qso; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest2__Qso, default initialized and not managed by a soap context
        virtual contest2__Qso *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest2__Qso); }
      public:
        /// Constructor with default initializations
        contest2__Qso() : time64H(), time64L(), xmitFreq(), recvFreq(), band(), station(), mode(), dupe(), serial(), qsoparts(), version(), idKey(), updatedBy(), soap() { }
        virtual ~contest2__Qso() { }
        /// Friend allocator used by soap_new_contest2__Qso(struct soap*, int)
        friend SOAP_FMAC1 contest2__Qso * SOAP_FMAC2 soap_instantiate_contest2__Qso(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos.h:165 */
#ifndef SOAP_TYPE_C1_contest2__ArrayOfQso
#define SOAP_TYPE_C1_contest2__ArrayOfQso (-822796298)
/* complex XML schema type 'contest2:ArrayOfQso': */
class SOAP_CMAC contest2__ArrayOfQso {
      public:
        /// Optional element 'qso_el' of XML schema type 'contest2:Qso'
        std::vector<contest2__Qso *> qso_USCOREel;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C1_contest2__ArrayOfQso
        virtual long soap_type(void) const { return SOAP_TYPE_C1_contest2__ArrayOfQso; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest2__ArrayOfQso, default initialized and not managed by a soap context
        virtual contest2__ArrayOfQso *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest2__ArrayOfQso); }
      public:
        /// Constructor with default initializations
        contest2__ArrayOfQso() : qso_USCOREel(), soap() { }
        virtual ~contest2__ArrayOfQso() { }
        /// Friend allocator used by soap_new_contest2__ArrayOfQso(struct soap*, int)
        friend SOAP_FMAC1 contest2__ArrayOfQso * SOAP_FMAC2 soap_instantiate_contest2__ArrayOfQso(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos.h:167 */
#ifndef SOAP_TYPE_C1_contest2__QsoUpdate
#define SOAP_TYPE_C1_contest2__QsoUpdate (-822796299)
/* complex XML schema type 'contest2:QsoUpdate': */
class SOAP_CMAC contest2__QsoUpdate {
      public:
        /// Required element 'qsoArray' of XML schema type 'contest2:ArrayOfQso'
        contest2__ArrayOfQso *qsoArray;
        /// Required element 'logState' of XML schema type 'xsd:int'
        int logState;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C1_contest2__QsoUpdate
        virtual long soap_type(void) const { return SOAP_TYPE_C1_contest2__QsoUpdate; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest2__QsoUpdate, default initialized and not managed by a soap context
        virtual contest2__QsoUpdate *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest2__QsoUpdate); }
      public:
        /// Constructor with default initializations
        contest2__QsoUpdate() : qsoArray(), logState(), soap() { }
        virtual ~contest2__QsoUpdate() { }
        /// Friend allocator used by soap_new_contest2__QsoUpdate(struct soap*, int)
        friend SOAP_FMAC1 contest2__QsoUpdate * SOAP_FMAC2 soap_instantiate_contest2__QsoUpdate(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos.h:169 */
#ifndef SOAP_TYPE_C1_contest2__QsoIdVersion
#define SOAP_TYPE_C1_contest2__QsoIdVersion (-822796300)
/* complex XML schema type 'contest2:QsoIdVersion': */
class SOAP_CMAC contest2__QsoIdVersion {
      public:
        /// Required element 'version' of XML schema type 'xsd:int'
        int version;
        /// Required element 'updatedBy' of XML schema type 'xsd:string'
        std::string updatedBy;
        /// Required element 'id' of XML schema type 'xsd:string'
        std::string id;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C1_contest2__QsoIdVersion
        virtual long soap_type(void) const { return SOAP_TYPE_C1_contest2__QsoIdVersion; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest2__QsoIdVersion, default initialized and not managed by a soap context
        virtual contest2__QsoIdVersion *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest2__QsoIdVersion); }
      public:
        /// Constructor with default initializations
        contest2__QsoIdVersion() : version(), updatedBy(), id(), soap() { }
        virtual ~contest2__QsoIdVersion() { }
        /// Friend allocator used by soap_new_contest2__QsoIdVersion(struct soap*, int)
        friend SOAP_FMAC1 contest2__QsoIdVersion * SOAP_FMAC2 soap_instantiate_contest2__QsoIdVersion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos.h:171 */
#ifndef SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion
#define SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion (-822796301)
/* complex XML schema type 'contest2:ArrayOfQsoIdVersion': */
class SOAP_CMAC contest2__ArrayOfQsoIdVersion {
      public:
        /// Optional element 'id_el' of XML schema type 'contest2:QsoIdVersion'
        std::vector<contest2__QsoIdVersion *> id_USCOREel;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion
        virtual long soap_type(void) const { return SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest2__ArrayOfQsoIdVersion, default initialized and not managed by a soap context
        virtual contest2__ArrayOfQsoIdVersion *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest2__ArrayOfQsoIdVersion); }
      public:
        /// Constructor with default initializations
        contest2__ArrayOfQsoIdVersion() : id_USCOREel(), soap() { }
        virtual ~contest2__ArrayOfQsoIdVersion() { }
        /// Friend allocator used by soap_new_contest2__ArrayOfQsoIdVersion(struct soap*, int)
        friend SOAP_FMAC1 contest2__ArrayOfQsoIdVersion * SOAP_FMAC2 soap_instantiate_contest2__ArrayOfQsoIdVersion(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos.h:173 */
#ifndef SOAP_TYPE_C1_contest2__LogSummary
#define SOAP_TYPE_C1_contest2__LogSummary (-822796302)
/* complex XML schema type 'contest2:LogSummary': */
class SOAP_CMAC contest2__LogSummary {
      public:
        /// Required element 'logState' of XML schema type 'xsd:int'
        int logState;
        /// Required element 'logSummaryIds' of XML schema type 'contest2:ArrayOfQsoIdVersion'
        contest2__ArrayOfQsoIdVersion *logSummaryIds;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C1_contest2__LogSummary
        virtual long soap_type(void) const { return SOAP_TYPE_C1_contest2__LogSummary; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest2__LogSummary, default initialized and not managed by a soap context
        virtual contest2__LogSummary *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest2__LogSummary); }
      public:
        /// Constructor with default initializations
        contest2__LogSummary() : logState(), logSummaryIds(), soap() { }
        virtual ~contest2__LogSummary() { }
        /// Friend allocator used by soap_new_contest2__LogSummary(struct soap*, int)
        friend SOAP_FMAC1 contest2__LogSummary * SOAP_FMAC2 soap_instantiate_contest2__LogSummary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos.h:175 */
#ifndef SOAP_TYPE_C1_contest2__RigFrequency
#define SOAP_TYPE_C1_contest2__RigFrequency (-822796303)
/* complex XML schema type 'contest2:RigFrequency': */
class SOAP_CMAC contest2__RigFrequency {
      public:
        /// Required element 'station' of XML schema type 'xsd:string'
        std::string station;
        /// Required element 'networkLetter' of XML schema type 'xsd:int'
        int networkLetter;
        /// Required element 'label' of XML schema type 'xsd:string'
        std::string label;
        /// Required element 'rigNumber' of XML schema type 'xsd:int'
        int rigNumber;
        /// Required element 'xmitFreq' of XML schema type 'xsd:double'
        double xmitFreq;
        /// Required element 'recvFreq' of XML schema type 'xsd:double'
        double recvFreq;
        /// Required element 'mode' of XML schema type 'xsd:int'
        int mode;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C1_contest2__RigFrequency
        virtual long soap_type(void) const { return SOAP_TYPE_C1_contest2__RigFrequency; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest2__RigFrequency, default initialized and not managed by a soap context
        virtual contest2__RigFrequency *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest2__RigFrequency); }
      public:
        /// Constructor with default initializations
        contest2__RigFrequency() : station(), networkLetter(), label(), rigNumber(), xmitFreq(), recvFreq(), mode(), soap() { }
        virtual ~contest2__RigFrequency() { }
        /// Friend allocator used by soap_new_contest2__RigFrequency(struct soap*, int)
        friend SOAP_FMAC1 contest2__RigFrequency * SOAP_FMAC2 soap_instantiate_contest2__RigFrequency(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos.h:177 */
#ifndef SOAP_TYPE_C1_contest2__ArrayOfRigFrequency
#define SOAP_TYPE_C1_contest2__ArrayOfRigFrequency (-822796304)
/* complex XML schema type 'contest2:ArrayOfRigFrequency': */
class SOAP_CMAC contest2__ArrayOfRigFrequency {
      public:
        /// Optional element 'rf_el' of XML schema type 'contest2:RigFrequency'
        std::vector<contest2__RigFrequency *> rf_USCOREel;
        /// Context that manages this object
        struct soap *soap;
      public:
        /// Return unique type id SOAP_TYPE_C1_contest2__ArrayOfRigFrequency
        virtual long soap_type(void) const { return SOAP_TYPE_C1_contest2__ArrayOfRigFrequency; }
        /// (Re)set members to default values
        virtual void soap_default(struct soap*);
        /// Serialize object to prepare for SOAP 1.1/1.2 encoded output (or with SOAP_XML_GRAPH) by analyzing its (cyclic) structures
        virtual void soap_serialize(struct soap*) const;
        /// Output object in XML, compliant with SOAP 1.1 encoding style, return error code or SOAP_OK
        virtual int soap_put(struct soap*, const char *tag, const char *type) const;
        /// Output object in XML, with tag and optional id attribute and xsi:type, return error code or SOAP_OK
        virtual int soap_out(struct soap*, const char *tag, int id, const char *type) const;
        /// Get object from XML, compliant with SOAP 1.1 encoding style, return pointer to object or NULL on error
        virtual void *soap_get(struct soap*, const char *tag, const char *type);
        /// Get object from XML, with matching tag and type (NULL matches any tag and type), return pointer to object or NULL on error
        virtual void *soap_in(struct soap*, const char *tag, const char *type);
        /// Return a new object of type contest2__ArrayOfRigFrequency, default initialized and not managed by a soap context
        virtual contest2__ArrayOfRigFrequency *soap_alloc(void) const { return SOAP_NEW_UNMANAGED(contest2__ArrayOfRigFrequency); }
      public:
        /// Constructor with default initializations
        contest2__ArrayOfRigFrequency() : rf_USCOREel(), soap() { }
        virtual ~contest2__ArrayOfRigFrequency() { }
        /// Friend allocator used by soap_new_contest2__ArrayOfRigFrequency(struct soap*, int)
        friend SOAP_FMAC1 contest2__ArrayOfRigFrequency * SOAP_FMAC2 soap_instantiate_contest2__ArrayOfRigFrequency(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos.h:596 */
#ifndef SOAP_TYPE_C1_contest1__GetSessionIdResponse
#define SOAP_TYPE_C1_contest1__GetSessionIdResponse (-822796321)
/* complex XML schema type 'contest1:GetSessionIdResponse': */
struct SOAP_CMAC contest1__GetSessionIdResponse {
      public:
        /** Required element 'response' of XML schema type 'xsd:string' */
        std::string response;
      public:
        /** Return unique type id SOAP_TYPE_C1_contest1__GetSessionIdResponse */
        long soap_type() const { return SOAP_TYPE_C1_contest1__GetSessionIdResponse; }
        /** Constructor with member initializations */
        contest1__GetSessionIdResponse() : response() { }
        /** Friend allocator */
        friend SOAP_FMAC1 contest1__GetSessionIdResponse * SOAP_FMAC2 soap_instantiate_contest1__GetSessionIdResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos.h:596 */
#ifndef SOAP_TYPE_C1_contest1__GetSessionId
#define SOAP_TYPE_C1_contest1__GetSessionId (-822796322)
/* complex XML schema type 'contest1:GetSessionId': */
struct SOAP_CMAC contest1__GetSessionId {
      public:
        /** Return unique type id SOAP_TYPE_C1_contest1__GetSessionId */
        long soap_type() const { return SOAP_TYPE_C1_contest1__GetSessionId; }
        /** Constructor with member initializations */
        contest1__GetSessionId() { }
        /** Friend allocator */
        friend SOAP_FMAC1 contest1__GetSessionId * SOAP_FMAC2 soap_instantiate_contest1__GetSessionId(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos.h:607 */
#ifndef SOAP_TYPE_C1_contest1__AddAndGetLogSummaryResponse
#define SOAP_TYPE_C1_contest1__AddAndGetLogSummaryResponse (-822796323)
/* complex XML schema type 'contest1:AddAndGetLogSummaryResponse': */
struct SOAP_CMAC contest1__AddAndGetLogSummaryResponse {
      public:
        /** Optional element 'response' of XML schema type 'contest2:LogSummary' */
        contest2__LogSummary *_response;
      public:
        /** Return unique type id SOAP_TYPE_C1_contest1__AddAndGetLogSummaryResponse */
        long soap_type() const { return SOAP_TYPE_C1_contest1__AddAndGetLogSummaryResponse; }
        /** Constructor with member initializations */
        contest1__AddAndGetLogSummaryResponse() : _response() { }
        /** Friend allocator */
        friend SOAP_FMAC1 contest1__AddAndGetLogSummaryResponse * SOAP_FMAC2 soap_instantiate_contest1__AddAndGetLogSummaryResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos.h:677 */
#ifndef SOAP_TYPE_C1_contest1__AddAndGetLogSummary
#define SOAP_TYPE_C1_contest1__AddAndGetLogSummary (-822796327)
/* complex XML schema type 'contest1:AddAndGetLogSummary': */
struct SOAP_CMAC contest1__AddAndGetLogSummary {
      public:
        /** Required element 'SessionId' of XML schema type 'xsd:string' */
        std::string _SessionId;
        /** Optional element 'QsoAddArray' of XML schema type 'contest2:ArrayOfQso' */
        contest2__ArrayOfQso *_QsoAddArray;
        /** Required element 'OldState' of XML schema type 'xsd:int' */
        int _OldState;
        /** Required element 'MaxRequested' of XML schema type 'xsd:int' */
        int _MaxRequested;
      public:
        /** Return unique type id SOAP_TYPE_C1_contest1__AddAndGetLogSummary */
        long soap_type() const { return SOAP_TYPE_C1_contest1__AddAndGetLogSummary; }
        /** Constructor with member initializations */
        contest1__AddAndGetLogSummary() : _SessionId(), _QsoAddArray(), _OldState(), _MaxRequested() { }
        /** Friend allocator */
        friend SOAP_FMAC1 contest1__AddAndGetLogSummary * SOAP_FMAC2 soap_instantiate_contest1__AddAndGetLogSummary(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos.h:688 */
#ifndef SOAP_TYPE_C1_contest1__addAndGetQsosResponse
#define SOAP_TYPE_C1_contest1__addAndGetQsosResponse (-822796328)
/* complex XML schema type 'contest1:addAndGetQsosResponse': */
struct SOAP_CMAC contest1__addAndGetQsosResponse {
      public:
        /** Optional element 'response' of XML schema type 'contest2:QsoUpdate' */
        contest2__QsoUpdate *_response;
      public:
        /** Return unique type id SOAP_TYPE_C1_contest1__addAndGetQsosResponse */
        long soap_type() const { return SOAP_TYPE_C1_contest1__addAndGetQsosResponse; }
        /** Constructor with member initializations */
        contest1__addAndGetQsosResponse() : _response() { }
        /** Friend allocator */
        friend SOAP_FMAC1 contest1__addAndGetQsosResponse * SOAP_FMAC2 soap_instantiate_contest1__addAndGetQsosResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos.h:758 */
#ifndef SOAP_TYPE_C1_contest1__addAndGetQsos
#define SOAP_TYPE_C1_contest1__addAndGetQsos (-822796332)
/* complex XML schema type 'contest1:addAndGetQsos': */
struct SOAP_CMAC contest1__addAndGetQsos {
      public:
        /** Required element 'SessionId' of XML schema type 'xsd:string' */
        std::string _SessionId;
        /** Optional element 'QsoAddArray' of XML schema type 'contest2:ArrayOfQso' */
        contest2__ArrayOfQso *_QsoAddArray;
        /** Required element 'OldState' of XML schema type 'xsd:int' */
        int _OldState;
        /** Required element 'MaxRequested' of XML schema type 'xsd:int' */
        int _MaxRequested;
      public:
        /** Return unique type id SOAP_TYPE_C1_contest1__addAndGetQsos */
        long soap_type() const { return SOAP_TYPE_C1_contest1__addAndGetQsos; }
        /** Constructor with member initializations */
        contest1__addAndGetQsos() : _SessionId(), _QsoAddArray(), _OldState(), _MaxRequested() { }
        /** Friend allocator */
        friend SOAP_FMAC1 contest1__addAndGetQsos * SOAP_FMAC2 soap_instantiate_contest1__addAndGetQsos(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos.h:769 */
#ifndef SOAP_TYPE_C1_contest1__getQsosByKeyArrayResponse
#define SOAP_TYPE_C1_contest1__getQsosByKeyArrayResponse (-822796333)
/* complex XML schema type 'contest1:getQsosByKeyArrayResponse': */
struct SOAP_CMAC contest1__getQsosByKeyArrayResponse {
      public:
        /** Optional element 'response' of XML schema type 'contest2:QsoUpdate' */
        contest2__QsoUpdate *_response;
      public:
        /** Return unique type id SOAP_TYPE_C1_contest1__getQsosByKeyArrayResponse */
        long soap_type() const { return SOAP_TYPE_C1_contest1__getQsosByKeyArrayResponse; }
        /** Constructor with member initializations */
        contest1__getQsosByKeyArrayResponse() : _response() { }
        /** Friend allocator */
        friend SOAP_FMAC1 contest1__getQsosByKeyArrayResponse * SOAP_FMAC2 soap_instantiate_contest1__getQsosByKeyArrayResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos.h:833 */
#ifndef SOAP_TYPE_C1_contest1__getQsosByKeyArray
#define SOAP_TYPE_C1_contest1__getQsosByKeyArray (-822796336)
/* complex XML schema type 'contest1:getQsosByKeyArray': */
struct SOAP_CMAC contest1__getQsosByKeyArray {
      public:
        /** Required element 'SessionId' of XML schema type 'xsd:string' */
        std::string _SessionId;
        /** Optional element 'QsoKeyArray' of XML schema type 'contest2:ArrayOfstring' */
        contest2__ArrayOfstring *_QsoKeyArray;
      public:
        /** Return unique type id SOAP_TYPE_C1_contest1__getQsosByKeyArray */
        long soap_type() const { return SOAP_TYPE_C1_contest1__getQsosByKeyArray; }
        /** Constructor with member initializations */
        contest1__getQsosByKeyArray() : _SessionId(), _QsoKeyArray() { }
        /** Friend allocator */
        friend SOAP_FMAC1 contest1__getQsosByKeyArray * SOAP_FMAC2 soap_instantiate_contest1__getQsosByKeyArray(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos.h:844 */
#ifndef SOAP_TYPE_C1_contest1__ColumnNamesToIndicesResponse
#define SOAP_TYPE_C1_contest1__ColumnNamesToIndicesResponse (-822796337)
/* complex XML schema type 'contest1:ColumnNamesToIndicesResponse': */
struct SOAP_CMAC contest1__ColumnNamesToIndicesResponse {
      public:
        /** Optional element 'response' of XML schema type 'contest2:ArrayOfint' */
        contest2__ArrayOfint *_response;
      public:
        /** Return unique type id SOAP_TYPE_C1_contest1__ColumnNamesToIndicesResponse */
        long soap_type() const { return SOAP_TYPE_C1_contest1__ColumnNamesToIndicesResponse; }
        /** Constructor with member initializations */
        contest1__ColumnNamesToIndicesResponse() : _response() { }
        /** Friend allocator */
        friend SOAP_FMAC1 contest1__ColumnNamesToIndicesResponse * SOAP_FMAC2 soap_instantiate_contest1__ColumnNamesToIndicesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos.h:908 */
#ifndef SOAP_TYPE_C1_contest1__ColumnNamesToIndices
#define SOAP_TYPE_C1_contest1__ColumnNamesToIndices (-822796341)
/* complex XML schema type 'contest1:ColumnNamesToIndices': */
struct SOAP_CMAC contest1__ColumnNamesToIndices {
      public:
        /** Required element 'SessionId' of XML schema type 'xsd:string' */
        std::string _SessionId;
        /** Optional element 'ColumnNames' of XML schema type 'contest2:ArrayOfstring' */
        contest2__ArrayOfstring *_ColumnNames;
      public:
        /** Return unique type id SOAP_TYPE_C1_contest1__ColumnNamesToIndices */
        long soap_type() const { return SOAP_TYPE_C1_contest1__ColumnNamesToIndices; }
        /** Constructor with member initializations */
        contest1__ColumnNamesToIndices() : _SessionId(), _ColumnNames() { }
        /** Friend allocator */
        friend SOAP_FMAC1 contest1__ColumnNamesToIndices * SOAP_FMAC2 soap_instantiate_contest1__ColumnNamesToIndices(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos.h:919 */
#ifndef SOAP_TYPE_C1_contest1__ExchangeFrequenciesResponse
#define SOAP_TYPE_C1_contest1__ExchangeFrequenciesResponse (-822796342)
/* complex XML schema type 'contest1:ExchangeFrequenciesResponse': */
struct SOAP_CMAC contest1__ExchangeFrequenciesResponse {
      public:
        /** Optional element 'response' of XML schema type 'contest2:ArrayOfRigFrequency' */
        contest2__ArrayOfRigFrequency *_response;
      public:
        /** Return unique type id SOAP_TYPE_C1_contest1__ExchangeFrequenciesResponse */
        long soap_type() const { return SOAP_TYPE_C1_contest1__ExchangeFrequenciesResponse; }
        /** Constructor with member initializations */
        contest1__ExchangeFrequenciesResponse() : _response() { }
        /** Friend allocator */
        friend SOAP_FMAC1 contest1__ExchangeFrequenciesResponse * SOAP_FMAC2 soap_instantiate_contest1__ExchangeFrequenciesResponse(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos.h:980 */
#ifndef SOAP_TYPE_C1_contest1__ExchangeFrequencies
#define SOAP_TYPE_C1_contest1__ExchangeFrequencies (-822796346)
/* complex XML schema type 'contest1:ExchangeFrequencies': */
struct SOAP_CMAC contest1__ExchangeFrequencies {
      public:
        /** Optional element 'IncomingFreqs' of XML schema type 'contest2:ArrayOfRigFrequency' */
        contest2__ArrayOfRigFrequency *_IncomingFreqs;
      public:
        /** Return unique type id SOAP_TYPE_C1_contest1__ExchangeFrequencies */
        long soap_type() const { return SOAP_TYPE_C1_contest1__ExchangeFrequencies; }
        /** Constructor with member initializations */
        contest1__ExchangeFrequencies() : _IncomingFreqs() { }
        /** Friend allocator */
        friend SOAP_FMAC1 contest1__ExchangeFrequencies * SOAP_FMAC2 soap_instantiate_contest1__ExchangeFrequencies(struct soap*, int, const char*, const char*, size_t*);
};
#endif

/* ContestQsos.h:1041 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_C1_SOAP_ENV__Header
#define SOAP_TYPE_C1_SOAP_ENV__Header (-822796347)
/* SOAP_ENV__Header: */
struct SOAP_CMAC SOAP_ENV__Header {
      public:
        /** Return unique type id SOAP_TYPE_C1_SOAP_ENV__Header */
        long soap_type() const { return SOAP_TYPE_C1_SOAP_ENV__Header; }
        /** Constructor with member initializations */
        SOAP_ENV__Header() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ContestQsos.h:1041 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_C1_SOAP_ENV__Code
#define SOAP_TYPE_C1_SOAP_ENV__Code (-822796348)
/* Type SOAP_ENV__Code is a recursive data type, (in)directly referencing itself through its (base or derived class) members */
/* SOAP_ENV__Code: */
struct SOAP_CMAC SOAP_ENV__Code {
      public:
        /** Optional element 'SOAP-ENV:Value' of XML schema type 'xsd:QName' */
        char *SOAP_ENV__Value;
        /** Optional element 'SOAP-ENV:Subcode' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Subcode;
      public:
        /** Return unique type id SOAP_TYPE_C1_SOAP_ENV__Code */
        long soap_type() const { return SOAP_TYPE_C1_SOAP_ENV__Code; }
        /** Constructor with member initializations */
        SOAP_ENV__Code() : SOAP_ENV__Value(), SOAP_ENV__Subcode() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ContestQsos.h:1041 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_C1_SOAP_ENV__Detail
#define SOAP_TYPE_C1_SOAP_ENV__Detail (-822796350)
/* SOAP_ENV__Detail: */
struct SOAP_CMAC SOAP_ENV__Detail {
      public:
        char *__any;
        /** Any type of element 'fault' assigned to fault with its SOAP_TYPE_<typename> assigned to __type */
        /** Do not create a cyclic data structure through this member unless SOAP encoding or SOAP_XML_GRAPH are used for id-ref serialization */
        int __type;
        void *fault;
      public:
        /** Return unique type id SOAP_TYPE_C1_SOAP_ENV__Detail */
        long soap_type() const { return SOAP_TYPE_C1_SOAP_ENV__Detail; }
        /** Constructor with member initializations */
        SOAP_ENV__Detail() : __any(), __type(), fault() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ContestQsos.h:1041 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_C1_SOAP_ENV__Reason
#define SOAP_TYPE_C1_SOAP_ENV__Reason (-822796353)
/* SOAP_ENV__Reason: */
struct SOAP_CMAC SOAP_ENV__Reason {
      public:
        /** Optional element 'SOAP-ENV:Text' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Text;
      public:
        /** Return unique type id SOAP_TYPE_C1_SOAP_ENV__Reason */
        long soap_type() const { return SOAP_TYPE_C1_SOAP_ENV__Reason; }
        /** Constructor with member initializations */
        SOAP_ENV__Reason() : SOAP_ENV__Text() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/* ContestQsos.h:1041 */
#ifndef WITH_NOGLOBAL
#ifndef SOAP_TYPE_C1_SOAP_ENV__Fault
#define SOAP_TYPE_C1_SOAP_ENV__Fault (-822796354)
/* SOAP_ENV__Fault: */
struct SOAP_CMAC SOAP_ENV__Fault {
      public:
        /** Optional element 'faultcode' of XML schema type 'xsd:QName' */
        char *faultcode;
        /** Optional element 'faultstring' of XML schema type 'xsd:string' */
        char *faultstring;
        /** Optional element 'faultactor' of XML schema type 'xsd:string' */
        char *faultactor;
        /** Optional element 'detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *detail;
        /** Optional element 'SOAP-ENV:Code' of XML schema type 'SOAP-ENV:Code' */
        struct SOAP_ENV__Code *SOAP_ENV__Code;
        /** Optional element 'SOAP-ENV:Reason' of XML schema type 'SOAP-ENV:Reason' */
        struct SOAP_ENV__Reason *SOAP_ENV__Reason;
        /** Optional element 'SOAP-ENV:Node' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Node;
        /** Optional element 'SOAP-ENV:Role' of XML schema type 'xsd:string' */
        char *SOAP_ENV__Role;
        /** Optional element 'SOAP-ENV:Detail' of XML schema type 'SOAP-ENV:Detail' */
        struct SOAP_ENV__Detail *SOAP_ENV__Detail;
      public:
        /** Return unique type id SOAP_TYPE_C1_SOAP_ENV__Fault */
        long soap_type() const { return SOAP_TYPE_C1_SOAP_ENV__Fault; }
        /** Constructor with member initializations */
        SOAP_ENV__Fault() : faultcode(), faultstring(), faultactor(), detail(), SOAP_ENV__Code(), SOAP_ENV__Reason(), SOAP_ENV__Node(), SOAP_ENV__Role(), SOAP_ENV__Detail() { }
        /** Friend allocator */
        friend SOAP_FMAC1 SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);
};
#endif
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/


/* (built-in):0 */
#ifndef SOAP_TYPE_C1__XML
#define SOAP_TYPE_C1__XML (-822796292)

typedef char *_XML;
#endif

/* (built-in):0 */
#ifndef SOAP_TYPE_C1__QName
#define SOAP_TYPE_C1__QName (-822796293)

typedef char *_QName;
#endif

/******************************************************************************\
 *                                                                            *
 * Serializable Types                                                         *
 *                                                                            *
\******************************************************************************/


/* char has binding name 'byte' for type 'xsd:byte' */
#ifndef SOAP_TYPE_C1_byte
#define SOAP_TYPE_C1_byte (-822796290)

#endif

/* int has binding name 'int' for type 'xsd:int' */
#ifndef SOAP_TYPE_C1_int
#define SOAP_TYPE_C1_int (-822796288)

#endif

/* double has binding name 'double' for type 'xsd:double' */
#ifndef SOAP_TYPE_C1_double
#define SOAP_TYPE_C1_double (-822796309)

#endif

/* std::string has binding name 'std__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_C1_std__string
#define SOAP_TYPE_C1_std__string (-822796305)

#endif

/* contest2__ArrayOfRigFrequency has binding name 'contest2__ArrayOfRigFrequency' for type 'contest2:ArrayOfRigFrequency' */
#ifndef SOAP_TYPE_C1_contest2__ArrayOfRigFrequency
#define SOAP_TYPE_C1_contest2__ArrayOfRigFrequency (-822796304)

#endif

/* contest2__RigFrequency has binding name 'contest2__RigFrequency' for type 'contest2:RigFrequency' */
#ifndef SOAP_TYPE_C1_contest2__RigFrequency
#define SOAP_TYPE_C1_contest2__RigFrequency (-822796303)

#endif

/* contest2__LogSummary has binding name 'contest2__LogSummary' for type 'contest2:LogSummary' */
#ifndef SOAP_TYPE_C1_contest2__LogSummary
#define SOAP_TYPE_C1_contest2__LogSummary (-822796302)

#endif

/* contest2__ArrayOfQsoIdVersion has binding name 'contest2__ArrayOfQsoIdVersion' for type 'contest2:ArrayOfQsoIdVersion' */
#ifndef SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion
#define SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion (-822796301)

#endif

/* contest2__QsoIdVersion has binding name 'contest2__QsoIdVersion' for type 'contest2:QsoIdVersion' */
#ifndef SOAP_TYPE_C1_contest2__QsoIdVersion
#define SOAP_TYPE_C1_contest2__QsoIdVersion (-822796300)

#endif

/* contest2__QsoUpdate has binding name 'contest2__QsoUpdate' for type 'contest2:QsoUpdate' */
#ifndef SOAP_TYPE_C1_contest2__QsoUpdate
#define SOAP_TYPE_C1_contest2__QsoUpdate (-822796299)

#endif

/* contest2__ArrayOfQso has binding name 'contest2__ArrayOfQso' for type 'contest2:ArrayOfQso' */
#ifndef SOAP_TYPE_C1_contest2__ArrayOfQso
#define SOAP_TYPE_C1_contest2__ArrayOfQso (-822796298)

#endif

/* contest2__Qso has binding name 'contest2__Qso' for type 'contest2:Qso' */
#ifndef SOAP_TYPE_C1_contest2__Qso
#define SOAP_TYPE_C1_contest2__Qso (-822796297)

#endif

/* contest2__ArrayOfint has binding name 'contest2__ArrayOfint' for type 'contest2:ArrayOfint' */
#ifndef SOAP_TYPE_C1_contest2__ArrayOfint
#define SOAP_TYPE_C1_contest2__ArrayOfint (-822796296)

#endif

/* contest2__ArrayOfstring has binding name 'contest2__ArrayOfstring' for type 'contest2:ArrayOfstring' */
#ifndef SOAP_TYPE_C1_contest2__ArrayOfstring
#define SOAP_TYPE_C1_contest2__ArrayOfstring (-822796295)

#endif

/* struct SOAP_ENV__Fault has binding name 'SOAP_ENV__Fault' for type '' */
#ifndef SOAP_TYPE_C1_SOAP_ENV__Fault
#define SOAP_TYPE_C1_SOAP_ENV__Fault (-822796354)

#endif

/* struct SOAP_ENV__Reason has binding name 'SOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_C1_SOAP_ENV__Reason
#define SOAP_TYPE_C1_SOAP_ENV__Reason (-822796353)

#endif

/* struct SOAP_ENV__Detail has binding name 'SOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_C1_SOAP_ENV__Detail
#define SOAP_TYPE_C1_SOAP_ENV__Detail (-822796350)

#endif

/* struct SOAP_ENV__Code has binding name 'SOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_C1_SOAP_ENV__Code
#define SOAP_TYPE_C1_SOAP_ENV__Code (-822796348)

#endif

/* struct SOAP_ENV__Header has binding name 'SOAP_ENV__Header' for type '' */
#ifndef SOAP_TYPE_C1_SOAP_ENV__Header
#define SOAP_TYPE_C1_SOAP_ENV__Header (-822796347)

#endif

/* struct contest1__ExchangeFrequencies has binding name 'contest1__ExchangeFrequencies' for type 'contest1:ExchangeFrequencies' */
#ifndef SOAP_TYPE_C1_contest1__ExchangeFrequencies
#define SOAP_TYPE_C1_contest1__ExchangeFrequencies (-822796346)

#endif

/* struct contest1__ExchangeFrequenciesResponse has binding name 'contest1__ExchangeFrequenciesResponse' for type 'contest1:ExchangeFrequenciesResponse' */
#ifndef SOAP_TYPE_C1_contest1__ExchangeFrequenciesResponse
#define SOAP_TYPE_C1_contest1__ExchangeFrequenciesResponse (-822796342)

#endif

/* struct contest1__ColumnNamesToIndices has binding name 'contest1__ColumnNamesToIndices' for type 'contest1:ColumnNamesToIndices' */
#ifndef SOAP_TYPE_C1_contest1__ColumnNamesToIndices
#define SOAP_TYPE_C1_contest1__ColumnNamesToIndices (-822796341)

#endif

/* struct contest1__ColumnNamesToIndicesResponse has binding name 'contest1__ColumnNamesToIndicesResponse' for type 'contest1:ColumnNamesToIndicesResponse' */
#ifndef SOAP_TYPE_C1_contest1__ColumnNamesToIndicesResponse
#define SOAP_TYPE_C1_contest1__ColumnNamesToIndicesResponse (-822796337)

#endif

/* struct contest1__getQsosByKeyArray has binding name 'contest1__getQsosByKeyArray' for type 'contest1:getQsosByKeyArray' */
#ifndef SOAP_TYPE_C1_contest1__getQsosByKeyArray
#define SOAP_TYPE_C1_contest1__getQsosByKeyArray (-822796336)

#endif

/* struct contest1__getQsosByKeyArrayResponse has binding name 'contest1__getQsosByKeyArrayResponse' for type 'contest1:getQsosByKeyArrayResponse' */
#ifndef SOAP_TYPE_C1_contest1__getQsosByKeyArrayResponse
#define SOAP_TYPE_C1_contest1__getQsosByKeyArrayResponse (-822796333)

#endif

/* struct contest1__addAndGetQsos has binding name 'contest1__addAndGetQsos' for type 'contest1:addAndGetQsos' */
#ifndef SOAP_TYPE_C1_contest1__addAndGetQsos
#define SOAP_TYPE_C1_contest1__addAndGetQsos (-822796332)

#endif

/* struct contest1__addAndGetQsosResponse has binding name 'contest1__addAndGetQsosResponse' for type 'contest1:addAndGetQsosResponse' */
#ifndef SOAP_TYPE_C1_contest1__addAndGetQsosResponse
#define SOAP_TYPE_C1_contest1__addAndGetQsosResponse (-822796328)

#endif

/* struct contest1__AddAndGetLogSummary has binding name 'contest1__AddAndGetLogSummary' for type 'contest1:AddAndGetLogSummary' */
#ifndef SOAP_TYPE_C1_contest1__AddAndGetLogSummary
#define SOAP_TYPE_C1_contest1__AddAndGetLogSummary (-822796327)

#endif

/* struct contest1__AddAndGetLogSummaryResponse has binding name 'contest1__AddAndGetLogSummaryResponse' for type 'contest1:AddAndGetLogSummaryResponse' */
#ifndef SOAP_TYPE_C1_contest1__AddAndGetLogSummaryResponse
#define SOAP_TYPE_C1_contest1__AddAndGetLogSummaryResponse (-822796323)

#endif

/* struct contest1__GetSessionId has binding name 'contest1__GetSessionId' for type 'contest1:GetSessionId' */
#ifndef SOAP_TYPE_C1_contest1__GetSessionId
#define SOAP_TYPE_C1_contest1__GetSessionId (-822796322)

#endif

/* struct contest1__GetSessionIdResponse has binding name 'contest1__GetSessionIdResponse' for type 'contest1:GetSessionIdResponse' */
#ifndef SOAP_TYPE_C1_contest1__GetSessionIdResponse
#define SOAP_TYPE_C1_contest1__GetSessionIdResponse (-822796321)

#endif

/* struct SOAP_ENV__Reason * has binding name 'PointerToSOAP_ENV__Reason' for type '' */
#ifndef SOAP_TYPE_C1_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_C1_PointerToSOAP_ENV__Reason (-822796356)

#endif

/* struct SOAP_ENV__Detail * has binding name 'PointerToSOAP_ENV__Detail' for type '' */
#ifndef SOAP_TYPE_C1_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_C1_PointerToSOAP_ENV__Detail (-822796355)

#endif

/* struct SOAP_ENV__Code * has binding name 'PointerToSOAP_ENV__Code' for type '' */
#ifndef SOAP_TYPE_C1_PointerToSOAP_ENV__Code
#define SOAP_TYPE_C1_PointerToSOAP_ENV__Code (-822796349)

#endif

/* contest2__ArrayOfRigFrequency * has binding name 'PointerTocontest2__ArrayOfRigFrequency' for type 'contest2:ArrayOfRigFrequency' */
#ifndef SOAP_TYPE_C1_PointerTocontest2__ArrayOfRigFrequency
#define SOAP_TYPE_C1_PointerTocontest2__ArrayOfRigFrequency (-822796343)

#endif

/* contest2__ArrayOfint * has binding name 'PointerTocontest2__ArrayOfint' for type 'contest2:ArrayOfint' */
#ifndef SOAP_TYPE_C1_PointerTocontest2__ArrayOfint
#define SOAP_TYPE_C1_PointerTocontest2__ArrayOfint (-822796338)

#endif

/* contest2__QsoUpdate * has binding name 'PointerTocontest2__QsoUpdate' for type 'contest2:QsoUpdate' */
#ifndef SOAP_TYPE_C1_PointerTocontest2__QsoUpdate
#define SOAP_TYPE_C1_PointerTocontest2__QsoUpdate (-822796329)

#endif

/* contest2__LogSummary * has binding name 'PointerTocontest2__LogSummary' for type 'contest2:LogSummary' */
#ifndef SOAP_TYPE_C1_PointerTocontest2__LogSummary
#define SOAP_TYPE_C1_PointerTocontest2__LogSummary (-822796324)

#endif

/* contest2__RigFrequency * has binding name 'PointerTocontest2__RigFrequency' for type 'contest2:RigFrequency' */
#ifndef SOAP_TYPE_C1_PointerTocontest2__RigFrequency
#define SOAP_TYPE_C1_PointerTocontest2__RigFrequency (-822796317)

#endif

/* contest2__ArrayOfQsoIdVersion * has binding name 'PointerTocontest2__ArrayOfQsoIdVersion' for type 'contest2:ArrayOfQsoIdVersion' */
#ifndef SOAP_TYPE_C1_PointerTocontest2__ArrayOfQsoIdVersion
#define SOAP_TYPE_C1_PointerTocontest2__ArrayOfQsoIdVersion (-822796316)

#endif

/* contest2__QsoIdVersion * has binding name 'PointerTocontest2__QsoIdVersion' for type 'contest2:QsoIdVersion' */
#ifndef SOAP_TYPE_C1_PointerTocontest2__QsoIdVersion
#define SOAP_TYPE_C1_PointerTocontest2__QsoIdVersion (-822796314)

#endif

/* contest2__ArrayOfQso * has binding name 'PointerTocontest2__ArrayOfQso' for type 'contest2:ArrayOfQso' */
#ifndef SOAP_TYPE_C1_PointerTocontest2__ArrayOfQso
#define SOAP_TYPE_C1_PointerTocontest2__ArrayOfQso (-822796313)

#endif

/* contest2__Qso * has binding name 'PointerTocontest2__Qso' for type 'contest2:Qso' */
#ifndef SOAP_TYPE_C1_PointerTocontest2__Qso
#define SOAP_TYPE_C1_PointerTocontest2__Qso (-822796311)

#endif

/* contest2__ArrayOfstring * has binding name 'PointerTocontest2__ArrayOfstring' for type 'contest2:ArrayOfstring' */
#ifndef SOAP_TYPE_C1_PointerTocontest2__ArrayOfstring
#define SOAP_TYPE_C1_PointerTocontest2__ArrayOfstring (-822796310)

#endif

/* _QName has binding name '_QName' for type 'xsd:QName' */
#ifndef SOAP_TYPE_C1__QName
#define SOAP_TYPE_C1__QName (-822796293)

#endif

/* _XML has binding name '_XML' for type '' */
#ifndef SOAP_TYPE_C1__XML
#define SOAP_TYPE_C1__XML (-822796292)

#endif

/* char * has binding name 'string' for type 'xsd:string' */
#ifndef SOAP_TYPE_C1_string
#define SOAP_TYPE_C1_string (-822796291)

#endif

/* std::vector<contest2__RigFrequency *>  has binding name 'std__vectorTemplateOfPointerTocontest2__RigFrequency' for type 'contest2:RigFrequency' */
#ifndef SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__RigFrequency
#define SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__RigFrequency (-822796318)

#endif

/* std::vector<contest2__QsoIdVersion *>  has binding name 'std__vectorTemplateOfPointerTocontest2__QsoIdVersion' for type 'contest2:QsoIdVersion' */
#ifndef SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__QsoIdVersion
#define SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__QsoIdVersion (-822796315)

#endif

/* std::vector<contest2__Qso *>  has binding name 'std__vectorTemplateOfPointerTocontest2__Qso' for type 'contest2:Qso' */
#ifndef SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__Qso
#define SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__Qso (-822796312)

#endif

/* std::vector<int>  has binding name 'std__vectorTemplateOfint' for type 'xsd:int' */
#ifndef SOAP_TYPE_C1_std__vectorTemplateOfint
#define SOAP_TYPE_C1_std__vectorTemplateOfint (-822796308)

#endif

/* std::vector<std::string>  has binding name 'std__vectorTemplateOfstd__string' for type 'xsd:string' */
#ifndef SOAP_TYPE_C1_std__vectorTemplateOfstd__string
#define SOAP_TYPE_C1_std__vectorTemplateOfstd__string (-822796306)

#endif

/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/

    /** Web service operation 'contest1__GetSessionId' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 contest1__GetSessionId(struct soap*, std::string &response);
    /** Web service operation 'contest1__AddAndGetLogSummary' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 contest1__AddAndGetLogSummary(struct soap*, std::string _SessionId, contest2__ArrayOfQso *_QsoAddArray, int _OldState, int _MaxRequested, struct contest1__AddAndGetLogSummaryResponse &_param_1);
    /** Web service operation 'contest1__addAndGetQsos' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 contest1__addAndGetQsos(struct soap*, std::string _SessionId, contest2__ArrayOfQso *_QsoAddArray, int _OldState, int _MaxRequested, struct contest1__addAndGetQsosResponse &_param_1);
    /** Web service operation 'contest1__getQsosByKeyArray' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 contest1__getQsosByKeyArray(struct soap*, std::string _SessionId, contest2__ArrayOfstring *_QsoKeyArray, struct contest1__getQsosByKeyArrayResponse &_param_1);
    /** Web service operation 'contest1__ColumnNamesToIndices' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 contest1__ColumnNamesToIndices(struct soap*, std::string _SessionId, contest2__ArrayOfstring *_ColumnNames, struct contest1__ColumnNamesToIndicesResponse &_param_1);
    /** Web service operation 'contest1__ExchangeFrequencies' implementation, should return SOAP_OK or error code */
    SOAP_FMAC5 int SOAP_FMAC6 contest1__ExchangeFrequencies(struct soap*, contest2__ArrayOfRigFrequency *_IncomingFreqs, struct contest1__ExchangeFrequenciesResponse &_param_1);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 C1_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 C1_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_contest1__GetSessionId(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_contest1__AddAndGetLogSummary(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_contest1__addAndGetQsos(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_contest1__getQsosByKeyArray(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_contest1__ColumnNamesToIndices(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_contest1__ExchangeFrequencies(struct soap*);

} // namespace C1


#endif

/* End of C1Stub.h */
