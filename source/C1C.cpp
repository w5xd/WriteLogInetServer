/* C1C.cpp
   Generated by gSOAP 2.8.112 for ContestQsos.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "C1H.h"

namespace C1 {

SOAP_SOURCE_STAMP("@(#) C1C.cpp ver 2.8.112 2021-03-26 01:15:01 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
	}
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code == NULL)
		soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason == NULL)
		soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
				return NULL;
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_subcode(struct soap *soap)
{
	const char **s = soap_faultsubcode(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_string(struct soap *soap)
{
	const char **s = soap_faultstring(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
			soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
		soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_detail(struct soap *soap)
{
	const char **s = soap_faultdetail(soap);
	return s ? *s : NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, NULL, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, const char *tag, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_C1_byte:
		return soap_in_byte(soap, tag, NULL, "xsd:byte");
	case SOAP_TYPE_C1_int:
		return soap_in_int(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_C1_double:
		return soap_in_double(soap, tag, NULL, "xsd:double");
	case SOAP_TYPE_C1_std__string:
		return soap_in_std__string(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_C1_contest2__ArrayOfRigFrequency:
		return soap_in_contest2__ArrayOfRigFrequency(soap, tag, NULL, "contest2:ArrayOfRigFrequency");
	case SOAP_TYPE_C1_contest2__RigFrequency:
		return soap_in_contest2__RigFrequency(soap, tag, NULL, "contest2:RigFrequency");
	case SOAP_TYPE_C1_contest2__LogSummary:
		return soap_in_contest2__LogSummary(soap, tag, NULL, "contest2:LogSummary");
	case SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion:
		return soap_in_contest2__ArrayOfQsoIdVersion(soap, tag, NULL, "contest2:ArrayOfQsoIdVersion");
	case SOAP_TYPE_C1_contest2__QsoIdVersion:
		return soap_in_contest2__QsoIdVersion(soap, tag, NULL, "contest2:QsoIdVersion");
	case SOAP_TYPE_C1_contest2__QsoUpdate:
		return soap_in_contest2__QsoUpdate(soap, tag, NULL, "contest2:QsoUpdate");
	case SOAP_TYPE_C1_contest2__ArrayOfQso:
		return soap_in_contest2__ArrayOfQso(soap, tag, NULL, "contest2:ArrayOfQso");
	case SOAP_TYPE_C1_contest2__Qso:
		return soap_in_contest2__Qso(soap, tag, NULL, "contest2:Qso");
	case SOAP_TYPE_C1_contest2__ArrayOfint:
		return soap_in_contest2__ArrayOfint(soap, tag, NULL, "contest2:ArrayOfint");
	case SOAP_TYPE_C1_contest2__ArrayOfstring:
		return soap_in_contest2__ArrayOfstring(soap, tag, NULL, "contest2:ArrayOfstring");
	case SOAP_TYPE_C1_contest1__ExchangeFrequencies:
		return soap_in_contest1__ExchangeFrequencies(soap, tag, NULL, "contest1:ExchangeFrequencies");
	case SOAP_TYPE_C1_contest1__ExchangeFrequenciesResponse:
		return soap_in_contest1__ExchangeFrequenciesResponse(soap, tag, NULL, "contest1:ExchangeFrequenciesResponse");
	case SOAP_TYPE_C1_contest1__ColumnNamesToIndices:
		return soap_in_contest1__ColumnNamesToIndices(soap, tag, NULL, "contest1:ColumnNamesToIndices");
	case SOAP_TYPE_C1_contest1__ColumnNamesToIndicesResponse:
		return soap_in_contest1__ColumnNamesToIndicesResponse(soap, tag, NULL, "contest1:ColumnNamesToIndicesResponse");
	case SOAP_TYPE_C1_contest1__getQsosByKeyArray:
		return soap_in_contest1__getQsosByKeyArray(soap, tag, NULL, "contest1:getQsosByKeyArray");
	case SOAP_TYPE_C1_contest1__getQsosByKeyArrayResponse:
		return soap_in_contest1__getQsosByKeyArrayResponse(soap, tag, NULL, "contest1:getQsosByKeyArrayResponse");
	case SOAP_TYPE_C1_contest1__addAndGetQsos:
		return soap_in_contest1__addAndGetQsos(soap, tag, NULL, "contest1:addAndGetQsos");
	case SOAP_TYPE_C1_contest1__addAndGetQsosResponse:
		return soap_in_contest1__addAndGetQsosResponse(soap, tag, NULL, "contest1:addAndGetQsosResponse");
	case SOAP_TYPE_C1_contest1__AddAndGetLogSummary:
		return soap_in_contest1__AddAndGetLogSummary(soap, tag, NULL, "contest1:AddAndGetLogSummary");
	case SOAP_TYPE_C1_contest1__AddAndGetLogSummaryResponse:
		return soap_in_contest1__AddAndGetLogSummaryResponse(soap, tag, NULL, "contest1:AddAndGetLogSummaryResponse");
	case SOAP_TYPE_C1_contest1__GetSessionId:
		return soap_in_contest1__GetSessionId(soap, tag, NULL, "contest1:GetSessionId");
	case SOAP_TYPE_C1_contest1__GetSessionIdResponse:
		return soap_in_contest1__GetSessionIdResponse(soap, tag, NULL, "contest1:GetSessionIdResponse");
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfRigFrequency:
		return soap_in_PointerTocontest2__ArrayOfRigFrequency(soap, tag, NULL, "contest2:ArrayOfRigFrequency");
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfint:
		return soap_in_PointerTocontest2__ArrayOfint(soap, tag, NULL, "contest2:ArrayOfint");
	case SOAP_TYPE_C1_PointerTocontest2__QsoUpdate:
		return soap_in_PointerTocontest2__QsoUpdate(soap, tag, NULL, "contest2:QsoUpdate");
	case SOAP_TYPE_C1_PointerTocontest2__LogSummary:
		return soap_in_PointerTocontest2__LogSummary(soap, tag, NULL, "contest2:LogSummary");
	case SOAP_TYPE_C1_PointerTocontest2__RigFrequency:
		return soap_in_PointerTocontest2__RigFrequency(soap, tag, NULL, "contest2:RigFrequency");
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfQsoIdVersion:
		return soap_in_PointerTocontest2__ArrayOfQsoIdVersion(soap, tag, NULL, "contest2:ArrayOfQsoIdVersion");
	case SOAP_TYPE_C1_PointerTocontest2__QsoIdVersion:
		return soap_in_PointerTocontest2__QsoIdVersion(soap, tag, NULL, "contest2:QsoIdVersion");
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfQso:
		return soap_in_PointerTocontest2__ArrayOfQso(soap, tag, NULL, "contest2:ArrayOfQso");
	case SOAP_TYPE_C1_PointerTocontest2__Qso:
		return soap_in_PointerTocontest2__Qso(soap, tag, NULL, "contest2:Qso");
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfstring:
		return soap_in_PointerTocontest2__ArrayOfstring(soap, tag, NULL, "contest2:ArrayOfstring");
	case SOAP_TYPE_C1__QName:
	{	char **s;
		s = soap_in__QName(soap, tag, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_C1_string:
	{	char **s;
		s = soap_in_string(soap, tag, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_C1_std__string;
			return soap_in_std__string(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest2:ArrayOfRigFrequency"))
		{	*type = SOAP_TYPE_C1_contest2__ArrayOfRigFrequency;
			return soap_in_contest2__ArrayOfRigFrequency(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest2:RigFrequency"))
		{	*type = SOAP_TYPE_C1_contest2__RigFrequency;
			return soap_in_contest2__RigFrequency(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest2:LogSummary"))
		{	*type = SOAP_TYPE_C1_contest2__LogSummary;
			return soap_in_contest2__LogSummary(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest2:ArrayOfQsoIdVersion"))
		{	*type = SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion;
			return soap_in_contest2__ArrayOfQsoIdVersion(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest2:QsoIdVersion"))
		{	*type = SOAP_TYPE_C1_contest2__QsoIdVersion;
			return soap_in_contest2__QsoIdVersion(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest2:QsoUpdate"))
		{	*type = SOAP_TYPE_C1_contest2__QsoUpdate;
			return soap_in_contest2__QsoUpdate(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest2:ArrayOfQso"))
		{	*type = SOAP_TYPE_C1_contest2__ArrayOfQso;
			return soap_in_contest2__ArrayOfQso(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest2:Qso"))
		{	*type = SOAP_TYPE_C1_contest2__Qso;
			return soap_in_contest2__Qso(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest2:ArrayOfint"))
		{	*type = SOAP_TYPE_C1_contest2__ArrayOfint;
			return soap_in_contest2__ArrayOfint(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest2:ArrayOfstring"))
		{	*type = SOAP_TYPE_C1_contest2__ArrayOfstring;
			return soap_in_contest2__ArrayOfstring(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_C1_byte;
			return soap_in_byte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_C1_int;
			return soap_in_int(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_C1_double;
			return soap_in_double(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest1:ExchangeFrequencies"))
		{	*type = SOAP_TYPE_C1_contest1__ExchangeFrequencies;
			return soap_in_contest1__ExchangeFrequencies(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest1:ExchangeFrequenciesResponse"))
		{	*type = SOAP_TYPE_C1_contest1__ExchangeFrequenciesResponse;
			return soap_in_contest1__ExchangeFrequenciesResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest1:ColumnNamesToIndices"))
		{	*type = SOAP_TYPE_C1_contest1__ColumnNamesToIndices;
			return soap_in_contest1__ColumnNamesToIndices(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest1:ColumnNamesToIndicesResponse"))
		{	*type = SOAP_TYPE_C1_contest1__ColumnNamesToIndicesResponse;
			return soap_in_contest1__ColumnNamesToIndicesResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest1:getQsosByKeyArray"))
		{	*type = SOAP_TYPE_C1_contest1__getQsosByKeyArray;
			return soap_in_contest1__getQsosByKeyArray(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest1:getQsosByKeyArrayResponse"))
		{	*type = SOAP_TYPE_C1_contest1__getQsosByKeyArrayResponse;
			return soap_in_contest1__getQsosByKeyArrayResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest1:addAndGetQsos"))
		{	*type = SOAP_TYPE_C1_contest1__addAndGetQsos;
			return soap_in_contest1__addAndGetQsos(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest1:addAndGetQsosResponse"))
		{	*type = SOAP_TYPE_C1_contest1__addAndGetQsosResponse;
			return soap_in_contest1__addAndGetQsosResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest1:AddAndGetLogSummary"))
		{	*type = SOAP_TYPE_C1_contest1__AddAndGetLogSummary;
			return soap_in_contest1__AddAndGetLogSummary(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest1:AddAndGetLogSummaryResponse"))
		{	*type = SOAP_TYPE_C1_contest1__AddAndGetLogSummaryResponse;
			return soap_in_contest1__AddAndGetLogSummaryResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest1:GetSessionId"))
		{	*type = SOAP_TYPE_C1_contest1__GetSessionId;
			return soap_in_contest1__GetSessionId(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest1:GetSessionIdResponse"))
		{	*type = SOAP_TYPE_C1_contest1__GetSessionIdResponse;
			return soap_in_contest1__GetSessionIdResponse(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE_C1__QName;
			s = soap_in__QName(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_C1_string;
			s = soap_in_string(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input at level = %u body = %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, NULL, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_C1_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_C1_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_C1_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_C1_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_C1_contest2__ArrayOfRigFrequency:
		return ((contest2__ArrayOfRigFrequency *)ptr)->soap_out(soap, tag, id, "contest2:ArrayOfRigFrequency");
	case SOAP_TYPE_C1_contest2__RigFrequency:
		return ((contest2__RigFrequency *)ptr)->soap_out(soap, tag, id, "contest2:RigFrequency");
	case SOAP_TYPE_C1_contest2__LogSummary:
		return ((contest2__LogSummary *)ptr)->soap_out(soap, tag, id, "contest2:LogSummary");
	case SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion:
		return ((contest2__ArrayOfQsoIdVersion *)ptr)->soap_out(soap, tag, id, "contest2:ArrayOfQsoIdVersion");
	case SOAP_TYPE_C1_contest2__QsoIdVersion:
		return ((contest2__QsoIdVersion *)ptr)->soap_out(soap, tag, id, "contest2:QsoIdVersion");
	case SOAP_TYPE_C1_contest2__QsoUpdate:
		return ((contest2__QsoUpdate *)ptr)->soap_out(soap, tag, id, "contest2:QsoUpdate");
	case SOAP_TYPE_C1_contest2__ArrayOfQso:
		return ((contest2__ArrayOfQso *)ptr)->soap_out(soap, tag, id, "contest2:ArrayOfQso");
	case SOAP_TYPE_C1_contest2__Qso:
		return ((contest2__Qso *)ptr)->soap_out(soap, tag, id, "contest2:Qso");
	case SOAP_TYPE_C1_contest2__ArrayOfint:
		return ((contest2__ArrayOfint *)ptr)->soap_out(soap, tag, id, "contest2:ArrayOfint");
	case SOAP_TYPE_C1_contest2__ArrayOfstring:
		return ((contest2__ArrayOfstring *)ptr)->soap_out(soap, tag, id, "contest2:ArrayOfstring");
	case SOAP_TYPE_C1_contest1__ExchangeFrequencies:
		return soap_out_contest1__ExchangeFrequencies(soap, tag, id, (const struct contest1__ExchangeFrequencies *)ptr, "contest1:ExchangeFrequencies");
	case SOAP_TYPE_C1_contest1__ExchangeFrequenciesResponse:
		return soap_out_contest1__ExchangeFrequenciesResponse(soap, tag, id, (const struct contest1__ExchangeFrequenciesResponse *)ptr, "contest1:ExchangeFrequenciesResponse");
	case SOAP_TYPE_C1_contest1__ColumnNamesToIndices:
		return soap_out_contest1__ColumnNamesToIndices(soap, tag, id, (const struct contest1__ColumnNamesToIndices *)ptr, "contest1:ColumnNamesToIndices");
	case SOAP_TYPE_C1_contest1__ColumnNamesToIndicesResponse:
		return soap_out_contest1__ColumnNamesToIndicesResponse(soap, tag, id, (const struct contest1__ColumnNamesToIndicesResponse *)ptr, "contest1:ColumnNamesToIndicesResponse");
	case SOAP_TYPE_C1_contest1__getQsosByKeyArray:
		return soap_out_contest1__getQsosByKeyArray(soap, tag, id, (const struct contest1__getQsosByKeyArray *)ptr, "contest1:getQsosByKeyArray");
	case SOAP_TYPE_C1_contest1__getQsosByKeyArrayResponse:
		return soap_out_contest1__getQsosByKeyArrayResponse(soap, tag, id, (const struct contest1__getQsosByKeyArrayResponse *)ptr, "contest1:getQsosByKeyArrayResponse");
	case SOAP_TYPE_C1_contest1__addAndGetQsos:
		return soap_out_contest1__addAndGetQsos(soap, tag, id, (const struct contest1__addAndGetQsos *)ptr, "contest1:addAndGetQsos");
	case SOAP_TYPE_C1_contest1__addAndGetQsosResponse:
		return soap_out_contest1__addAndGetQsosResponse(soap, tag, id, (const struct contest1__addAndGetQsosResponse *)ptr, "contest1:addAndGetQsosResponse");
	case SOAP_TYPE_C1_contest1__AddAndGetLogSummary:
		return soap_out_contest1__AddAndGetLogSummary(soap, tag, id, (const struct contest1__AddAndGetLogSummary *)ptr, "contest1:AddAndGetLogSummary");
	case SOAP_TYPE_C1_contest1__AddAndGetLogSummaryResponse:
		return soap_out_contest1__AddAndGetLogSummaryResponse(soap, tag, id, (const struct contest1__AddAndGetLogSummaryResponse *)ptr, "contest1:AddAndGetLogSummaryResponse");
	case SOAP_TYPE_C1_contest1__GetSessionId:
		return soap_out_contest1__GetSessionId(soap, tag, id, (const struct contest1__GetSessionId *)ptr, "contest1:GetSessionId");
	case SOAP_TYPE_C1_contest1__GetSessionIdResponse:
		return soap_out_contest1__GetSessionIdResponse(soap, tag, id, (const struct contest1__GetSessionIdResponse *)ptr, "contest1:GetSessionIdResponse");
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfRigFrequency:
		return soap_out_PointerTocontest2__ArrayOfRigFrequency(soap, tag, id, (contest2__ArrayOfRigFrequency *const*)ptr, "contest2:ArrayOfRigFrequency");
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfint:
		return soap_out_PointerTocontest2__ArrayOfint(soap, tag, id, (contest2__ArrayOfint *const*)ptr, "contest2:ArrayOfint");
	case SOAP_TYPE_C1_PointerTocontest2__QsoUpdate:
		return soap_out_PointerTocontest2__QsoUpdate(soap, tag, id, (contest2__QsoUpdate *const*)ptr, "contest2:QsoUpdate");
	case SOAP_TYPE_C1_PointerTocontest2__LogSummary:
		return soap_out_PointerTocontest2__LogSummary(soap, tag, id, (contest2__LogSummary *const*)ptr, "contest2:LogSummary");
	case SOAP_TYPE_C1_PointerTocontest2__RigFrequency:
		return soap_out_PointerTocontest2__RigFrequency(soap, tag, id, (contest2__RigFrequency *const*)ptr, "contest2:RigFrequency");
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfQsoIdVersion:
		return soap_out_PointerTocontest2__ArrayOfQsoIdVersion(soap, tag, id, (contest2__ArrayOfQsoIdVersion *const*)ptr, "contest2:ArrayOfQsoIdVersion");
	case SOAP_TYPE_C1_PointerTocontest2__QsoIdVersion:
		return soap_out_PointerTocontest2__QsoIdVersion(soap, tag, id, (contest2__QsoIdVersion *const*)ptr, "contest2:QsoIdVersion");
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfQso:
		return soap_out_PointerTocontest2__ArrayOfQso(soap, tag, id, (contest2__ArrayOfQso *const*)ptr, "contest2:ArrayOfQso");
	case SOAP_TYPE_C1_PointerTocontest2__Qso:
		return soap_out_PointerTocontest2__Qso(soap, tag, id, (contest2__Qso *const*)ptr, "contest2:Qso");
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfstring:
		return soap_out_PointerTocontest2__ArrayOfstring(soap, tag, id, (contest2__ArrayOfstring *const*)ptr, "contest2:ArrayOfstring");
	case SOAP_TYPE_C1__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_C1_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in C1C.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag, 0, NULL); /* unknown type to serialize */
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_C1_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfRigFrequency:
		((contest2__ArrayOfRigFrequency *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C1_contest2__RigFrequency:
		((contest2__RigFrequency *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C1_contest2__LogSummary:
		((contest2__LogSummary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion:
		((contest2__ArrayOfQsoIdVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C1_contest2__QsoIdVersion:
		((contest2__QsoIdVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C1_contest2__QsoUpdate:
		((contest2__QsoUpdate *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfQso:
		((contest2__ArrayOfQso *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C1_contest2__Qso:
		((contest2__Qso *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfint:
		((contest2__ArrayOfint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfstring:
		((contest2__ArrayOfstring *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C1_contest1__ExchangeFrequencies:
		soap_serialize_contest1__ExchangeFrequencies(soap, (const struct contest1__ExchangeFrequencies *)ptr);
		break;
	case SOAP_TYPE_C1_contest1__ExchangeFrequenciesResponse:
		soap_serialize_contest1__ExchangeFrequenciesResponse(soap, (const struct contest1__ExchangeFrequenciesResponse *)ptr);
		break;
	case SOAP_TYPE_C1_contest1__ColumnNamesToIndices:
		soap_serialize_contest1__ColumnNamesToIndices(soap, (const struct contest1__ColumnNamesToIndices *)ptr);
		break;
	case SOAP_TYPE_C1_contest1__ColumnNamesToIndicesResponse:
		soap_serialize_contest1__ColumnNamesToIndicesResponse(soap, (const struct contest1__ColumnNamesToIndicesResponse *)ptr);
		break;
	case SOAP_TYPE_C1_contest1__getQsosByKeyArray:
		soap_serialize_contest1__getQsosByKeyArray(soap, (const struct contest1__getQsosByKeyArray *)ptr);
		break;
	case SOAP_TYPE_C1_contest1__getQsosByKeyArrayResponse:
		soap_serialize_contest1__getQsosByKeyArrayResponse(soap, (const struct contest1__getQsosByKeyArrayResponse *)ptr);
		break;
	case SOAP_TYPE_C1_contest1__addAndGetQsos:
		soap_serialize_contest1__addAndGetQsos(soap, (const struct contest1__addAndGetQsos *)ptr);
		break;
	case SOAP_TYPE_C1_contest1__addAndGetQsosResponse:
		soap_serialize_contest1__addAndGetQsosResponse(soap, (const struct contest1__addAndGetQsosResponse *)ptr);
		break;
	case SOAP_TYPE_C1_contest1__AddAndGetLogSummary:
		soap_serialize_contest1__AddAndGetLogSummary(soap, (const struct contest1__AddAndGetLogSummary *)ptr);
		break;
	case SOAP_TYPE_C1_contest1__AddAndGetLogSummaryResponse:
		soap_serialize_contest1__AddAndGetLogSummaryResponse(soap, (const struct contest1__AddAndGetLogSummaryResponse *)ptr);
		break;
	case SOAP_TYPE_C1_contest1__GetSessionId:
		soap_serialize_contest1__GetSessionId(soap, (const struct contest1__GetSessionId *)ptr);
		break;
	case SOAP_TYPE_C1_contest1__GetSessionIdResponse:
		soap_serialize_contest1__GetSessionIdResponse(soap, (const struct contest1__GetSessionIdResponse *)ptr);
		break;
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfRigFrequency:
		soap_serialize_PointerTocontest2__ArrayOfRigFrequency(soap, (contest2__ArrayOfRigFrequency *const*)ptr);
		break;
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfint:
		soap_serialize_PointerTocontest2__ArrayOfint(soap, (contest2__ArrayOfint *const*)ptr);
		break;
	case SOAP_TYPE_C1_PointerTocontest2__QsoUpdate:
		soap_serialize_PointerTocontest2__QsoUpdate(soap, (contest2__QsoUpdate *const*)ptr);
		break;
	case SOAP_TYPE_C1_PointerTocontest2__LogSummary:
		soap_serialize_PointerTocontest2__LogSummary(soap, (contest2__LogSummary *const*)ptr);
		break;
	case SOAP_TYPE_C1_PointerTocontest2__RigFrequency:
		soap_serialize_PointerTocontest2__RigFrequency(soap, (contest2__RigFrequency *const*)ptr);
		break;
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfQsoIdVersion:
		soap_serialize_PointerTocontest2__ArrayOfQsoIdVersion(soap, (contest2__ArrayOfQsoIdVersion *const*)ptr);
		break;
	case SOAP_TYPE_C1_PointerTocontest2__QsoIdVersion:
		soap_serialize_PointerTocontest2__QsoIdVersion(soap, (contest2__QsoIdVersion *const*)ptr);
		break;
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfQso:
		soap_serialize_PointerTocontest2__ArrayOfQso(soap, (contest2__ArrayOfQso *const*)ptr);
		break;
	case SOAP_TYPE_C1_PointerTocontest2__Qso:
		soap_serialize_PointerTocontest2__Qso(soap, (contest2__Qso *const*)ptr);
		break;
	case SOAP_TYPE_C1_PointerTocontest2__ArrayOfstring:
		soap_serialize_PointerTocontest2__ArrayOfstring(soap, (contest2__ArrayOfstring *const*)ptr);
		break;
	case SOAP_TYPE_C1__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_C1_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}

SOAP_FMAC3 void * SOAP_FMAC4 C1_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_C1_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest2__ArrayOfstring:
		return (void*)soap_instantiate_contest2__ArrayOfstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest2__ArrayOfint:
		return (void*)soap_instantiate_contest2__ArrayOfint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest2__Qso:
		return (void*)soap_instantiate_contest2__Qso(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest2__ArrayOfQso:
		return (void*)soap_instantiate_contest2__ArrayOfQso(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest2__QsoUpdate:
		return (void*)soap_instantiate_contest2__QsoUpdate(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest2__QsoIdVersion:
		return (void*)soap_instantiate_contest2__QsoIdVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion:
		return (void*)soap_instantiate_contest2__ArrayOfQsoIdVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest2__LogSummary:
		return (void*)soap_instantiate_contest2__LogSummary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest2__RigFrequency:
		return (void*)soap_instantiate_contest2__RigFrequency(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest2__ArrayOfRigFrequency:
		return (void*)soap_instantiate_contest2__ArrayOfRigFrequency(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest1__GetSessionIdResponse:
		return (void*)soap_instantiate_contest1__GetSessionIdResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest1__GetSessionId:
		return (void*)soap_instantiate_contest1__GetSessionId(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest1__AddAndGetLogSummaryResponse:
		return (void*)soap_instantiate_contest1__AddAndGetLogSummaryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest1__AddAndGetLogSummary:
		return (void*)soap_instantiate_contest1__AddAndGetLogSummary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest1__addAndGetQsosResponse:
		return (void*)soap_instantiate_contest1__addAndGetQsosResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest1__addAndGetQsos:
		return (void*)soap_instantiate_contest1__addAndGetQsos(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest1__getQsosByKeyArrayResponse:
		return (void*)soap_instantiate_contest1__getQsosByKeyArrayResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest1__getQsosByKeyArray:
		return (void*)soap_instantiate_contest1__getQsosByKeyArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest1__ColumnNamesToIndicesResponse:
		return (void*)soap_instantiate_contest1__ColumnNamesToIndicesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest1__ColumnNamesToIndices:
		return (void*)soap_instantiate_contest1__ColumnNamesToIndices(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest1__ExchangeFrequenciesResponse:
		return (void*)soap_instantiate_contest1__ExchangeFrequenciesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_contest1__ExchangeFrequencies:
		return (void*)soap_instantiate_contest1__ExchangeFrequencies(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C1_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C1_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C1_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C1_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C1_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__RigFrequency:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTocontest2__RigFrequency(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__QsoIdVersion:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__Qso:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTocontest2__Qso(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_std__vectorTemplateOfint:
		return (void*)soap_instantiate_std__vectorTemplateOfint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C1_std__vectorTemplateOfstd__string:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__string(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 C1_fdelete(struct soap *soap, struct soap_clist *p)
{
	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_C1_std__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfstring:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest2__ArrayOfstring*>(p->ptr), contest2__ArrayOfstring);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest2__ArrayOfstring*>(p->ptr), contest2__ArrayOfstring);
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfint:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest2__ArrayOfint*>(p->ptr), contest2__ArrayOfint);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest2__ArrayOfint*>(p->ptr), contest2__ArrayOfint);
		break;
	case SOAP_TYPE_C1_contest2__Qso:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest2__Qso*>(p->ptr), contest2__Qso);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest2__Qso*>(p->ptr), contest2__Qso);
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfQso:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest2__ArrayOfQso*>(p->ptr), contest2__ArrayOfQso);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest2__ArrayOfQso*>(p->ptr), contest2__ArrayOfQso);
		break;
	case SOAP_TYPE_C1_contest2__QsoUpdate:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest2__QsoUpdate*>(p->ptr), contest2__QsoUpdate);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest2__QsoUpdate*>(p->ptr), contest2__QsoUpdate);
		break;
	case SOAP_TYPE_C1_contest2__QsoIdVersion:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest2__QsoIdVersion*>(p->ptr), contest2__QsoIdVersion);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest2__QsoIdVersion*>(p->ptr), contest2__QsoIdVersion);
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest2__ArrayOfQsoIdVersion*>(p->ptr), contest2__ArrayOfQsoIdVersion);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest2__ArrayOfQsoIdVersion*>(p->ptr), contest2__ArrayOfQsoIdVersion);
		break;
	case SOAP_TYPE_C1_contest2__LogSummary:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest2__LogSummary*>(p->ptr), contest2__LogSummary);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest2__LogSummary*>(p->ptr), contest2__LogSummary);
		break;
	case SOAP_TYPE_C1_contest2__RigFrequency:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest2__RigFrequency*>(p->ptr), contest2__RigFrequency);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest2__RigFrequency*>(p->ptr), contest2__RigFrequency);
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfRigFrequency:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest2__ArrayOfRigFrequency*>(p->ptr), contest2__ArrayOfRigFrequency);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest2__ArrayOfRigFrequency*>(p->ptr), contest2__ArrayOfRigFrequency);
		break;
	case SOAP_TYPE_C1_contest1__GetSessionIdResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct contest1__GetSessionIdResponse*>(p->ptr), struct contest1__GetSessionIdResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct contest1__GetSessionIdResponse*>(p->ptr), struct contest1__GetSessionIdResponse);
		break;
	case SOAP_TYPE_C1_contest1__GetSessionId:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct contest1__GetSessionId*>(p->ptr), struct contest1__GetSessionId);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct contest1__GetSessionId*>(p->ptr), struct contest1__GetSessionId);
		break;
	case SOAP_TYPE_C1_contest1__AddAndGetLogSummaryResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct contest1__AddAndGetLogSummaryResponse*>(p->ptr), struct contest1__AddAndGetLogSummaryResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct contest1__AddAndGetLogSummaryResponse*>(p->ptr), struct contest1__AddAndGetLogSummaryResponse);
		break;
	case SOAP_TYPE_C1_contest1__AddAndGetLogSummary:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct contest1__AddAndGetLogSummary*>(p->ptr), struct contest1__AddAndGetLogSummary);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct contest1__AddAndGetLogSummary*>(p->ptr), struct contest1__AddAndGetLogSummary);
		break;
	case SOAP_TYPE_C1_contest1__addAndGetQsosResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct contest1__addAndGetQsosResponse*>(p->ptr), struct contest1__addAndGetQsosResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct contest1__addAndGetQsosResponse*>(p->ptr), struct contest1__addAndGetQsosResponse);
		break;
	case SOAP_TYPE_C1_contest1__addAndGetQsos:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct contest1__addAndGetQsos*>(p->ptr), struct contest1__addAndGetQsos);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct contest1__addAndGetQsos*>(p->ptr), struct contest1__addAndGetQsos);
		break;
	case SOAP_TYPE_C1_contest1__getQsosByKeyArrayResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct contest1__getQsosByKeyArrayResponse*>(p->ptr), struct contest1__getQsosByKeyArrayResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct contest1__getQsosByKeyArrayResponse*>(p->ptr), struct contest1__getQsosByKeyArrayResponse);
		break;
	case SOAP_TYPE_C1_contest1__getQsosByKeyArray:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct contest1__getQsosByKeyArray*>(p->ptr), struct contest1__getQsosByKeyArray);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct contest1__getQsosByKeyArray*>(p->ptr), struct contest1__getQsosByKeyArray);
		break;
	case SOAP_TYPE_C1_contest1__ColumnNamesToIndicesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct contest1__ColumnNamesToIndicesResponse*>(p->ptr), struct contest1__ColumnNamesToIndicesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct contest1__ColumnNamesToIndicesResponse*>(p->ptr), struct contest1__ColumnNamesToIndicesResponse);
		break;
	case SOAP_TYPE_C1_contest1__ColumnNamesToIndices:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct contest1__ColumnNamesToIndices*>(p->ptr), struct contest1__ColumnNamesToIndices);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct contest1__ColumnNamesToIndices*>(p->ptr), struct contest1__ColumnNamesToIndices);
		break;
	case SOAP_TYPE_C1_contest1__ExchangeFrequenciesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct contest1__ExchangeFrequenciesResponse*>(p->ptr), struct contest1__ExchangeFrequenciesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct contest1__ExchangeFrequenciesResponse*>(p->ptr), struct contest1__ExchangeFrequenciesResponse);
		break;
	case SOAP_TYPE_C1_contest1__ExchangeFrequencies:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct contest1__ExchangeFrequencies*>(p->ptr), struct contest1__ExchangeFrequencies);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct contest1__ExchangeFrequencies*>(p->ptr), struct contest1__ExchangeFrequencies);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C1_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C1_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C1_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C1_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C1_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	case SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__RigFrequency:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<contest2__RigFrequency *> *>(p->ptr), std::vector<contest2__RigFrequency *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<contest2__RigFrequency *> *>(p->ptr), std::vector<contest2__RigFrequency *> );
		break;
	case SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__QsoIdVersion:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<contest2__QsoIdVersion *> *>(p->ptr), std::vector<contest2__QsoIdVersion *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<contest2__QsoIdVersion *> *>(p->ptr), std::vector<contest2__QsoIdVersion *> );
		break;
	case SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__Qso:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<contest2__Qso *> *>(p->ptr), std::vector<contest2__Qso *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<contest2__Qso *> *>(p->ptr), std::vector<contest2__Qso *> );
		break;
	case SOAP_TYPE_C1_std__vectorTemplateOfint:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<int> *>(p->ptr), std::vector<int> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<int> *>(p->ptr), std::vector<int> );
		break;
	case SOAP_TYPE_C1_std__vectorTemplateOfstd__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		break;
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 C1_fbase(int t, int b)
{
	(void)t; (void)b; /* appease -Wall -Werror */
	return 0;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 C1_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__RigFrequency:
		if (t == SOAP_TYPE_C1_contest2__RigFrequency || C1_fbase(t, SOAP_TYPE_C1_contest2__RigFrequency))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<contest2__RigFrequency *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<contest2__RigFrequency *> *)p)[index] = *(contest2__RigFrequency **)q;
		}
		break;
	case SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__QsoIdVersion:
		if (t == SOAP_TYPE_C1_contest2__QsoIdVersion || C1_fbase(t, SOAP_TYPE_C1_contest2__QsoIdVersion))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<contest2__QsoIdVersion *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<contest2__QsoIdVersion *> *)p)[index] = *(contest2__QsoIdVersion **)q;
		}
		break;
	case SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__Qso:
		if (t == SOAP_TYPE_C1_contest2__Qso || C1_fbase(t, SOAP_TYPE_C1_contest2__Qso))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<contest2__Qso *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<contest2__Qso *> *)p)[index] = *(contest2__Qso **)q;
		}
		break;
	case SOAP_TYPE_C1_std__vectorTemplateOfint:
		if (t == SOAP_TYPE_C1_int)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<int>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<int> *)p)[index] = *(int *)q;
		}
		break;
	case SOAP_TYPE_C1_std__vectorTemplateOfstd__string:
		if (t == SOAP_TYPE_C1_std__string)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<std::string>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<std::string> *)p)[index] = *(std::string *)q;
		}
		break;
	case SOAP_TYPE_C1_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfstring:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest2__ArrayOfstring type=%d location=%p object=%p\n", t, p, q));
		*(contest2__ArrayOfstring*)p = *(contest2__ArrayOfstring*)q;
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfint:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest2__ArrayOfint type=%d location=%p object=%p\n", t, p, q));
		*(contest2__ArrayOfint*)p = *(contest2__ArrayOfint*)q;
		break;
	case SOAP_TYPE_C1_contest2__Qso:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest2__Qso type=%d location=%p object=%p\n", t, p, q));
		*(contest2__Qso*)p = *(contest2__Qso*)q;
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfQso:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest2__ArrayOfQso type=%d location=%p object=%p\n", t, p, q));
		*(contest2__ArrayOfQso*)p = *(contest2__ArrayOfQso*)q;
		break;
	case SOAP_TYPE_C1_contest2__QsoUpdate:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest2__QsoUpdate type=%d location=%p object=%p\n", t, p, q));
		*(contest2__QsoUpdate*)p = *(contest2__QsoUpdate*)q;
		break;
	case SOAP_TYPE_C1_contest2__QsoIdVersion:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest2__QsoIdVersion type=%d location=%p object=%p\n", t, p, q));
		*(contest2__QsoIdVersion*)p = *(contest2__QsoIdVersion*)q;
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest2__ArrayOfQsoIdVersion type=%d location=%p object=%p\n", t, p, q));
		*(contest2__ArrayOfQsoIdVersion*)p = *(contest2__ArrayOfQsoIdVersion*)q;
		break;
	case SOAP_TYPE_C1_contest2__LogSummary:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest2__LogSummary type=%d location=%p object=%p\n", t, p, q));
		*(contest2__LogSummary*)p = *(contest2__LogSummary*)q;
		break;
	case SOAP_TYPE_C1_contest2__RigFrequency:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest2__RigFrequency type=%d location=%p object=%p\n", t, p, q));
		*(contest2__RigFrequency*)p = *(contest2__RigFrequency*)q;
		break;
	case SOAP_TYPE_C1_contest2__ArrayOfRigFrequency:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest2__ArrayOfRigFrequency type=%d location=%p object=%p\n", t, p, q));
		*(contest2__ArrayOfRigFrequency*)p = *(contest2__ArrayOfRigFrequency*)q;
		break;
	case SOAP_TYPE_C1_contest1__GetSessionIdResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct contest1__GetSessionIdResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct contest1__GetSessionIdResponse*)p = *(struct contest1__GetSessionIdResponse*)q;
		break;
	case SOAP_TYPE_C1_contest1__GetSessionId:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct contest1__GetSessionId type=%d location=%p object=%p\n", t, p, q));
		*(struct contest1__GetSessionId*)p = *(struct contest1__GetSessionId*)q;
		break;
	case SOAP_TYPE_C1_contest1__AddAndGetLogSummaryResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct contest1__AddAndGetLogSummaryResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct contest1__AddAndGetLogSummaryResponse*)p = *(struct contest1__AddAndGetLogSummaryResponse*)q;
		break;
	case SOAP_TYPE_C1_contest1__AddAndGetLogSummary:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct contest1__AddAndGetLogSummary type=%d location=%p object=%p\n", t, p, q));
		*(struct contest1__AddAndGetLogSummary*)p = *(struct contest1__AddAndGetLogSummary*)q;
		break;
	case SOAP_TYPE_C1_contest1__addAndGetQsosResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct contest1__addAndGetQsosResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct contest1__addAndGetQsosResponse*)p = *(struct contest1__addAndGetQsosResponse*)q;
		break;
	case SOAP_TYPE_C1_contest1__addAndGetQsos:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct contest1__addAndGetQsos type=%d location=%p object=%p\n", t, p, q));
		*(struct contest1__addAndGetQsos*)p = *(struct contest1__addAndGetQsos*)q;
		break;
	case SOAP_TYPE_C1_contest1__getQsosByKeyArrayResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct contest1__getQsosByKeyArrayResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct contest1__getQsosByKeyArrayResponse*)p = *(struct contest1__getQsosByKeyArrayResponse*)q;
		break;
	case SOAP_TYPE_C1_contest1__getQsosByKeyArray:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct contest1__getQsosByKeyArray type=%d location=%p object=%p\n", t, p, q));
		*(struct contest1__getQsosByKeyArray*)p = *(struct contest1__getQsosByKeyArray*)q;
		break;
	case SOAP_TYPE_C1_contest1__ColumnNamesToIndicesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct contest1__ColumnNamesToIndicesResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct contest1__ColumnNamesToIndicesResponse*)p = *(struct contest1__ColumnNamesToIndicesResponse*)q;
		break;
	case SOAP_TYPE_C1_contest1__ColumnNamesToIndices:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct contest1__ColumnNamesToIndices type=%d location=%p object=%p\n", t, p, q));
		*(struct contest1__ColumnNamesToIndices*)p = *(struct contest1__ColumnNamesToIndices*)q;
		break;
	case SOAP_TYPE_C1_contest1__ExchangeFrequenciesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct contest1__ExchangeFrequenciesResponse type=%d location=%p object=%p\n", t, p, q));
		*(struct contest1__ExchangeFrequenciesResponse*)p = *(struct contest1__ExchangeFrequenciesResponse*)q;
		break;
	case SOAP_TYPE_C1_contest1__ExchangeFrequencies:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct contest1__ExchangeFrequencies type=%d location=%p object=%p\n", t, p, q));
		*(struct contest1__ExchangeFrequencies*)p = *(struct contest1__ExchangeFrequencies*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C1_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C1_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C1_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C1_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C1_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_C1_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_C1_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_C1_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_C1_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_C1_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{
	a = soap_indouble(soap, tag, a, type, SOAP_TYPE_C1_double);
	return a;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n)
{
	double *a = static_cast<double *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(double)));
	for (double *p = a; p && n--; ++p)
		soap_default_double(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	if (soap_out_double(soap, tag ? tag : "double", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_C1_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_C1_std__string, sizeof(std::string), soap->type, soap->arrayType, C1_instantiate, C1_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_C1_std__string, sizeof(std::string), soap->type, soap->arrayType, C1_instantiate, C1_fbase), 0, SOAP_TYPE_C1_std__string, SOAP_TYPE_C1_std__string, sizeof(std::string), 0, C1_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_std__string, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest2__ArrayOfRigFrequency::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTocontest2__RigFrequency(soap, &this->contest2__ArrayOfRigFrequency::rf_USCOREel);
}

void contest2__ArrayOfRigFrequency::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTocontest2__RigFrequency(soap, &this->contest2__ArrayOfRigFrequency::rf_USCOREel);
#endif
}

int contest2__ArrayOfRigFrequency::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest2__ArrayOfRigFrequency(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__ArrayOfRigFrequency(struct soap *soap, const char *tag, int id, const contest2__ArrayOfRigFrequency *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest2__ArrayOfRigFrequency), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTocontest2__RigFrequency(soap, "rf_el", -1, &a->contest2__ArrayOfRigFrequency::rf_USCOREel, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest2__ArrayOfRigFrequency::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest2__ArrayOfRigFrequency(soap, tag, this, type);
}

SOAP_FMAC3 contest2__ArrayOfRigFrequency * SOAP_FMAC4 soap_in_contest2__ArrayOfRigFrequency(struct soap *soap, const char *tag, contest2__ArrayOfRigFrequency *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest2__ArrayOfRigFrequency*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest2__ArrayOfRigFrequency, sizeof(contest2__ArrayOfRigFrequency), soap->type, soap->arrayType, C1_instantiate, C1_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C1_contest2__ArrayOfRigFrequency)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (contest2__ArrayOfRigFrequency *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTocontest2__RigFrequency(soap, "rf_el", &a->contest2__ArrayOfRigFrequency::rf_USCOREel, "contest2:RigFrequency"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest2__ArrayOfRigFrequency *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest2__ArrayOfRigFrequency, SOAP_TYPE_C1_contest2__ArrayOfRigFrequency, sizeof(contest2__ArrayOfRigFrequency), 0, C1_finsert, C1_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 contest2__ArrayOfRigFrequency * SOAP_FMAC2 soap_instantiate_contest2__ArrayOfRigFrequency(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest2__ArrayOfRigFrequency(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest2__ArrayOfRigFrequency *p;
	size_t k = sizeof(contest2__ArrayOfRigFrequency);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_contest2__ArrayOfRigFrequency, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest2__ArrayOfRigFrequency);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest2__ArrayOfRigFrequency, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest2__ArrayOfRigFrequency location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest2__ArrayOfRigFrequency::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest2__ArrayOfRigFrequency(soap, tag ? tag : "contest2:ArrayOfRigFrequency", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest2__ArrayOfRigFrequency::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest2__ArrayOfRigFrequency(soap, this, tag, type);
}

SOAP_FMAC3 contest2__ArrayOfRigFrequency * SOAP_FMAC4 soap_get_contest2__ArrayOfRigFrequency(struct soap *soap, contest2__ArrayOfRigFrequency *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest2__ArrayOfRigFrequency(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest2__RigFrequency::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->contest2__RigFrequency::station);
	soap_default_int(soap, &this->contest2__RigFrequency::networkLetter);
	soap_default_std__string(soap, &this->contest2__RigFrequency::label);
	soap_default_int(soap, &this->contest2__RigFrequency::rigNumber);
	soap_default_double(soap, &this->contest2__RigFrequency::xmitFreq);
	soap_default_double(soap, &this->contest2__RigFrequency::recvFreq);
	soap_default_int(soap, &this->contest2__RigFrequency::mode);
}

void contest2__RigFrequency::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->contest2__RigFrequency::station);
	soap_serialize_std__string(soap, &this->contest2__RigFrequency::label);
#endif
}

int contest2__RigFrequency::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest2__RigFrequency(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__RigFrequency(struct soap *soap, const char *tag, int id, const contest2__RigFrequency *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest2__RigFrequency), type))
		return soap->error;
	if (soap_out_std__string(soap, "station", -1, &a->contest2__RigFrequency::station, ""))
		return soap->error;
	if (soap_out_int(soap, "networkLetter", -1, &a->contest2__RigFrequency::networkLetter, ""))
		return soap->error;
	if (soap_out_std__string(soap, "label", -1, &a->contest2__RigFrequency::label, ""))
		return soap->error;
	if (soap_out_int(soap, "rigNumber", -1, &a->contest2__RigFrequency::rigNumber, ""))
		return soap->error;
	if (soap_out_double(soap, "xmitFreq", -1, &a->contest2__RigFrequency::xmitFreq, ""))
		return soap->error;
	if (soap_out_double(soap, "recvFreq", -1, &a->contest2__RigFrequency::recvFreq, ""))
		return soap->error;
	if (soap_out_int(soap, "mode", -1, &a->contest2__RigFrequency::mode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest2__RigFrequency::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest2__RigFrequency(soap, tag, this, type);
}

SOAP_FMAC3 contest2__RigFrequency * SOAP_FMAC4 soap_in_contest2__RigFrequency(struct soap *soap, const char *tag, contest2__RigFrequency *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest2__RigFrequency*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest2__RigFrequency, sizeof(contest2__RigFrequency), soap->type, soap->arrayType, C1_instantiate, C1_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C1_contest2__RigFrequency)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (contest2__RigFrequency *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_station1 = 1;
	size_t soap_flag_networkLetter1 = 1;
	size_t soap_flag_label1 = 1;
	size_t soap_flag_rigNumber1 = 1;
	size_t soap_flag_xmitFreq1 = 1;
	size_t soap_flag_recvFreq1 = 1;
	size_t soap_flag_mode1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_station1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "station", &a->contest2__RigFrequency::station, "xsd:string"))
				{	soap_flag_station1--;
					continue;
				}
			}
			if (soap_flag_networkLetter1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "networkLetter", &a->contest2__RigFrequency::networkLetter, "xsd:int"))
				{	soap_flag_networkLetter1--;
					continue;
				}
			}
			if (soap_flag_label1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "label", &a->contest2__RigFrequency::label, "xsd:string"))
				{	soap_flag_label1--;
					continue;
				}
			}
			if (soap_flag_rigNumber1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "rigNumber", &a->contest2__RigFrequency::rigNumber, "xsd:int"))
				{	soap_flag_rigNumber1--;
					continue;
				}
			}
			if (soap_flag_xmitFreq1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_double(soap, "xmitFreq", &a->contest2__RigFrequency::xmitFreq, "xsd:double"))
				{	soap_flag_xmitFreq1--;
					continue;
				}
			}
			if (soap_flag_recvFreq1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_double(soap, "recvFreq", &a->contest2__RigFrequency::recvFreq, "xsd:double"))
				{	soap_flag_recvFreq1--;
					continue;
				}
			}
			if (soap_flag_mode1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "mode", &a->contest2__RigFrequency::mode, "xsd:int"))
				{	soap_flag_mode1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_station1 > 0 || soap_flag_networkLetter1 > 0 || soap_flag_label1 > 0 || soap_flag_rigNumber1 > 0 || soap_flag_xmitFreq1 > 0 || soap_flag_recvFreq1 > 0 || soap_flag_mode1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (contest2__RigFrequency *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest2__RigFrequency, SOAP_TYPE_C1_contest2__RigFrequency, sizeof(contest2__RigFrequency), 0, C1_finsert, C1_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 contest2__RigFrequency * SOAP_FMAC2 soap_instantiate_contest2__RigFrequency(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest2__RigFrequency(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest2__RigFrequency *p;
	size_t k = sizeof(contest2__RigFrequency);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_contest2__RigFrequency, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest2__RigFrequency);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest2__RigFrequency, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest2__RigFrequency location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest2__RigFrequency::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest2__RigFrequency(soap, tag ? tag : "contest2:RigFrequency", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest2__RigFrequency::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest2__RigFrequency(soap, this, tag, type);
}

SOAP_FMAC3 contest2__RigFrequency * SOAP_FMAC4 soap_get_contest2__RigFrequency(struct soap *soap, contest2__RigFrequency *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest2__RigFrequency(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest2__LogSummary::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->contest2__LogSummary::logState);
	this->contest2__LogSummary::logSummaryIds = NULL;
}

void contest2__LogSummary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTocontest2__ArrayOfQsoIdVersion(soap, &this->contest2__LogSummary::logSummaryIds);
#endif
}

int contest2__LogSummary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest2__LogSummary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__LogSummary(struct soap *soap, const char *tag, int id, const contest2__LogSummary *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest2__LogSummary), type))
		return soap->error;
	if (soap_out_int(soap, "logState", -1, &a->contest2__LogSummary::logState, ""))
		return soap->error;
	if (!a->contest2__LogSummary::logSummaryIds)
	{	if (soap_element_empty(soap, "logSummaryIds", 0, NULL))
			return soap->error;
	}
	else if (soap_out_PointerTocontest2__ArrayOfQsoIdVersion(soap, "logSummaryIds", -1, &a->contest2__LogSummary::logSummaryIds, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest2__LogSummary::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest2__LogSummary(soap, tag, this, type);
}

SOAP_FMAC3 contest2__LogSummary * SOAP_FMAC4 soap_in_contest2__LogSummary(struct soap *soap, const char *tag, contest2__LogSummary *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest2__LogSummary*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest2__LogSummary, sizeof(contest2__LogSummary), soap->type, soap->arrayType, C1_instantiate, C1_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C1_contest2__LogSummary)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (contest2__LogSummary *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_logState1 = 1;
	size_t soap_flag_logSummaryIds1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_logState1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "logState", &a->contest2__LogSummary::logState, "xsd:int"))
				{	soap_flag_logState1--;
					continue;
				}
			}
			if (soap_flag_logSummaryIds1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest2__ArrayOfQsoIdVersion(soap, "logSummaryIds", &a->contest2__LogSummary::logSummaryIds, "contest2:ArrayOfQsoIdVersion"))
				{	soap_flag_logSummaryIds1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_logState1 > 0 || !a->contest2__LogSummary::logSummaryIds))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (contest2__LogSummary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest2__LogSummary, SOAP_TYPE_C1_contest2__LogSummary, sizeof(contest2__LogSummary), 0, C1_finsert, C1_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 contest2__LogSummary * SOAP_FMAC2 soap_instantiate_contest2__LogSummary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest2__LogSummary(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest2__LogSummary *p;
	size_t k = sizeof(contest2__LogSummary);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_contest2__LogSummary, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest2__LogSummary);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest2__LogSummary, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest2__LogSummary location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest2__LogSummary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest2__LogSummary(soap, tag ? tag : "contest2:LogSummary", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest2__LogSummary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest2__LogSummary(soap, this, tag, type);
}

SOAP_FMAC3 contest2__LogSummary * SOAP_FMAC4 soap_get_contest2__LogSummary(struct soap *soap, contest2__LogSummary *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest2__LogSummary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest2__ArrayOfQsoIdVersion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(soap, &this->contest2__ArrayOfQsoIdVersion::id_USCOREel);
}

void contest2__ArrayOfQsoIdVersion::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(soap, &this->contest2__ArrayOfQsoIdVersion::id_USCOREel);
#endif
}

int contest2__ArrayOfQsoIdVersion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest2__ArrayOfQsoIdVersion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__ArrayOfQsoIdVersion(struct soap *soap, const char *tag, int id, const contest2__ArrayOfQsoIdVersion *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(soap, "id_el", -1, &a->contest2__ArrayOfQsoIdVersion::id_USCOREel, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest2__ArrayOfQsoIdVersion::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest2__ArrayOfQsoIdVersion(soap, tag, this, type);
}

SOAP_FMAC3 contest2__ArrayOfQsoIdVersion * SOAP_FMAC4 soap_in_contest2__ArrayOfQsoIdVersion(struct soap *soap, const char *tag, contest2__ArrayOfQsoIdVersion *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest2__ArrayOfQsoIdVersion*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion, sizeof(contest2__ArrayOfQsoIdVersion), soap->type, soap->arrayType, C1_instantiate, C1_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (contest2__ArrayOfQsoIdVersion *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(soap, "id_el", &a->contest2__ArrayOfQsoIdVersion::id_USCOREel, "contest2:QsoIdVersion"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest2__ArrayOfQsoIdVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion, SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion, sizeof(contest2__ArrayOfQsoIdVersion), 0, C1_finsert, C1_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 contest2__ArrayOfQsoIdVersion * SOAP_FMAC2 soap_instantiate_contest2__ArrayOfQsoIdVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest2__ArrayOfQsoIdVersion(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest2__ArrayOfQsoIdVersion *p;
	size_t k = sizeof(contest2__ArrayOfQsoIdVersion);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest2__ArrayOfQsoIdVersion);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest2__ArrayOfQsoIdVersion, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest2__ArrayOfQsoIdVersion location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest2__ArrayOfQsoIdVersion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest2__ArrayOfQsoIdVersion(soap, tag ? tag : "contest2:ArrayOfQsoIdVersion", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest2__ArrayOfQsoIdVersion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest2__ArrayOfQsoIdVersion(soap, this, tag, type);
}

SOAP_FMAC3 contest2__ArrayOfQsoIdVersion * SOAP_FMAC4 soap_get_contest2__ArrayOfQsoIdVersion(struct soap *soap, contest2__ArrayOfQsoIdVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest2__ArrayOfQsoIdVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest2__QsoIdVersion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->contest2__QsoIdVersion::version);
	soap_default_std__string(soap, &this->contest2__QsoIdVersion::updatedBy);
	soap_default_std__string(soap, &this->contest2__QsoIdVersion::id);
}

void contest2__QsoIdVersion::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->contest2__QsoIdVersion::updatedBy);
	soap_serialize_std__string(soap, &this->contest2__QsoIdVersion::id);
#endif
}

int contest2__QsoIdVersion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest2__QsoIdVersion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__QsoIdVersion(struct soap *soap, const char *tag, int id, const contest2__QsoIdVersion *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest2__QsoIdVersion), type))
		return soap->error;
	if (soap_out_int(soap, "version", -1, &a->contest2__QsoIdVersion::version, ""))
		return soap->error;
	if (soap_out_std__string(soap, "updatedBy", -1, &a->contest2__QsoIdVersion::updatedBy, ""))
		return soap->error;
	if (soap_out_std__string(soap, "id", -1, &a->contest2__QsoIdVersion::id, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest2__QsoIdVersion::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest2__QsoIdVersion(soap, tag, this, type);
}

SOAP_FMAC3 contest2__QsoIdVersion * SOAP_FMAC4 soap_in_contest2__QsoIdVersion(struct soap *soap, const char *tag, contest2__QsoIdVersion *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest2__QsoIdVersion*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest2__QsoIdVersion, sizeof(contest2__QsoIdVersion), soap->type, soap->arrayType, C1_instantiate, C1_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C1_contest2__QsoIdVersion)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (contest2__QsoIdVersion *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_version1 = 1;
	size_t soap_flag_updatedBy1 = 1;
	size_t soap_flag_id1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_version1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "version", &a->contest2__QsoIdVersion::version, "xsd:int"))
				{	soap_flag_version1--;
					continue;
				}
			}
			if (soap_flag_updatedBy1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "updatedBy", &a->contest2__QsoIdVersion::updatedBy, "xsd:string"))
				{	soap_flag_updatedBy1--;
					continue;
				}
			}
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "id", &a->contest2__QsoIdVersion::id, "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_version1 > 0 || soap_flag_updatedBy1 > 0 || soap_flag_id1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (contest2__QsoIdVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest2__QsoIdVersion, SOAP_TYPE_C1_contest2__QsoIdVersion, sizeof(contest2__QsoIdVersion), 0, C1_finsert, C1_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 contest2__QsoIdVersion * SOAP_FMAC2 soap_instantiate_contest2__QsoIdVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest2__QsoIdVersion(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest2__QsoIdVersion *p;
	size_t k = sizeof(contest2__QsoIdVersion);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_contest2__QsoIdVersion, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest2__QsoIdVersion);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest2__QsoIdVersion, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest2__QsoIdVersion location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest2__QsoIdVersion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest2__QsoIdVersion(soap, tag ? tag : "contest2:QsoIdVersion", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest2__QsoIdVersion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest2__QsoIdVersion(soap, this, tag, type);
}

SOAP_FMAC3 contest2__QsoIdVersion * SOAP_FMAC4 soap_get_contest2__QsoIdVersion(struct soap *soap, contest2__QsoIdVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest2__QsoIdVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest2__QsoUpdate::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->contest2__QsoUpdate::qsoArray = NULL;
	soap_default_int(soap, &this->contest2__QsoUpdate::logState);
}

void contest2__QsoUpdate::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTocontest2__ArrayOfQso(soap, &this->contest2__QsoUpdate::qsoArray);
#endif
}

int contest2__QsoUpdate::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest2__QsoUpdate(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__QsoUpdate(struct soap *soap, const char *tag, int id, const contest2__QsoUpdate *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest2__QsoUpdate), type))
		return soap->error;
	if (!a->contest2__QsoUpdate::qsoArray)
	{	if (soap_element_empty(soap, "qsoArray", 0, NULL))
			return soap->error;
	}
	else if (soap_out_PointerTocontest2__ArrayOfQso(soap, "qsoArray", -1, &a->contest2__QsoUpdate::qsoArray, ""))
		return soap->error;
	if (soap_out_int(soap, "logState", -1, &a->contest2__QsoUpdate::logState, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest2__QsoUpdate::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest2__QsoUpdate(soap, tag, this, type);
}

SOAP_FMAC3 contest2__QsoUpdate * SOAP_FMAC4 soap_in_contest2__QsoUpdate(struct soap *soap, const char *tag, contest2__QsoUpdate *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest2__QsoUpdate*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest2__QsoUpdate, sizeof(contest2__QsoUpdate), soap->type, soap->arrayType, C1_instantiate, C1_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C1_contest2__QsoUpdate)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (contest2__QsoUpdate *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_qsoArray1 = 1;
	size_t soap_flag_logState1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_qsoArray1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest2__ArrayOfQso(soap, "qsoArray", &a->contest2__QsoUpdate::qsoArray, "contest2:ArrayOfQso"))
				{	soap_flag_qsoArray1--;
					continue;
				}
			}
			if (soap_flag_logState1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "logState", &a->contest2__QsoUpdate::logState, "xsd:int"))
				{	soap_flag_logState1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->contest2__QsoUpdate::qsoArray || soap_flag_logState1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (contest2__QsoUpdate *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest2__QsoUpdate, SOAP_TYPE_C1_contest2__QsoUpdate, sizeof(contest2__QsoUpdate), 0, C1_finsert, C1_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 contest2__QsoUpdate * SOAP_FMAC2 soap_instantiate_contest2__QsoUpdate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest2__QsoUpdate(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest2__QsoUpdate *p;
	size_t k = sizeof(contest2__QsoUpdate);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_contest2__QsoUpdate, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest2__QsoUpdate);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest2__QsoUpdate, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest2__QsoUpdate location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest2__QsoUpdate::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest2__QsoUpdate(soap, tag ? tag : "contest2:QsoUpdate", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest2__QsoUpdate::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest2__QsoUpdate(soap, this, tag, type);
}

SOAP_FMAC3 contest2__QsoUpdate * SOAP_FMAC4 soap_get_contest2__QsoUpdate(struct soap *soap, contest2__QsoUpdate *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest2__QsoUpdate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest2__ArrayOfQso::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerTocontest2__Qso(soap, &this->contest2__ArrayOfQso::qso_USCOREel);
}

void contest2__ArrayOfQso::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTocontest2__Qso(soap, &this->contest2__ArrayOfQso::qso_USCOREel);
#endif
}

int contest2__ArrayOfQso::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest2__ArrayOfQso(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__ArrayOfQso(struct soap *soap, const char *tag, int id, const contest2__ArrayOfQso *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest2__ArrayOfQso), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTocontest2__Qso(soap, "qso_el", -1, &a->contest2__ArrayOfQso::qso_USCOREel, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest2__ArrayOfQso::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest2__ArrayOfQso(soap, tag, this, type);
}

SOAP_FMAC3 contest2__ArrayOfQso * SOAP_FMAC4 soap_in_contest2__ArrayOfQso(struct soap *soap, const char *tag, contest2__ArrayOfQso *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest2__ArrayOfQso*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest2__ArrayOfQso, sizeof(contest2__ArrayOfQso), soap->type, soap->arrayType, C1_instantiate, C1_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C1_contest2__ArrayOfQso)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (contest2__ArrayOfQso *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTocontest2__Qso(soap, "qso_el", &a->contest2__ArrayOfQso::qso_USCOREel, "contest2:Qso"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest2__ArrayOfQso *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest2__ArrayOfQso, SOAP_TYPE_C1_contest2__ArrayOfQso, sizeof(contest2__ArrayOfQso), 0, C1_finsert, C1_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 contest2__ArrayOfQso * SOAP_FMAC2 soap_instantiate_contest2__ArrayOfQso(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest2__ArrayOfQso(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest2__ArrayOfQso *p;
	size_t k = sizeof(contest2__ArrayOfQso);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_contest2__ArrayOfQso, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest2__ArrayOfQso);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest2__ArrayOfQso, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest2__ArrayOfQso location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest2__ArrayOfQso::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest2__ArrayOfQso(soap, tag ? tag : "contest2:ArrayOfQso", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest2__ArrayOfQso::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest2__ArrayOfQso(soap, this, tag, type);
}

SOAP_FMAC3 contest2__ArrayOfQso * SOAP_FMAC4 soap_get_contest2__ArrayOfQso(struct soap *soap, contest2__ArrayOfQso *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest2__ArrayOfQso(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest2__Qso::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->contest2__Qso::time64H);
	soap_default_int(soap, &this->contest2__Qso::time64L);
	soap_default_double(soap, &this->contest2__Qso::xmitFreq);
	soap_default_double(soap, &this->contest2__Qso::recvFreq);
	soap_default_int(soap, &this->contest2__Qso::band);
	soap_default_std__string(soap, &this->contest2__Qso::station);
	soap_default_int(soap, &this->contest2__Qso::mode);
	soap_default_int(soap, &this->contest2__Qso::dupe);
	soap_default_int(soap, &this->contest2__Qso::serial);
	this->contest2__Qso::qsoparts = NULL;
	soap_default_int(soap, &this->contest2__Qso::version);
	soap_default_std__string(soap, &this->contest2__Qso::idKey);
	soap_default_std__string(soap, &this->contest2__Qso::updatedBy);
}

void contest2__Qso::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->contest2__Qso::station);
	soap_serialize_PointerTocontest2__ArrayOfstring(soap, &this->contest2__Qso::qsoparts);
	soap_serialize_std__string(soap, &this->contest2__Qso::idKey);
	soap_serialize_std__string(soap, &this->contest2__Qso::updatedBy);
#endif
}

int contest2__Qso::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest2__Qso(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__Qso(struct soap *soap, const char *tag, int id, const contest2__Qso *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest2__Qso), type))
		return soap->error;
	if (soap_out_int(soap, "time64H", -1, &a->contest2__Qso::time64H, ""))
		return soap->error;
	if (soap_out_int(soap, "time64L", -1, &a->contest2__Qso::time64L, ""))
		return soap->error;
	if (soap_out_double(soap, "xmitFreq", -1, &a->contest2__Qso::xmitFreq, ""))
		return soap->error;
	if (soap_out_double(soap, "recvFreq", -1, &a->contest2__Qso::recvFreq, ""))
		return soap->error;
	if (soap_out_int(soap, "band", -1, &a->contest2__Qso::band, ""))
		return soap->error;
	if (soap_out_std__string(soap, "station", -1, &a->contest2__Qso::station, ""))
		return soap->error;
	if (soap_out_int(soap, "mode", -1, &a->contest2__Qso::mode, ""))
		return soap->error;
	if (soap_out_int(soap, "dupe", -1, &a->contest2__Qso::dupe, ""))
		return soap->error;
	if (soap_out_int(soap, "serial", -1, &a->contest2__Qso::serial, ""))
		return soap->error;
	if (!a->contest2__Qso::qsoparts)
	{	if (soap_element_empty(soap, "qsoparts", 0, NULL))
			return soap->error;
	}
	else if (soap_out_PointerTocontest2__ArrayOfstring(soap, "qsoparts", -1, &a->contest2__Qso::qsoparts, ""))
		return soap->error;
	if (soap_out_int(soap, "version", -1, &a->contest2__Qso::version, ""))
		return soap->error;
	if (soap_out_std__string(soap, "idKey", -1, &a->contest2__Qso::idKey, ""))
		return soap->error;
	if (soap_out_std__string(soap, "updatedBy", -1, &a->contest2__Qso::updatedBy, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest2__Qso::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest2__Qso(soap, tag, this, type);
}

SOAP_FMAC3 contest2__Qso * SOAP_FMAC4 soap_in_contest2__Qso(struct soap *soap, const char *tag, contest2__Qso *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest2__Qso*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest2__Qso, sizeof(contest2__Qso), soap->type, soap->arrayType, C1_instantiate, C1_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C1_contest2__Qso)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (contest2__Qso *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_time64H1 = 1;
	size_t soap_flag_time64L1 = 1;
	size_t soap_flag_xmitFreq1 = 1;
	size_t soap_flag_recvFreq1 = 1;
	size_t soap_flag_band1 = 1;
	size_t soap_flag_station1 = 1;
	size_t soap_flag_mode1 = 1;
	size_t soap_flag_dupe1 = 1;
	size_t soap_flag_serial1 = 1;
	size_t soap_flag_qsoparts1 = 1;
	size_t soap_flag_version1 = 1;
	size_t soap_flag_idKey1 = 1;
	size_t soap_flag_updatedBy1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_time64H1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "time64H", &a->contest2__Qso::time64H, "xsd:int"))
				{	soap_flag_time64H1--;
					continue;
				}
			}
			if (soap_flag_time64L1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "time64L", &a->contest2__Qso::time64L, "xsd:int"))
				{	soap_flag_time64L1--;
					continue;
				}
			}
			if (soap_flag_xmitFreq1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_double(soap, "xmitFreq", &a->contest2__Qso::xmitFreq, "xsd:double"))
				{	soap_flag_xmitFreq1--;
					continue;
				}
			}
			if (soap_flag_recvFreq1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_double(soap, "recvFreq", &a->contest2__Qso::recvFreq, "xsd:double"))
				{	soap_flag_recvFreq1--;
					continue;
				}
			}
			if (soap_flag_band1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "band", &a->contest2__Qso::band, "xsd:int"))
				{	soap_flag_band1--;
					continue;
				}
			}
			if (soap_flag_station1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "station", &a->contest2__Qso::station, "xsd:string"))
				{	soap_flag_station1--;
					continue;
				}
			}
			if (soap_flag_mode1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "mode", &a->contest2__Qso::mode, "xsd:int"))
				{	soap_flag_mode1--;
					continue;
				}
			}
			if (soap_flag_dupe1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "dupe", &a->contest2__Qso::dupe, "xsd:int"))
				{	soap_flag_dupe1--;
					continue;
				}
			}
			if (soap_flag_serial1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "serial", &a->contest2__Qso::serial, "xsd:int"))
				{	soap_flag_serial1--;
					continue;
				}
			}
			if (soap_flag_qsoparts1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest2__ArrayOfstring(soap, "qsoparts", &a->contest2__Qso::qsoparts, "contest2:ArrayOfstring"))
				{	soap_flag_qsoparts1--;
					continue;
				}
			}
			if (soap_flag_version1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "version", &a->contest2__Qso::version, "xsd:int"))
				{	soap_flag_version1--;
					continue;
				}
			}
			if (soap_flag_idKey1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "idKey", &a->contest2__Qso::idKey, "xsd:string"))
				{	soap_flag_idKey1--;
					continue;
				}
			}
			if (soap_flag_updatedBy1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "updatedBy", &a->contest2__Qso::updatedBy, "xsd:string"))
				{	soap_flag_updatedBy1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_time64H1 > 0 || soap_flag_time64L1 > 0 || soap_flag_xmitFreq1 > 0 || soap_flag_recvFreq1 > 0 || soap_flag_band1 > 0 || soap_flag_station1 > 0 || soap_flag_mode1 > 0 || soap_flag_dupe1 > 0 || soap_flag_serial1 > 0 || !a->contest2__Qso::qsoparts || soap_flag_version1 > 0 || soap_flag_idKey1 > 0 || soap_flag_updatedBy1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (contest2__Qso *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest2__Qso, SOAP_TYPE_C1_contest2__Qso, sizeof(contest2__Qso), 0, C1_finsert, C1_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 contest2__Qso * SOAP_FMAC2 soap_instantiate_contest2__Qso(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest2__Qso(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest2__Qso *p;
	size_t k = sizeof(contest2__Qso);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_contest2__Qso, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest2__Qso);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest2__Qso, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest2__Qso location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest2__Qso::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest2__Qso(soap, tag ? tag : "contest2:Qso", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest2__Qso::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest2__Qso(soap, this, tag, type);
}

SOAP_FMAC3 contest2__Qso * SOAP_FMAC4 soap_get_contest2__Qso(struct soap *soap, contest2__Qso *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest2__Qso(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest2__ArrayOfint::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfint(soap, &this->contest2__ArrayOfint::int_USCOREel);
}

void contest2__ArrayOfint::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfint(soap, &this->contest2__ArrayOfint::int_USCOREel);
#endif
}

int contest2__ArrayOfint::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest2__ArrayOfint(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__ArrayOfint(struct soap *soap, const char *tag, int id, const contest2__ArrayOfint *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest2__ArrayOfint), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfint(soap, "int_el", -1, &a->contest2__ArrayOfint::int_USCOREel, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest2__ArrayOfint::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest2__ArrayOfint(soap, tag, this, type);
}

SOAP_FMAC3 contest2__ArrayOfint * SOAP_FMAC4 soap_in_contest2__ArrayOfint(struct soap *soap, const char *tag, contest2__ArrayOfint *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest2__ArrayOfint*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest2__ArrayOfint, sizeof(contest2__ArrayOfint), soap->type, soap->arrayType, C1_instantiate, C1_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C1_contest2__ArrayOfint)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (contest2__ArrayOfint *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfint(soap, "int_el", &a->contest2__ArrayOfint::int_USCOREel, "xsd:int"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest2__ArrayOfint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest2__ArrayOfint, SOAP_TYPE_C1_contest2__ArrayOfint, sizeof(contest2__ArrayOfint), 0, C1_finsert, C1_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 contest2__ArrayOfint * SOAP_FMAC2 soap_instantiate_contest2__ArrayOfint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest2__ArrayOfint(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest2__ArrayOfint *p;
	size_t k = sizeof(contest2__ArrayOfint);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_contest2__ArrayOfint, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest2__ArrayOfint);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest2__ArrayOfint, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest2__ArrayOfint location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest2__ArrayOfint::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest2__ArrayOfint(soap, tag ? tag : "contest2:ArrayOfint", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest2__ArrayOfint::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest2__ArrayOfint(soap, this, tag, type);
}

SOAP_FMAC3 contest2__ArrayOfint * SOAP_FMAC4 soap_get_contest2__ArrayOfint(struct soap *soap, contest2__ArrayOfint *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest2__ArrayOfint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest2__ArrayOfstring::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfstd__string(soap, &this->contest2__ArrayOfstring::str_USCOREel);
}

void contest2__ArrayOfstring::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfstd__string(soap, &this->contest2__ArrayOfstring::str_USCOREel);
#endif
}

int contest2__ArrayOfstring::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest2__ArrayOfstring(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest2__ArrayOfstring(struct soap *soap, const char *tag, int id, const contest2__ArrayOfstring *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest2__ArrayOfstring), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__string(soap, "str_el", -1, &a->contest2__ArrayOfstring::str_USCOREel, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest2__ArrayOfstring::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest2__ArrayOfstring(soap, tag, this, type);
}

SOAP_FMAC3 contest2__ArrayOfstring * SOAP_FMAC4 soap_in_contest2__ArrayOfstring(struct soap *soap, const char *tag, contest2__ArrayOfstring *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest2__ArrayOfstring*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest2__ArrayOfstring, sizeof(contest2__ArrayOfstring), soap->type, soap->arrayType, C1_instantiate, C1_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C1_contest2__ArrayOfstring)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (contest2__ArrayOfstring *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfstd__string(soap, "str_el", &a->contest2__ArrayOfstring::str_USCOREel, "xsd:string"))
					continue;
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest2__ArrayOfstring *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest2__ArrayOfstring, SOAP_TYPE_C1_contest2__ArrayOfstring, sizeof(contest2__ArrayOfstring), 0, C1_finsert, C1_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 contest2__ArrayOfstring * SOAP_FMAC2 soap_instantiate_contest2__ArrayOfstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest2__ArrayOfstring(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest2__ArrayOfstring *p;
	size_t k = sizeof(contest2__ArrayOfstring);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_contest2__ArrayOfstring, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest2__ArrayOfstring);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest2__ArrayOfstring, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest2__ArrayOfstring location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest2__ArrayOfstring::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest2__ArrayOfstring(soap, tag ? tag : "contest2:ArrayOfstring", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest2__ArrayOfstring::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest2__ArrayOfstring(soap, this, tag, type);
}

SOAP_FMAC3 contest2__ArrayOfstring * SOAP_FMAC4 soap_get_contest2__ArrayOfstring(struct soap *soap, contest2__ArrayOfstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest2__ArrayOfstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode;
	soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Fault*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_SOAP_ENV__Fault, SOAP_TYPE_C1_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, C1_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_SOAP_ENV__Fault, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Reason*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_SOAP_ENV__Reason, SOAP_TYPE_C1_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, C1_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_SOAP_ENV__Reason, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Detail*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, "fault", &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_SOAP_ENV__Detail, SOAP_TYPE_C1_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, C1_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_SOAP_ENV__Detail, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value;
	soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Code*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_SOAP_ENV__Code, SOAP_TYPE_C1_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, C1_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_SOAP_ENV__Code, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Header*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_SOAP_ENV__Header, SOAP_TYPE_C1_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, C1_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_SOAP_ENV__Header, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest1__ExchangeFrequencies(struct soap *soap, struct contest1__ExchangeFrequencies *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_IncomingFreqs = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest1__ExchangeFrequencies(struct soap *soap, const struct contest1__ExchangeFrequencies *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTocontest2__ArrayOfRigFrequency(soap, &a->_IncomingFreqs);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest1__ExchangeFrequencies(struct soap *soap, const char *tag, int id, const struct contest1__ExchangeFrequencies *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest1__ExchangeFrequencies), type))
		return soap->error;
	if (soap_out_PointerTocontest2__ArrayOfRigFrequency(soap, "IncomingFreqs", -1, &a->_IncomingFreqs, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest1__ExchangeFrequencies * SOAP_FMAC4 soap_in_contest1__ExchangeFrequencies(struct soap *soap, const char *tag, struct contest1__ExchangeFrequencies *a, const char *type)
{
	size_t soap_flag__IncomingFreqs = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct contest1__ExchangeFrequencies*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest1__ExchangeFrequencies, sizeof(struct contest1__ExchangeFrequencies), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_contest1__ExchangeFrequencies(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__IncomingFreqs && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest2__ArrayOfRigFrequency(soap, NULL, &a->_IncomingFreqs, "contest2:ArrayOfRigFrequency"))
				{	soap_flag__IncomingFreqs--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct contest1__ExchangeFrequencies *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest1__ExchangeFrequencies, SOAP_TYPE_C1_contest1__ExchangeFrequencies, sizeof(struct contest1__ExchangeFrequencies), 0, C1_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct contest1__ExchangeFrequencies * SOAP_FMAC2 soap_instantiate_contest1__ExchangeFrequencies(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest1__ExchangeFrequencies(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct contest1__ExchangeFrequencies *p;
	size_t k = sizeof(struct contest1__ExchangeFrequencies);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_contest1__ExchangeFrequencies, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct contest1__ExchangeFrequencies);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct contest1__ExchangeFrequencies, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct contest1__ExchangeFrequencies location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest1__ExchangeFrequencies(struct soap *soap, const struct contest1__ExchangeFrequencies *a, const char *tag, const char *type)
{
	if (soap_out_contest1__ExchangeFrequencies(soap, tag ? tag : "contest1:ExchangeFrequencies", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest1__ExchangeFrequencies * SOAP_FMAC4 soap_get_contest1__ExchangeFrequencies(struct soap *soap, struct contest1__ExchangeFrequencies *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest1__ExchangeFrequencies(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest1__ExchangeFrequenciesResponse(struct soap *soap, struct contest1__ExchangeFrequenciesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_response = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest1__ExchangeFrequenciesResponse(struct soap *soap, const struct contest1__ExchangeFrequenciesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTocontest2__ArrayOfRigFrequency(soap, &a->_response);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest1__ExchangeFrequenciesResponse(struct soap *soap, const char *tag, int id, const struct contest1__ExchangeFrequenciesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest1__ExchangeFrequenciesResponse), type))
		return soap->error;
	if (soap_out_PointerTocontest2__ArrayOfRigFrequency(soap, "response", -1, &a->_response, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest1__ExchangeFrequenciesResponse * SOAP_FMAC4 soap_in_contest1__ExchangeFrequenciesResponse(struct soap *soap, const char *tag, struct contest1__ExchangeFrequenciesResponse *a, const char *type)
{
	size_t soap_flag__response = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct contest1__ExchangeFrequenciesResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest1__ExchangeFrequenciesResponse, sizeof(struct contest1__ExchangeFrequenciesResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_contest1__ExchangeFrequenciesResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__response && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest2__ArrayOfRigFrequency(soap, NULL, &a->_response, "contest2:ArrayOfRigFrequency"))
				{	soap_flag__response--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct contest1__ExchangeFrequenciesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest1__ExchangeFrequenciesResponse, SOAP_TYPE_C1_contest1__ExchangeFrequenciesResponse, sizeof(struct contest1__ExchangeFrequenciesResponse), 0, C1_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct contest1__ExchangeFrequenciesResponse * SOAP_FMAC2 soap_instantiate_contest1__ExchangeFrequenciesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest1__ExchangeFrequenciesResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct contest1__ExchangeFrequenciesResponse *p;
	size_t k = sizeof(struct contest1__ExchangeFrequenciesResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_contest1__ExchangeFrequenciesResponse, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct contest1__ExchangeFrequenciesResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct contest1__ExchangeFrequenciesResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct contest1__ExchangeFrequenciesResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest1__ExchangeFrequenciesResponse(struct soap *soap, const struct contest1__ExchangeFrequenciesResponse *a, const char *tag, const char *type)
{
	if (soap_out_contest1__ExchangeFrequenciesResponse(soap, tag ? tag : "contest1:ExchangeFrequenciesResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest1__ExchangeFrequenciesResponse * SOAP_FMAC4 soap_get_contest1__ExchangeFrequenciesResponse(struct soap *soap, struct contest1__ExchangeFrequenciesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest1__ExchangeFrequenciesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest1__ColumnNamesToIndices(struct soap *soap, struct contest1__ColumnNamesToIndices *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_SessionId);
	a->_ColumnNames = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest1__ColumnNamesToIndices(struct soap *soap, const struct contest1__ColumnNamesToIndices *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &a->_SessionId);
	soap_serialize_PointerTocontest2__ArrayOfstring(soap, &a->_ColumnNames);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest1__ColumnNamesToIndices(struct soap *soap, const char *tag, int id, const struct contest1__ColumnNamesToIndices *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest1__ColumnNamesToIndices), type))
		return soap->error;
	if (soap_out_std__string(soap, "SessionId", -1, &a->_SessionId, ""))
		return soap->error;
	if (soap_out_PointerTocontest2__ArrayOfstring(soap, "ColumnNames", -1, &a->_ColumnNames, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest1__ColumnNamesToIndices * SOAP_FMAC4 soap_in_contest1__ColumnNamesToIndices(struct soap *soap, const char *tag, struct contest1__ColumnNamesToIndices *a, const char *type)
{
	size_t soap_flag__SessionId = 1;
	size_t soap_flag__ColumnNames = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct contest1__ColumnNamesToIndices*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest1__ColumnNamesToIndices, sizeof(struct contest1__ColumnNamesToIndices), soap->type, soap->arrayType, C1_instantiate, C1_fbase);
	if (!a)
		return NULL;
	soap_default_contest1__ColumnNamesToIndices(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__SessionId && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, NULL, &a->_SessionId, "xsd:string"))
				{	soap_flag__SessionId--;
					continue;
				}
			}
			if (soap_flag__ColumnNames && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest2__ArrayOfstring(soap, NULL, &a->_ColumnNames, "contest2:ArrayOfstring"))
				{	soap_flag__ColumnNames--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__SessionId > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct contest1__ColumnNamesToIndices *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest1__ColumnNamesToIndices, SOAP_TYPE_C1_contest1__ColumnNamesToIndices, sizeof(struct contest1__ColumnNamesToIndices), 0, C1_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct contest1__ColumnNamesToIndices * SOAP_FMAC2 soap_instantiate_contest1__ColumnNamesToIndices(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest1__ColumnNamesToIndices(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct contest1__ColumnNamesToIndices *p;
	size_t k = sizeof(struct contest1__ColumnNamesToIndices);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_contest1__ColumnNamesToIndices, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct contest1__ColumnNamesToIndices);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct contest1__ColumnNamesToIndices, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct contest1__ColumnNamesToIndices location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest1__ColumnNamesToIndices(struct soap *soap, const struct contest1__ColumnNamesToIndices *a, const char *tag, const char *type)
{
	if (soap_out_contest1__ColumnNamesToIndices(soap, tag ? tag : "contest1:ColumnNamesToIndices", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest1__ColumnNamesToIndices * SOAP_FMAC4 soap_get_contest1__ColumnNamesToIndices(struct soap *soap, struct contest1__ColumnNamesToIndices *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest1__ColumnNamesToIndices(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest1__ColumnNamesToIndicesResponse(struct soap *soap, struct contest1__ColumnNamesToIndicesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_response = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest1__ColumnNamesToIndicesResponse(struct soap *soap, const struct contest1__ColumnNamesToIndicesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTocontest2__ArrayOfint(soap, &a->_response);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest1__ColumnNamesToIndicesResponse(struct soap *soap, const char *tag, int id, const struct contest1__ColumnNamesToIndicesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest1__ColumnNamesToIndicesResponse), type))
		return soap->error;
	if (soap_out_PointerTocontest2__ArrayOfint(soap, "response", -1, &a->_response, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest1__ColumnNamesToIndicesResponse * SOAP_FMAC4 soap_in_contest1__ColumnNamesToIndicesResponse(struct soap *soap, const char *tag, struct contest1__ColumnNamesToIndicesResponse *a, const char *type)
{
	size_t soap_flag__response = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct contest1__ColumnNamesToIndicesResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest1__ColumnNamesToIndicesResponse, sizeof(struct contest1__ColumnNamesToIndicesResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_contest1__ColumnNamesToIndicesResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__response && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest2__ArrayOfint(soap, NULL, &a->_response, "contest2:ArrayOfint"))
				{	soap_flag__response--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct contest1__ColumnNamesToIndicesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest1__ColumnNamesToIndicesResponse, SOAP_TYPE_C1_contest1__ColumnNamesToIndicesResponse, sizeof(struct contest1__ColumnNamesToIndicesResponse), 0, C1_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct contest1__ColumnNamesToIndicesResponse * SOAP_FMAC2 soap_instantiate_contest1__ColumnNamesToIndicesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest1__ColumnNamesToIndicesResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct contest1__ColumnNamesToIndicesResponse *p;
	size_t k = sizeof(struct contest1__ColumnNamesToIndicesResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_contest1__ColumnNamesToIndicesResponse, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct contest1__ColumnNamesToIndicesResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct contest1__ColumnNamesToIndicesResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct contest1__ColumnNamesToIndicesResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest1__ColumnNamesToIndicesResponse(struct soap *soap, const struct contest1__ColumnNamesToIndicesResponse *a, const char *tag, const char *type)
{
	if (soap_out_contest1__ColumnNamesToIndicesResponse(soap, tag ? tag : "contest1:ColumnNamesToIndicesResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest1__ColumnNamesToIndicesResponse * SOAP_FMAC4 soap_get_contest1__ColumnNamesToIndicesResponse(struct soap *soap, struct contest1__ColumnNamesToIndicesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest1__ColumnNamesToIndicesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest1__getQsosByKeyArray(struct soap *soap, struct contest1__getQsosByKeyArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_SessionId);
	a->_QsoKeyArray = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest1__getQsosByKeyArray(struct soap *soap, const struct contest1__getQsosByKeyArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &a->_SessionId);
	soap_serialize_PointerTocontest2__ArrayOfstring(soap, &a->_QsoKeyArray);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest1__getQsosByKeyArray(struct soap *soap, const char *tag, int id, const struct contest1__getQsosByKeyArray *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest1__getQsosByKeyArray), type))
		return soap->error;
	if (soap_out_std__string(soap, "SessionId", -1, &a->_SessionId, ""))
		return soap->error;
	if (soap_out_PointerTocontest2__ArrayOfstring(soap, "QsoKeyArray", -1, &a->_QsoKeyArray, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest1__getQsosByKeyArray * SOAP_FMAC4 soap_in_contest1__getQsosByKeyArray(struct soap *soap, const char *tag, struct contest1__getQsosByKeyArray *a, const char *type)
{
	size_t soap_flag__SessionId = 1;
	size_t soap_flag__QsoKeyArray = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct contest1__getQsosByKeyArray*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest1__getQsosByKeyArray, sizeof(struct contest1__getQsosByKeyArray), soap->type, soap->arrayType, C1_instantiate, C1_fbase);
	if (!a)
		return NULL;
	soap_default_contest1__getQsosByKeyArray(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__SessionId && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, NULL, &a->_SessionId, "xsd:string"))
				{	soap_flag__SessionId--;
					continue;
				}
			}
			if (soap_flag__QsoKeyArray && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest2__ArrayOfstring(soap, NULL, &a->_QsoKeyArray, "contest2:ArrayOfstring"))
				{	soap_flag__QsoKeyArray--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__SessionId > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct contest1__getQsosByKeyArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest1__getQsosByKeyArray, SOAP_TYPE_C1_contest1__getQsosByKeyArray, sizeof(struct contest1__getQsosByKeyArray), 0, C1_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct contest1__getQsosByKeyArray * SOAP_FMAC2 soap_instantiate_contest1__getQsosByKeyArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest1__getQsosByKeyArray(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct contest1__getQsosByKeyArray *p;
	size_t k = sizeof(struct contest1__getQsosByKeyArray);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_contest1__getQsosByKeyArray, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct contest1__getQsosByKeyArray);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct contest1__getQsosByKeyArray, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct contest1__getQsosByKeyArray location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest1__getQsosByKeyArray(struct soap *soap, const struct contest1__getQsosByKeyArray *a, const char *tag, const char *type)
{
	if (soap_out_contest1__getQsosByKeyArray(soap, tag ? tag : "contest1:getQsosByKeyArray", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest1__getQsosByKeyArray * SOAP_FMAC4 soap_get_contest1__getQsosByKeyArray(struct soap *soap, struct contest1__getQsosByKeyArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest1__getQsosByKeyArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest1__getQsosByKeyArrayResponse(struct soap *soap, struct contest1__getQsosByKeyArrayResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_response = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest1__getQsosByKeyArrayResponse(struct soap *soap, const struct contest1__getQsosByKeyArrayResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTocontest2__QsoUpdate(soap, &a->_response);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest1__getQsosByKeyArrayResponse(struct soap *soap, const char *tag, int id, const struct contest1__getQsosByKeyArrayResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest1__getQsosByKeyArrayResponse), type))
		return soap->error;
	if (soap_out_PointerTocontest2__QsoUpdate(soap, "response", -1, &a->_response, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest1__getQsosByKeyArrayResponse * SOAP_FMAC4 soap_in_contest1__getQsosByKeyArrayResponse(struct soap *soap, const char *tag, struct contest1__getQsosByKeyArrayResponse *a, const char *type)
{
	size_t soap_flag__response = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct contest1__getQsosByKeyArrayResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest1__getQsosByKeyArrayResponse, sizeof(struct contest1__getQsosByKeyArrayResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_contest1__getQsosByKeyArrayResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__response && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest2__QsoUpdate(soap, NULL, &a->_response, "contest2:QsoUpdate"))
				{	soap_flag__response--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct contest1__getQsosByKeyArrayResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest1__getQsosByKeyArrayResponse, SOAP_TYPE_C1_contest1__getQsosByKeyArrayResponse, sizeof(struct contest1__getQsosByKeyArrayResponse), 0, C1_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct contest1__getQsosByKeyArrayResponse * SOAP_FMAC2 soap_instantiate_contest1__getQsosByKeyArrayResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest1__getQsosByKeyArrayResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct contest1__getQsosByKeyArrayResponse *p;
	size_t k = sizeof(struct contest1__getQsosByKeyArrayResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_contest1__getQsosByKeyArrayResponse, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct contest1__getQsosByKeyArrayResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct contest1__getQsosByKeyArrayResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct contest1__getQsosByKeyArrayResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest1__getQsosByKeyArrayResponse(struct soap *soap, const struct contest1__getQsosByKeyArrayResponse *a, const char *tag, const char *type)
{
	if (soap_out_contest1__getQsosByKeyArrayResponse(soap, tag ? tag : "contest1:getQsosByKeyArrayResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest1__getQsosByKeyArrayResponse * SOAP_FMAC4 soap_get_contest1__getQsosByKeyArrayResponse(struct soap *soap, struct contest1__getQsosByKeyArrayResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest1__getQsosByKeyArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest1__addAndGetQsos(struct soap *soap, struct contest1__addAndGetQsos *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_SessionId);
	a->_QsoAddArray = NULL;
	soap_default_int(soap, &a->_OldState);
	soap_default_int(soap, &a->_MaxRequested);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest1__addAndGetQsos(struct soap *soap, const struct contest1__addAndGetQsos *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &a->_SessionId);
	soap_serialize_PointerTocontest2__ArrayOfQso(soap, &a->_QsoAddArray);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest1__addAndGetQsos(struct soap *soap, const char *tag, int id, const struct contest1__addAndGetQsos *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest1__addAndGetQsos), type))
		return soap->error;
	if (soap_out_std__string(soap, "SessionId", -1, &a->_SessionId, ""))
		return soap->error;
	if (soap_out_PointerTocontest2__ArrayOfQso(soap, "QsoAddArray", -1, &a->_QsoAddArray, ""))
		return soap->error;
	if (soap_out_int(soap, "OldState", -1, &a->_OldState, ""))
		return soap->error;
	if (soap_out_int(soap, "MaxRequested", -1, &a->_MaxRequested, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest1__addAndGetQsos * SOAP_FMAC4 soap_in_contest1__addAndGetQsos(struct soap *soap, const char *tag, struct contest1__addAndGetQsos *a, const char *type)
{
	size_t soap_flag__SessionId = 1;
	size_t soap_flag__QsoAddArray = 1;
	size_t soap_flag__OldState = 1;
	size_t soap_flag__MaxRequested = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct contest1__addAndGetQsos*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest1__addAndGetQsos, sizeof(struct contest1__addAndGetQsos), soap->type, soap->arrayType, C1_instantiate, C1_fbase);
	if (!a)
		return NULL;
	soap_default_contest1__addAndGetQsos(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__SessionId && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, NULL, &a->_SessionId, "xsd:string"))
				{	soap_flag__SessionId--;
					continue;
				}
			}
			if (soap_flag__QsoAddArray && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest2__ArrayOfQso(soap, NULL, &a->_QsoAddArray, "contest2:ArrayOfQso"))
				{	soap_flag__QsoAddArray--;
					continue;
				}
			}
			if (soap_flag__OldState && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, NULL, &a->_OldState, "xsd:int"))
				{	soap_flag__OldState--;
					continue;
				}
			}
			if (soap_flag__MaxRequested && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, NULL, &a->_MaxRequested, "xsd:int"))
				{	soap_flag__MaxRequested--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__SessionId > 0 || soap_flag__OldState > 0 || soap_flag__MaxRequested > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct contest1__addAndGetQsos *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest1__addAndGetQsos, SOAP_TYPE_C1_contest1__addAndGetQsos, sizeof(struct contest1__addAndGetQsos), 0, C1_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct contest1__addAndGetQsos * SOAP_FMAC2 soap_instantiate_contest1__addAndGetQsos(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest1__addAndGetQsos(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct contest1__addAndGetQsos *p;
	size_t k = sizeof(struct contest1__addAndGetQsos);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_contest1__addAndGetQsos, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct contest1__addAndGetQsos);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct contest1__addAndGetQsos, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct contest1__addAndGetQsos location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest1__addAndGetQsos(struct soap *soap, const struct contest1__addAndGetQsos *a, const char *tag, const char *type)
{
	if (soap_out_contest1__addAndGetQsos(soap, tag ? tag : "contest1:addAndGetQsos", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest1__addAndGetQsos * SOAP_FMAC4 soap_get_contest1__addAndGetQsos(struct soap *soap, struct contest1__addAndGetQsos *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest1__addAndGetQsos(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest1__addAndGetQsosResponse(struct soap *soap, struct contest1__addAndGetQsosResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_response = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest1__addAndGetQsosResponse(struct soap *soap, const struct contest1__addAndGetQsosResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTocontest2__QsoUpdate(soap, &a->_response);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest1__addAndGetQsosResponse(struct soap *soap, const char *tag, int id, const struct contest1__addAndGetQsosResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest1__addAndGetQsosResponse), type))
		return soap->error;
	if (soap_out_PointerTocontest2__QsoUpdate(soap, "response", -1, &a->_response, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest1__addAndGetQsosResponse * SOAP_FMAC4 soap_in_contest1__addAndGetQsosResponse(struct soap *soap, const char *tag, struct contest1__addAndGetQsosResponse *a, const char *type)
{
	size_t soap_flag__response = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct contest1__addAndGetQsosResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest1__addAndGetQsosResponse, sizeof(struct contest1__addAndGetQsosResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_contest1__addAndGetQsosResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__response && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest2__QsoUpdate(soap, NULL, &a->_response, "contest2:QsoUpdate"))
				{	soap_flag__response--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct contest1__addAndGetQsosResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest1__addAndGetQsosResponse, SOAP_TYPE_C1_contest1__addAndGetQsosResponse, sizeof(struct contest1__addAndGetQsosResponse), 0, C1_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct contest1__addAndGetQsosResponse * SOAP_FMAC2 soap_instantiate_contest1__addAndGetQsosResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest1__addAndGetQsosResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct contest1__addAndGetQsosResponse *p;
	size_t k = sizeof(struct contest1__addAndGetQsosResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_contest1__addAndGetQsosResponse, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct contest1__addAndGetQsosResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct contest1__addAndGetQsosResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct contest1__addAndGetQsosResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest1__addAndGetQsosResponse(struct soap *soap, const struct contest1__addAndGetQsosResponse *a, const char *tag, const char *type)
{
	if (soap_out_contest1__addAndGetQsosResponse(soap, tag ? tag : "contest1:addAndGetQsosResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest1__addAndGetQsosResponse * SOAP_FMAC4 soap_get_contest1__addAndGetQsosResponse(struct soap *soap, struct contest1__addAndGetQsosResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest1__addAndGetQsosResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest1__AddAndGetLogSummary(struct soap *soap, struct contest1__AddAndGetLogSummary *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->_SessionId);
	a->_QsoAddArray = NULL;
	soap_default_int(soap, &a->_OldState);
	soap_default_int(soap, &a->_MaxRequested);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest1__AddAndGetLogSummary(struct soap *soap, const struct contest1__AddAndGetLogSummary *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &a->_SessionId);
	soap_serialize_PointerTocontest2__ArrayOfQso(soap, &a->_QsoAddArray);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest1__AddAndGetLogSummary(struct soap *soap, const char *tag, int id, const struct contest1__AddAndGetLogSummary *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest1__AddAndGetLogSummary), type))
		return soap->error;
	if (soap_out_std__string(soap, "SessionId", -1, &a->_SessionId, ""))
		return soap->error;
	if (soap_out_PointerTocontest2__ArrayOfQso(soap, "QsoAddArray", -1, &a->_QsoAddArray, ""))
		return soap->error;
	if (soap_out_int(soap, "OldState", -1, &a->_OldState, ""))
		return soap->error;
	if (soap_out_int(soap, "MaxRequested", -1, &a->_MaxRequested, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest1__AddAndGetLogSummary * SOAP_FMAC4 soap_in_contest1__AddAndGetLogSummary(struct soap *soap, const char *tag, struct contest1__AddAndGetLogSummary *a, const char *type)
{
	size_t soap_flag__SessionId = 1;
	size_t soap_flag__QsoAddArray = 1;
	size_t soap_flag__OldState = 1;
	size_t soap_flag__MaxRequested = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct contest1__AddAndGetLogSummary*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest1__AddAndGetLogSummary, sizeof(struct contest1__AddAndGetLogSummary), soap->type, soap->arrayType, C1_instantiate, C1_fbase);
	if (!a)
		return NULL;
	soap_default_contest1__AddAndGetLogSummary(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__SessionId && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, NULL, &a->_SessionId, "xsd:string"))
				{	soap_flag__SessionId--;
					continue;
				}
			}
			if (soap_flag__QsoAddArray && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest2__ArrayOfQso(soap, NULL, &a->_QsoAddArray, "contest2:ArrayOfQso"))
				{	soap_flag__QsoAddArray--;
					continue;
				}
			}
			if (soap_flag__OldState && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, NULL, &a->_OldState, "xsd:int"))
				{	soap_flag__OldState--;
					continue;
				}
			}
			if (soap_flag__MaxRequested && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, NULL, &a->_MaxRequested, "xsd:int"))
				{	soap_flag__MaxRequested--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag__SessionId > 0 || soap_flag__OldState > 0 || soap_flag__MaxRequested > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct contest1__AddAndGetLogSummary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest1__AddAndGetLogSummary, SOAP_TYPE_C1_contest1__AddAndGetLogSummary, sizeof(struct contest1__AddAndGetLogSummary), 0, C1_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct contest1__AddAndGetLogSummary * SOAP_FMAC2 soap_instantiate_contest1__AddAndGetLogSummary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest1__AddAndGetLogSummary(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct contest1__AddAndGetLogSummary *p;
	size_t k = sizeof(struct contest1__AddAndGetLogSummary);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_contest1__AddAndGetLogSummary, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct contest1__AddAndGetLogSummary);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct contest1__AddAndGetLogSummary, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct contest1__AddAndGetLogSummary location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest1__AddAndGetLogSummary(struct soap *soap, const struct contest1__AddAndGetLogSummary *a, const char *tag, const char *type)
{
	if (soap_out_contest1__AddAndGetLogSummary(soap, tag ? tag : "contest1:AddAndGetLogSummary", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest1__AddAndGetLogSummary * SOAP_FMAC4 soap_get_contest1__AddAndGetLogSummary(struct soap *soap, struct contest1__AddAndGetLogSummary *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest1__AddAndGetLogSummary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest1__AddAndGetLogSummaryResponse(struct soap *soap, struct contest1__AddAndGetLogSummaryResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->_response = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest1__AddAndGetLogSummaryResponse(struct soap *soap, const struct contest1__AddAndGetLogSummaryResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTocontest2__LogSummary(soap, &a->_response);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest1__AddAndGetLogSummaryResponse(struct soap *soap, const char *tag, int id, const struct contest1__AddAndGetLogSummaryResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest1__AddAndGetLogSummaryResponse), type))
		return soap->error;
	if (soap_out_PointerTocontest2__LogSummary(soap, "response", -1, &a->_response, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest1__AddAndGetLogSummaryResponse * SOAP_FMAC4 soap_in_contest1__AddAndGetLogSummaryResponse(struct soap *soap, const char *tag, struct contest1__AddAndGetLogSummaryResponse *a, const char *type)
{
	size_t soap_flag__response = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct contest1__AddAndGetLogSummaryResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest1__AddAndGetLogSummaryResponse, sizeof(struct contest1__AddAndGetLogSummaryResponse), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_contest1__AddAndGetLogSummaryResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag__response && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest2__LogSummary(soap, NULL, &a->_response, "contest2:LogSummary"))
				{	soap_flag__response--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct contest1__AddAndGetLogSummaryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest1__AddAndGetLogSummaryResponse, SOAP_TYPE_C1_contest1__AddAndGetLogSummaryResponse, sizeof(struct contest1__AddAndGetLogSummaryResponse), 0, C1_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct contest1__AddAndGetLogSummaryResponse * SOAP_FMAC2 soap_instantiate_contest1__AddAndGetLogSummaryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest1__AddAndGetLogSummaryResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct contest1__AddAndGetLogSummaryResponse *p;
	size_t k = sizeof(struct contest1__AddAndGetLogSummaryResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_contest1__AddAndGetLogSummaryResponse, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct contest1__AddAndGetLogSummaryResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct contest1__AddAndGetLogSummaryResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct contest1__AddAndGetLogSummaryResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest1__AddAndGetLogSummaryResponse(struct soap *soap, const struct contest1__AddAndGetLogSummaryResponse *a, const char *tag, const char *type)
{
	if (soap_out_contest1__AddAndGetLogSummaryResponse(soap, tag ? tag : "contest1:AddAndGetLogSummaryResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest1__AddAndGetLogSummaryResponse * SOAP_FMAC4 soap_get_contest1__AddAndGetLogSummaryResponse(struct soap *soap, struct contest1__AddAndGetLogSummaryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest1__AddAndGetLogSummaryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest1__GetSessionId(struct soap *soap, struct contest1__GetSessionId *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest1__GetSessionId(struct soap *soap, const struct contest1__GetSessionId *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest1__GetSessionId(struct soap *soap, const char *tag, int id, const struct contest1__GetSessionId *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest1__GetSessionId), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest1__GetSessionId * SOAP_FMAC4 soap_in_contest1__GetSessionId(struct soap *soap, const char *tag, struct contest1__GetSessionId *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct contest1__GetSessionId*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest1__GetSessionId, sizeof(struct contest1__GetSessionId), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_contest1__GetSessionId(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct contest1__GetSessionId *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest1__GetSessionId, SOAP_TYPE_C1_contest1__GetSessionId, sizeof(struct contest1__GetSessionId), 0, C1_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct contest1__GetSessionId * SOAP_FMAC2 soap_instantiate_contest1__GetSessionId(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest1__GetSessionId(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct contest1__GetSessionId *p;
	size_t k = sizeof(struct contest1__GetSessionId);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_contest1__GetSessionId, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct contest1__GetSessionId);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct contest1__GetSessionId, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct contest1__GetSessionId location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest1__GetSessionId(struct soap *soap, const struct contest1__GetSessionId *a, const char *tag, const char *type)
{
	if (soap_out_contest1__GetSessionId(soap, tag ? tag : "contest1:GetSessionId", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest1__GetSessionId * SOAP_FMAC4 soap_get_contest1__GetSessionId(struct soap *soap, struct contest1__GetSessionId *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest1__GetSessionId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_contest1__GetSessionIdResponse(struct soap *soap, struct contest1__GetSessionIdResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_std__string(soap, &a->response);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest1__GetSessionIdResponse(struct soap *soap, const struct contest1__GetSessionIdResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &a->response);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest1__GetSessionIdResponse(struct soap *soap, const char *tag, int id, const struct contest1__GetSessionIdResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C1_contest1__GetSessionIdResponse), type))
		return soap->error;
	if (soap_out_std__string(soap, "response", -1, &a->response, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct contest1__GetSessionIdResponse * SOAP_FMAC4 soap_in_contest1__GetSessionIdResponse(struct soap *soap, const char *tag, struct contest1__GetSessionIdResponse *a, const char *type)
{
	size_t soap_flag_response = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct contest1__GetSessionIdResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C1_contest1__GetSessionIdResponse, sizeof(struct contest1__GetSessionIdResponse), soap->type, soap->arrayType, C1_instantiate, C1_fbase);
	if (!a)
		return NULL;
	soap_default_contest1__GetSessionIdResponse(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_response && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "response", &a->response, "xsd:string"))
				{	soap_flag_response--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_response > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (struct contest1__GetSessionIdResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C1_contest1__GetSessionIdResponse, SOAP_TYPE_C1_contest1__GetSessionIdResponse, sizeof(struct contest1__GetSessionIdResponse), 0, C1_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct contest1__GetSessionIdResponse * SOAP_FMAC2 soap_instantiate_contest1__GetSessionIdResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest1__GetSessionIdResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct contest1__GetSessionIdResponse *p;
	size_t k = sizeof(struct contest1__GetSessionIdResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_contest1__GetSessionIdResponse, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct contest1__GetSessionIdResponse);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct contest1__GetSessionIdResponse, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct contest1__GetSessionIdResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest1__GetSessionIdResponse(struct soap *soap, const struct contest1__GetSessionIdResponse *a, const char *tag, const char *type)
{
	if (soap_out_contest1__GetSessionIdResponse(soap, tag ? tag : "contest1:GetSessionIdResponse", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct contest1__GetSessionIdResponse * SOAP_FMAC4 soap_get_contest1__GetSessionIdResponse(struct soap *soap, struct contest1__GetSessionIdResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest1__GetSessionIdResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__ArrayOfRigFrequency(struct soap *soap, contest2__ArrayOfRigFrequency *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_contest2__ArrayOfRigFrequency))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__ArrayOfRigFrequency(struct soap *soap, const char *tag, int id, contest2__ArrayOfRigFrequency *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_contest2__ArrayOfRigFrequency, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C1_contest2__ArrayOfRigFrequency ? type : NULL);
}

SOAP_FMAC3 contest2__ArrayOfRigFrequency ** SOAP_FMAC4 soap_in_PointerTocontest2__ArrayOfRigFrequency(struct soap *soap, const char *tag, contest2__ArrayOfRigFrequency **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest2__ArrayOfRigFrequency **)soap_malloc(soap, sizeof(contest2__ArrayOfRigFrequency *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest2__ArrayOfRigFrequency *)soap_instantiate_contest2__ArrayOfRigFrequency(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (contest2__ArrayOfRigFrequency **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_contest2__ArrayOfRigFrequency, sizeof(contest2__ArrayOfRigFrequency), 0, C1_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__ArrayOfRigFrequency(struct soap *soap, contest2__ArrayOfRigFrequency *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTocontest2__ArrayOfRigFrequency(soap, tag ? tag : "contest2:ArrayOfRigFrequency", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest2__ArrayOfRigFrequency ** SOAP_FMAC4 soap_get_PointerTocontest2__ArrayOfRigFrequency(struct soap *soap, contest2__ArrayOfRigFrequency **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest2__ArrayOfRigFrequency(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__ArrayOfint(struct soap *soap, contest2__ArrayOfint *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_contest2__ArrayOfint))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__ArrayOfint(struct soap *soap, const char *tag, int id, contest2__ArrayOfint *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_contest2__ArrayOfint, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C1_contest2__ArrayOfint ? type : NULL);
}

SOAP_FMAC3 contest2__ArrayOfint ** SOAP_FMAC4 soap_in_PointerTocontest2__ArrayOfint(struct soap *soap, const char *tag, contest2__ArrayOfint **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest2__ArrayOfint **)soap_malloc(soap, sizeof(contest2__ArrayOfint *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest2__ArrayOfint *)soap_instantiate_contest2__ArrayOfint(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (contest2__ArrayOfint **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_contest2__ArrayOfint, sizeof(contest2__ArrayOfint), 0, C1_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__ArrayOfint(struct soap *soap, contest2__ArrayOfint *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTocontest2__ArrayOfint(soap, tag ? tag : "contest2:ArrayOfint", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest2__ArrayOfint ** SOAP_FMAC4 soap_get_PointerTocontest2__ArrayOfint(struct soap *soap, contest2__ArrayOfint **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest2__ArrayOfint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__QsoUpdate(struct soap *soap, contest2__QsoUpdate *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_contest2__QsoUpdate))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__QsoUpdate(struct soap *soap, const char *tag, int id, contest2__QsoUpdate *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_contest2__QsoUpdate, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C1_contest2__QsoUpdate ? type : NULL);
}

SOAP_FMAC3 contest2__QsoUpdate ** SOAP_FMAC4 soap_in_PointerTocontest2__QsoUpdate(struct soap *soap, const char *tag, contest2__QsoUpdate **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest2__QsoUpdate **)soap_malloc(soap, sizeof(contest2__QsoUpdate *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest2__QsoUpdate *)soap_instantiate_contest2__QsoUpdate(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (contest2__QsoUpdate **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_contest2__QsoUpdate, sizeof(contest2__QsoUpdate), 0, C1_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__QsoUpdate(struct soap *soap, contest2__QsoUpdate *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTocontest2__QsoUpdate(soap, tag ? tag : "contest2:QsoUpdate", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest2__QsoUpdate ** SOAP_FMAC4 soap_get_PointerTocontest2__QsoUpdate(struct soap *soap, contest2__QsoUpdate **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest2__QsoUpdate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__LogSummary(struct soap *soap, contest2__LogSummary *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_contest2__LogSummary))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__LogSummary(struct soap *soap, const char *tag, int id, contest2__LogSummary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_contest2__LogSummary, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C1_contest2__LogSummary ? type : NULL);
}

SOAP_FMAC3 contest2__LogSummary ** SOAP_FMAC4 soap_in_PointerTocontest2__LogSummary(struct soap *soap, const char *tag, contest2__LogSummary **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest2__LogSummary **)soap_malloc(soap, sizeof(contest2__LogSummary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest2__LogSummary *)soap_instantiate_contest2__LogSummary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (contest2__LogSummary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_contest2__LogSummary, sizeof(contest2__LogSummary), 0, C1_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__LogSummary(struct soap *soap, contest2__LogSummary *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTocontest2__LogSummary(soap, tag ? tag : "contest2:LogSummary", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest2__LogSummary ** SOAP_FMAC4 soap_get_PointerTocontest2__LogSummary(struct soap *soap, contest2__LogSummary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest2__LogSummary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__RigFrequency(struct soap *soap, contest2__RigFrequency *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_contest2__RigFrequency))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__RigFrequency(struct soap *soap, const char *tag, int id, contest2__RigFrequency *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_contest2__RigFrequency, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C1_contest2__RigFrequency ? type : NULL);
}

SOAP_FMAC3 contest2__RigFrequency ** SOAP_FMAC4 soap_in_PointerTocontest2__RigFrequency(struct soap *soap, const char *tag, contest2__RigFrequency **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest2__RigFrequency **)soap_malloc(soap, sizeof(contest2__RigFrequency *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest2__RigFrequency *)soap_instantiate_contest2__RigFrequency(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (contest2__RigFrequency **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_contest2__RigFrequency, sizeof(contest2__RigFrequency), 0, C1_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__RigFrequency(struct soap *soap, contest2__RigFrequency *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTocontest2__RigFrequency(soap, tag ? tag : "contest2:RigFrequency", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest2__RigFrequency ** SOAP_FMAC4 soap_get_PointerTocontest2__RigFrequency(struct soap *soap, contest2__RigFrequency **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest2__RigFrequency(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__ArrayOfQsoIdVersion(struct soap *soap, contest2__ArrayOfQsoIdVersion *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__ArrayOfQsoIdVersion(struct soap *soap, const char *tag, int id, contest2__ArrayOfQsoIdVersion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion ? type : NULL);
}

SOAP_FMAC3 contest2__ArrayOfQsoIdVersion ** SOAP_FMAC4 soap_in_PointerTocontest2__ArrayOfQsoIdVersion(struct soap *soap, const char *tag, contest2__ArrayOfQsoIdVersion **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest2__ArrayOfQsoIdVersion **)soap_malloc(soap, sizeof(contest2__ArrayOfQsoIdVersion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest2__ArrayOfQsoIdVersion *)soap_instantiate_contest2__ArrayOfQsoIdVersion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (contest2__ArrayOfQsoIdVersion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_contest2__ArrayOfQsoIdVersion, sizeof(contest2__ArrayOfQsoIdVersion), 0, C1_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__ArrayOfQsoIdVersion(struct soap *soap, contest2__ArrayOfQsoIdVersion *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTocontest2__ArrayOfQsoIdVersion(soap, tag ? tag : "contest2:ArrayOfQsoIdVersion", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest2__ArrayOfQsoIdVersion ** SOAP_FMAC4 soap_get_PointerTocontest2__ArrayOfQsoIdVersion(struct soap *soap, contest2__ArrayOfQsoIdVersion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest2__ArrayOfQsoIdVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__QsoIdVersion(struct soap *soap, contest2__QsoIdVersion *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_contest2__QsoIdVersion))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__QsoIdVersion(struct soap *soap, const char *tag, int id, contest2__QsoIdVersion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_contest2__QsoIdVersion, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C1_contest2__QsoIdVersion ? type : NULL);
}

SOAP_FMAC3 contest2__QsoIdVersion ** SOAP_FMAC4 soap_in_PointerTocontest2__QsoIdVersion(struct soap *soap, const char *tag, contest2__QsoIdVersion **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest2__QsoIdVersion **)soap_malloc(soap, sizeof(contest2__QsoIdVersion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest2__QsoIdVersion *)soap_instantiate_contest2__QsoIdVersion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (contest2__QsoIdVersion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_contest2__QsoIdVersion, sizeof(contest2__QsoIdVersion), 0, C1_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__QsoIdVersion(struct soap *soap, contest2__QsoIdVersion *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTocontest2__QsoIdVersion(soap, tag ? tag : "contest2:QsoIdVersion", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest2__QsoIdVersion ** SOAP_FMAC4 soap_get_PointerTocontest2__QsoIdVersion(struct soap *soap, contest2__QsoIdVersion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest2__QsoIdVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__ArrayOfQso(struct soap *soap, contest2__ArrayOfQso *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_contest2__ArrayOfQso))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__ArrayOfQso(struct soap *soap, const char *tag, int id, contest2__ArrayOfQso *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_contest2__ArrayOfQso, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C1_contest2__ArrayOfQso ? type : NULL);
}

SOAP_FMAC3 contest2__ArrayOfQso ** SOAP_FMAC4 soap_in_PointerTocontest2__ArrayOfQso(struct soap *soap, const char *tag, contest2__ArrayOfQso **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest2__ArrayOfQso **)soap_malloc(soap, sizeof(contest2__ArrayOfQso *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest2__ArrayOfQso *)soap_instantiate_contest2__ArrayOfQso(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (contest2__ArrayOfQso **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_contest2__ArrayOfQso, sizeof(contest2__ArrayOfQso), 0, C1_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__ArrayOfQso(struct soap *soap, contest2__ArrayOfQso *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTocontest2__ArrayOfQso(soap, tag ? tag : "contest2:ArrayOfQso", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest2__ArrayOfQso ** SOAP_FMAC4 soap_get_PointerTocontest2__ArrayOfQso(struct soap *soap, contest2__ArrayOfQso **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest2__ArrayOfQso(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__Qso(struct soap *soap, contest2__Qso *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_contest2__Qso))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__Qso(struct soap *soap, const char *tag, int id, contest2__Qso *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_contest2__Qso, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C1_contest2__Qso ? type : NULL);
}

SOAP_FMAC3 contest2__Qso ** SOAP_FMAC4 soap_in_PointerTocontest2__Qso(struct soap *soap, const char *tag, contest2__Qso **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest2__Qso **)soap_malloc(soap, sizeof(contest2__Qso *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest2__Qso *)soap_instantiate_contest2__Qso(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (contest2__Qso **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_contest2__Qso, sizeof(contest2__Qso), 0, C1_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__Qso(struct soap *soap, contest2__Qso *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTocontest2__Qso(soap, tag ? tag : "contest2:Qso", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest2__Qso ** SOAP_FMAC4 soap_get_PointerTocontest2__Qso(struct soap *soap, contest2__Qso **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest2__Qso(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest2__ArrayOfstring(struct soap *soap, contest2__ArrayOfstring *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C1_contest2__ArrayOfstring))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest2__ArrayOfstring(struct soap *soap, const char *tag, int id, contest2__ArrayOfstring *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C1_contest2__ArrayOfstring, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C1_contest2__ArrayOfstring ? type : NULL);
}

SOAP_FMAC3 contest2__ArrayOfstring ** SOAP_FMAC4 soap_in_PointerTocontest2__ArrayOfstring(struct soap *soap, const char *tag, contest2__ArrayOfstring **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest2__ArrayOfstring **)soap_malloc(soap, sizeof(contest2__ArrayOfstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest2__ArrayOfstring *)soap_instantiate_contest2__ArrayOfstring(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (contest2__ArrayOfstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C1_contest2__ArrayOfstring, sizeof(contest2__ArrayOfstring), 0, C1_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest2__ArrayOfstring(struct soap *soap, contest2__ArrayOfstring *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTocontest2__ArrayOfstring(soap, tag ? tag : "contest2:ArrayOfstring", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest2__ArrayOfstring ** SOAP_FMAC4 soap_get_PointerTocontest2__ArrayOfstring(struct soap *soap, contest2__ArrayOfstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest2__ArrayOfstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_C1__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_C1__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_C1__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_C1_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_C1_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_C1_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTocontest2__RigFrequency(struct soap *soap, std::vector<contest2__RigFrequency *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTocontest2__RigFrequency(struct soap *soap, const std::vector<contest2__RigFrequency *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<contest2__RigFrequency *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTocontest2__RigFrequency(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTocontest2__RigFrequency(struct soap *soap, const char *tag, int id, const std::vector<contest2__RigFrequency *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<contest2__RigFrequency *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTocontest2__RigFrequency(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<contest2__RigFrequency *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTocontest2__RigFrequency(struct soap *soap, const char *tag, std::vector<contest2__RigFrequency *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTocontest2__RigFrequency(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		contest2__RigFrequency *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_C1_contest2__RigFrequency, SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__RigFrequency, sizeof(contest2__RigFrequency), 1, C1_finsert, C1_fbase))
				break;
			if (!soap_in_PointerTocontest2__RigFrequency(soap, tag, NULL, "contest2:RigFrequency"))
				break;
		}
		else
		{	if (!soap_in_PointerTocontest2__RigFrequency(soap, tag, &n, "contest2:RigFrequency"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<contest2__RigFrequency *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTocontest2__RigFrequency(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTocontest2__RigFrequency(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<contest2__RigFrequency *> *p;
	size_t k = sizeof(std::vector<contest2__RigFrequency *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__RigFrequency, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<contest2__RigFrequency *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<contest2__RigFrequency *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<contest2__RigFrequency *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(struct soap *soap, std::vector<contest2__QsoIdVersion *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(struct soap *soap, const std::vector<contest2__QsoIdVersion *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<contest2__QsoIdVersion *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTocontest2__QsoIdVersion(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(struct soap *soap, const char *tag, int id, const std::vector<contest2__QsoIdVersion *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<contest2__QsoIdVersion *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTocontest2__QsoIdVersion(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<contest2__QsoIdVersion *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(struct soap *soap, const char *tag, std::vector<contest2__QsoIdVersion *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		contest2__QsoIdVersion *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_C1_contest2__QsoIdVersion, SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__QsoIdVersion, sizeof(contest2__QsoIdVersion), 1, C1_finsert, C1_fbase))
				break;
			if (!soap_in_PointerTocontest2__QsoIdVersion(soap, tag, NULL, "contest2:QsoIdVersion"))
				break;
		}
		else
		{	if (!soap_in_PointerTocontest2__QsoIdVersion(soap, tag, &n, "contest2:QsoIdVersion"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<contest2__QsoIdVersion *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTocontest2__QsoIdVersion(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<contest2__QsoIdVersion *> *p;
	size_t k = sizeof(std::vector<contest2__QsoIdVersion *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__QsoIdVersion, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<contest2__QsoIdVersion *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<contest2__QsoIdVersion *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<contest2__QsoIdVersion *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTocontest2__Qso(struct soap *soap, std::vector<contest2__Qso *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTocontest2__Qso(struct soap *soap, const std::vector<contest2__Qso *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<contest2__Qso *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTocontest2__Qso(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTocontest2__Qso(struct soap *soap, const char *tag, int id, const std::vector<contest2__Qso *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<contest2__Qso *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTocontest2__Qso(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<contest2__Qso *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTocontest2__Qso(struct soap *soap, const char *tag, std::vector<contest2__Qso *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTocontest2__Qso(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		contest2__Qso *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_C1_contest2__Qso, SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__Qso, sizeof(contest2__Qso), 1, C1_finsert, C1_fbase))
				break;
			if (!soap_in_PointerTocontest2__Qso(soap, tag, NULL, "contest2:Qso"))
				break;
		}
		else
		{	if (!soap_in_PointerTocontest2__Qso(soap, tag, &n, "contest2:Qso"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<contest2__Qso *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTocontest2__Qso(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTocontest2__Qso(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<contest2__Qso *> *p;
	size_t k = sizeof(std::vector<contest2__Qso *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_std__vectorTemplateOfPointerTocontest2__Qso, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<contest2__Qso *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<contest2__Qso *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<contest2__Qso *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap *soap, std::vector<int> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap *soap, const std::vector<int> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap *soap, const char *tag, int id, const std::vector<int> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<int> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_int(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<int> * SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap *soap, const char *tag, std::vector<int> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfint(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		int n;
		soap_default_int(soap, &n);
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_C1_int, SOAP_TYPE_C1_std__vectorTemplateOfint, sizeof(int), 0, C1_finsert, C1_fbase))
				break;
			if (!soap_in_int(soap, tag, NULL, "xsd:int"))
				break;
		}
		else
		{	if (!soap_in_int(soap, tag, &n, "xsd:int"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<int>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfint(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<int> *p;
	size_t k = sizeof(std::vector<int> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_std__vectorTemplateOfint, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<int> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<int> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<int>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap *soap, const std::vector<std::string> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<std::string> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__string(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, int id, const std::vector<std::string> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<std::string> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__string(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, std::vector<std::string> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfstd__string(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		std::string n;
		soap_default_std__string(soap, &n);
		short soap_shaky = soap_begin_shaky(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_C1_std__string, SOAP_TYPE_C1_std__vectorTemplateOfstd__string, sizeof(std::string), 0, C1_finsert, C1_fbase))
				break;
			if (!soap_in_std__string(soap, tag, NULL, "xsd:string"))
				break;
		}
		else
		{	if (!soap_in_std__string(soap, tag, &n, "xsd:string"))
				break;
		}
		soap_end_shaky(soap, soap_shaky);
		if (a->size())
		{	const void *p = &*a->begin();
			soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(std::string));
			if (p != &*a->begin())
			{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container capacity increased: updating pointers\n"));
				soap_update_pointers(soap, (const char*)&*a->begin(), (const char*)p, (a->size() - 1) * sizeof(std::string));
			}
		}
		else
		{	soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(std::string));
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<std::string> *p;
	size_t k = sizeof(std::vector<std::string> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C1_std__vectorTemplateOfstd__string, n, C1_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<std::string> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<std::string> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<std::string>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

} // namespace C1


#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of C1C.cpp */
