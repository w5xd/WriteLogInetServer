/* C2C.cpp
   Generated by gSOAP 2.8.112 for ContestQsos2.h

gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "C2H.h"

namespace C2 {

SOAP_SOURCE_STAMP("@(#) C2C.cpp ver 2.8.112 2021-03-26 01:14:50 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
	}
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code == NULL)
		soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason == NULL)
		soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
				return NULL;
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_subcode(struct soap *soap)
{
	const char **s = soap_faultsubcode(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_string(struct soap *soap)
{
	const char **s = soap_faultstring(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
			soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
		soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_detail(struct soap *soap)
{
	const char **s = soap_faultdetail(soap);
	return s ? *s : NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, NULL, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, const char *tag, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_C2_xsd__byte:
		return soap_in_xsd__byte(soap, tag, NULL, "xsd:byte");
	case SOAP_TYPE_C2_byte:
		return soap_in_byte(soap, tag, NULL, "xsd:byte");
	case SOAP_TYPE_C2_short:
		return soap_in_short(soap, tag, NULL, "xsd:short");
	case SOAP_TYPE_C2_contest24__char:
		return soap_in_contest24__char(soap, tag, NULL, "contest24:char");
	case SOAP_TYPE_C2_int:
		return soap_in_int(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_C2_LONG64:
		return soap_in_LONG64(soap, tag, NULL, "xsd:long");
	case SOAP_TYPE_C2_float:
		return soap_in_float(soap, tag, NULL, "xsd:float");
	case SOAP_TYPE_C2_double:
		return soap_in_double(soap, tag, NULL, "xsd:double");
	case SOAP_TYPE_C2_xsd__unsignedByte:
		return soap_in_xsd__unsignedByte(soap, tag, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_C2_unsignedByte:
		return soap_in_unsignedByte(soap, tag, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_C2_unsignedShort:
		return soap_in_unsignedShort(soap, tag, NULL, "xsd:unsignedShort");
	case SOAP_TYPE_C2_unsignedInt:
		return soap_in_unsignedInt(soap, tag, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_C2_ULONG64:
		return soap_in_ULONG64(soap, tag, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_C2_dateTime:
		return soap_in_dateTime(soap, tag, NULL, "xsd:dateTime");
	case SOAP_TYPE_C2_bool:
		return soap_in_bool(soap, tag, NULL, "xsd:boolean");
	case SOAP_TYPE_C2_contest24__guid__:
		return soap_in_contest24__guid__(soap, tag, NULL, "contest24:guid");
	case SOAP_TYPE_C2_contest24__guid:
		return soap_in_contest24__guid(soap, tag, NULL, "contest24:guid");
	case SOAP_TYPE_C2_contest24__duration__:
		return soap_in_contest24__duration__(soap, tag, NULL, "contest24:duration");
	case SOAP_TYPE_C2_contest24__duration:
		return soap_in_contest24__duration(soap, tag, NULL, "contest24:duration");
	case SOAP_TYPE_C2_contest24__char__:
		return soap_in_contest24__char__(soap, tag, NULL, "contest24:char");
	case SOAP_TYPE_C2_contest25__RigFrequency:
		return soap_in_contest25__RigFrequency(soap, tag, NULL, "contest25:RigFrequency");
	case SOAP_TYPE_C2_contest25__ArrayOfRigFrequency:
		return soap_in_contest25__ArrayOfRigFrequency(soap, tag, NULL, "contest25:ArrayOfRigFrequency");
	case SOAP_TYPE_C2_contest25__QsoIdVersion:
		return soap_in_contest25__QsoIdVersion(soap, tag, NULL, "contest25:QsoIdVersion");
	case SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion:
		return soap_in_contest25__ArrayOfQsoIdVersion(soap, tag, NULL, "contest25:ArrayOfQsoIdVersion");
	case SOAP_TYPE_C2_contest25__LogSummary:
		return soap_in_contest25__LogSummary(soap, tag, NULL, "contest25:LogSummary");
	case SOAP_TYPE_C2_contest25__QsoUpdate:
		return soap_in_contest25__QsoUpdate(soap, tag, NULL, "contest25:QsoUpdate");
	case SOAP_TYPE_C2_contest25__Qso:
		return soap_in_contest25__Qso(soap, tag, NULL, "contest25:Qso");
	case SOAP_TYPE_C2_contest25__ArrayOfQso:
		return soap_in_contest25__ArrayOfQso(soap, tag, NULL, "contest25:ArrayOfQso");
	case SOAP_TYPE_C2_contest26__ArrayOfint:
		return soap_in_contest26__ArrayOfint(soap, tag, NULL, "contest26:ArrayOfint");
	case SOAP_TYPE_C2_contest26__ArrayOfstring:
		return soap_in_contest26__ArrayOfstring(soap, tag, NULL, "contest26:ArrayOfstring");
	case SOAP_TYPE_C2_xsd__unsignedShort_:
		return soap_in_xsd__unsignedShort_(soap, tag, NULL, "xsd:unsignedShort");
	case SOAP_TYPE_C2_xsd__unsignedLong_:
		return soap_in_xsd__unsignedLong_(soap, tag, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_C2_xsd__unsignedInt_:
		return soap_in_xsd__unsignedInt_(soap, tag, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_C2_xsd__unsignedByte__:
		return soap_in_xsd__unsignedByte__(soap, tag, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_C2_xsd__string_:
		return soap_in_xsd__string_(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_C2_xsd__short_:
		return soap_in_xsd__short_(soap, tag, NULL, "xsd:short");
	case SOAP_TYPE_C2_xsd__long_:
		return soap_in_xsd__long_(soap, tag, NULL, "xsd:long");
	case SOAP_TYPE_C2_xsd__int_:
		return soap_in_xsd__int_(soap, tag, NULL, "xsd:int");
	case SOAP_TYPE_C2_xsd__float_:
		return soap_in_xsd__float_(soap, tag, NULL, "xsd:float");
	case SOAP_TYPE_C2_xsd__duration__:
		return soap_in_xsd__duration__(soap, tag, NULL, "xsd:duration");
	case SOAP_TYPE_C2_xsd__duration:
		return soap_in_xsd__duration(soap, tag, NULL, "xsd:duration");
	case SOAP_TYPE_C2_xsd__double_:
		return soap_in_xsd__double_(soap, tag, NULL, "xsd:double");
	case SOAP_TYPE_C2_xsd__decimal__:
		return soap_in_xsd__decimal__(soap, tag, NULL, "xsd:decimal");
	case SOAP_TYPE_C2_xsd__decimal:
		return soap_in_xsd__decimal(soap, tag, NULL, "xsd:decimal");
	case SOAP_TYPE_C2_xsd__dateTime_:
		return soap_in_xsd__dateTime_(soap, tag, NULL, "xsd:dateTime");
	case SOAP_TYPE_C2_xsd__byte__:
		return soap_in_xsd__byte__(soap, tag, NULL, "xsd:byte");
	case SOAP_TYPE_C2_xsd__boolean_:
		return soap_in_xsd__boolean_(soap, tag, NULL, "xsd:boolean");
	case SOAP_TYPE_C2_xsd__base64Binary__:
		return soap_in_xsd__base64Binary__(soap, tag, NULL, "xsd:base64Binary");
	case SOAP_TYPE_C2_xsd__anyURI__:
		return soap_in_xsd__anyURI__(soap, tag, NULL, "xsd:anyURI");
	case SOAP_TYPE_C2_xsd__anyURI:
		return soap_in_xsd__anyURI(soap, tag, NULL, "xsd:anyURI");
	case SOAP_TYPE_C2_xsd__QName__:
		return soap_in_xsd__QName__(soap, tag, NULL, "xsd:QName");
	case SOAP_TYPE_C2_xsd__IDREF__:
		return soap_in_xsd__IDREF__(soap, tag, NULL, "xsd:IDREF");
	case SOAP_TYPE_C2_xsd__IDREF:
		return soap_in_xsd__IDREF(soap, tag, NULL, "xsd:IDREF");
	case SOAP_TYPE_C2_xsd__ID__:
		return soap_in_xsd__ID__(soap, tag, NULL, "xsd:ID");
	case SOAP_TYPE_C2_xsd__ID:
		return soap_in_xsd__ID(soap, tag, NULL, "xsd:ID");
	case SOAP_TYPE_C2_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, tag, NULL, "xsd:base64Binary");
	case SOAP_TYPE_C2_xsd__QName:
		return soap_in_xsd__QName(soap, tag, NULL, "xsd:QName");
	case SOAP_TYPE_C2_std__string:
		return soap_in_std__string(soap, tag, NULL, "xsd:string");
	case SOAP_TYPE_C2_xsd__anyType:
		return soap_in_xsd__anyType(soap, tag, NULL, "xsd:anyType");
	case SOAP_TYPE_C2_PointerTo_contest23__ExchangeFrequencies:
		return soap_in_PointerTo_contest23__ExchangeFrequencies(soap, tag, NULL, "contest23:ExchangeFrequencies");
	case SOAP_TYPE_C2_PointerTo_contest23__ColumnNamesToIndices:
		return soap_in_PointerTo_contest23__ColumnNamesToIndices(soap, tag, NULL, "contest23:ColumnNamesToIndices");
	case SOAP_TYPE_C2_PointerTo_contest23__getQsosByKeyArray:
		return soap_in_PointerTo_contest23__getQsosByKeyArray(soap, tag, NULL, "contest23:getQsosByKeyArray");
	case SOAP_TYPE_C2_PointerTo_contest23__AddAndGetLogSummary:
		return soap_in_PointerTo_contest23__AddAndGetLogSummary(soap, tag, NULL, "contest23:AddAndGetLogSummary");
	case SOAP_TYPE_C2_PointerTo_contest23__addAndGetQsos:
		return soap_in_PointerTo_contest23__addAndGetQsos(soap, tag, NULL, "contest23:addAndGetQsos");
	case SOAP_TYPE_C2_PointerTo_contest23__GetSessionId:
		return soap_in_PointerTo_contest23__GetSessionId(soap, tag, NULL, "contest23:GetSessionId");
	case SOAP_TYPE_C2_PointerTocontest25__ArrayOfRigFrequency:
		return soap_in_PointerTocontest25__ArrayOfRigFrequency(soap, tag, NULL, "contest25:ArrayOfRigFrequency");
	case SOAP_TYPE_C2_PointerTocontest26__ArrayOfint:
		return soap_in_PointerTocontest26__ArrayOfint(soap, tag, NULL, "contest26:ArrayOfint");
	case SOAP_TYPE_C2_PointerTocontest25__LogSummary:
		return soap_in_PointerTocontest25__LogSummary(soap, tag, NULL, "contest25:LogSummary");
	case SOAP_TYPE_C2_PointerTocontest25__QsoUpdate:
		return soap_in_PointerTocontest25__QsoUpdate(soap, tag, NULL, "contest25:QsoUpdate");
	case SOAP_TYPE_C2_PointerTocontest25__RigFrequency:
		return soap_in_PointerTocontest25__RigFrequency(soap, tag, NULL, "contest25:RigFrequency");
	case SOAP_TYPE_C2_PointerTocontest25__QsoIdVersion:
		return soap_in_PointerTocontest25__QsoIdVersion(soap, tag, NULL, "contest25:QsoIdVersion");
	case SOAP_TYPE_C2_PointerTocontest25__ArrayOfQsoIdVersion:
		return soap_in_PointerTocontest25__ArrayOfQsoIdVersion(soap, tag, NULL, "contest25:ArrayOfQsoIdVersion");
	case SOAP_TYPE_C2_PointerTocontest25__ArrayOfQso:
		return soap_in_PointerTocontest25__ArrayOfQso(soap, tag, NULL, "contest25:ArrayOfQso");
	case SOAP_TYPE_C2_PointerTocontest26__ArrayOfstring:
		return soap_in_PointerTocontest26__ArrayOfstring(soap, tag, NULL, "contest26:ArrayOfstring");
	case SOAP_TYPE_C2_PointerTocontest25__Qso:
		return soap_in_PointerTocontest25__Qso(soap, tag, NULL, "contest25:Qso");
	case SOAP_TYPE_C2_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, tag, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_C2__QName:
	{	char **s;
		s = soap_in__QName(soap, tag, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_C2_string:
	{	char **s;
		s = soap_in_string(soap, tag, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "contest24:guid"))
		{	*type = SOAP_TYPE_C2_contest24__guid__;
			return soap_in_contest24__guid__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest24:guid"))
		{	*type = SOAP_TYPE_C2_contest24__guid;
			return soap_in_contest24__guid(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest24:duration"))
		{	*type = SOAP_TYPE_C2_contest24__duration__;
			return soap_in_contest24__duration__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest24:duration"))
		{	*type = SOAP_TYPE_C2_contest24__duration;
			return soap_in_contest24__duration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest24:char"))
		{	*type = SOAP_TYPE_C2_contest24__char__;
			return soap_in_contest24__char__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest25:RigFrequency"))
		{	*type = SOAP_TYPE_C2_contest25__RigFrequency;
			return soap_in_contest25__RigFrequency(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest25:ArrayOfRigFrequency"))
		{	*type = SOAP_TYPE_C2_contest25__ArrayOfRigFrequency;
			return soap_in_contest25__ArrayOfRigFrequency(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest25:QsoIdVersion"))
		{	*type = SOAP_TYPE_C2_contest25__QsoIdVersion;
			return soap_in_contest25__QsoIdVersion(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest25:ArrayOfQsoIdVersion"))
		{	*type = SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion;
			return soap_in_contest25__ArrayOfQsoIdVersion(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest25:LogSummary"))
		{	*type = SOAP_TYPE_C2_contest25__LogSummary;
			return soap_in_contest25__LogSummary(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest25:QsoUpdate"))
		{	*type = SOAP_TYPE_C2_contest25__QsoUpdate;
			return soap_in_contest25__QsoUpdate(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest25:Qso"))
		{	*type = SOAP_TYPE_C2_contest25__Qso;
			return soap_in_contest25__Qso(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest25:ArrayOfQso"))
		{	*type = SOAP_TYPE_C2_contest25__ArrayOfQso;
			return soap_in_contest25__ArrayOfQso(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest26:ArrayOfint"))
		{	*type = SOAP_TYPE_C2_contest26__ArrayOfint;
			return soap_in_contest26__ArrayOfint(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest26:ArrayOfstring"))
		{	*type = SOAP_TYPE_C2_contest26__ArrayOfstring;
			return soap_in_contest26__ArrayOfstring(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedShort"))
		{	*type = SOAP_TYPE_C2_xsd__unsignedShort_;
			return soap_in_xsd__unsignedShort_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_C2_xsd__unsignedLong_;
			return soap_in_xsd__unsignedLong_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_C2_xsd__unsignedInt_;
			return soap_in_xsd__unsignedInt_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_C2_xsd__unsignedByte__;
			return soap_in_xsd__unsignedByte__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_C2_xsd__string_;
			return soap_in_xsd__string_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_C2_xsd__short_;
			return soap_in_xsd__short_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_C2_xsd__long_;
			return soap_in_xsd__long_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_C2_xsd__int_;
			return soap_in_xsd__int_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_C2_xsd__float_;
			return soap_in_xsd__float_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:duration"))
		{	*type = SOAP_TYPE_C2_xsd__duration__;
			return soap_in_xsd__duration__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:duration"))
		{	*type = SOAP_TYPE_C2_xsd__duration;
			return soap_in_xsd__duration(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_C2_xsd__double_;
			return soap_in_xsd__double_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	*type = SOAP_TYPE_C2_xsd__decimal__;
			return soap_in_xsd__decimal__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	*type = SOAP_TYPE_C2_xsd__decimal;
			return soap_in_xsd__decimal(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_C2_xsd__dateTime_;
			return soap_in_xsd__dateTime_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_C2_xsd__byte__;
			return soap_in_xsd__byte__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_C2_xsd__boolean_;
			return soap_in_xsd__boolean_(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_C2_xsd__base64Binary__;
			return soap_in_xsd__base64Binary__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_C2_xsd__anyURI__;
			return soap_in_xsd__anyURI__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_C2_xsd__anyURI;
			return soap_in_xsd__anyURI(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	*type = SOAP_TYPE_C2_xsd__QName__;
			return soap_in_xsd__QName__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:IDREF"))
		{	*type = SOAP_TYPE_C2_xsd__IDREF__;
			return soap_in_xsd__IDREF__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:IDREF"))
		{	*type = SOAP_TYPE_C2_xsd__IDREF;
			return soap_in_xsd__IDREF(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:ID"))
		{	*type = SOAP_TYPE_C2_xsd__ID__;
			return soap_in_xsd__ID__(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:ID"))
		{	*type = SOAP_TYPE_C2_xsd__ID;
			return soap_in_xsd__ID(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_C2_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	*type = SOAP_TYPE_C2_xsd__QName;
			return soap_in_xsd__QName(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_C2_std__string;
			return soap_in_std__string(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyType"))
		{	*type = SOAP_TYPE_C2_xsd__anyType;
			return soap_in_xsd__anyType(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_C2_xsd__byte;
			return soap_in_xsd__byte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_C2_byte;
			return soap_in_byte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_C2_short;
			return soap_in_short(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest24:char"))
		{	*type = SOAP_TYPE_C2_contest24__char;
			return soap_in_contest24__char(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_C2_int;
			return soap_in_int(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_C2_LONG64;
			return soap_in_LONG64(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_C2_float;
			return soap_in_float(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_C2_double;
			return soap_in_double(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_C2_xsd__unsignedByte;
			return soap_in_xsd__unsignedByte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_C2_unsignedByte;
			return soap_in_unsignedByte(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedShort"))
		{	*type = SOAP_TYPE_C2_unsignedShort;
			return soap_in_unsignedShort(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_C2_unsignedInt;
			return soap_in_unsignedInt(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_C2_ULONG64;
			return soap_in_ULONG64(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_C2_dateTime;
			return soap_in_dateTime(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_C2_bool;
			return soap_in_bool(soap, tag, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE_C2__QName;
			s = soap_in__QName(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_C2_string;
			s = soap_in_string(soap, tag, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "contest23:ExchangeFrequenciesResponse"))
		{	*type = SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse;
			return soap_in__contest23__ExchangeFrequenciesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest23:ExchangeFrequencies"))
		{	*type = SOAP_TYPE_C2__contest23__ExchangeFrequencies;
			return soap_in__contest23__ExchangeFrequencies(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest23:ColumnNamesToIndicesResponse"))
		{	*type = SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse;
			return soap_in__contest23__ColumnNamesToIndicesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest23:ColumnNamesToIndices"))
		{	*type = SOAP_TYPE_C2__contest23__ColumnNamesToIndices;
			return soap_in__contest23__ColumnNamesToIndices(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest23:getQsosByKeyArrayResponse"))
		{	*type = SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse;
			return soap_in__contest23__getQsosByKeyArrayResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest23:getQsosByKeyArray"))
		{	*type = SOAP_TYPE_C2__contest23__getQsosByKeyArray;
			return soap_in__contest23__getQsosByKeyArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest23:AddAndGetLogSummaryResponse"))
		{	*type = SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse;
			return soap_in__contest23__AddAndGetLogSummaryResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest23:AddAndGetLogSummary"))
		{	*type = SOAP_TYPE_C2__contest23__AddAndGetLogSummary;
			return soap_in__contest23__AddAndGetLogSummary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest23:addAndGetQsosResponse"))
		{	*type = SOAP_TYPE_C2__contest23__addAndGetQsosResponse;
			return soap_in__contest23__addAndGetQsosResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest23:addAndGetQsos"))
		{	*type = SOAP_TYPE_C2__contest23__addAndGetQsos;
			return soap_in__contest23__addAndGetQsos(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest23:GetSessionIdResponse"))
		{	*type = SOAP_TYPE_C2__contest23__GetSessionIdResponse;
			return soap_in__contest23__GetSessionIdResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "contest23:GetSessionId"))
		{	*type = SOAP_TYPE_C2__contest23__GetSessionId;
			return soap_in__contest23__GetSessionId(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input at level = %u body = %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, NULL, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_C2_xsd__byte:
		return soap_out_xsd__byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_C2_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_C2_short:
		return soap_out_short(soap, tag, id, (const short *)ptr, "xsd:short");
	case SOAP_TYPE_C2_contest24__char:
		return soap_out_contest24__char(soap, tag, id, (const int *)ptr, "contest24:char");
	case SOAP_TYPE_C2_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_C2_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_C2_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_C2_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_C2_xsd__unsignedByte:
		return soap_out_xsd__unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_C2_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_C2_unsignedShort:
		return soap_out_unsignedShort(soap, tag, id, (const unsigned short *)ptr, "xsd:unsignedShort");
	case SOAP_TYPE_C2_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_C2_ULONG64:
		return soap_out_ULONG64(soap, tag, id, (const ULONG64 *)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_C2_dateTime:
		return soap_out_dateTime(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_C2_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_C2_contest24__guid__:
		return ((contest24__guid__ *)ptr)->soap_out(soap, tag, id, "contest24:guid");
	case SOAP_TYPE_C2_contest24__guid:
		return soap_out_contest24__guid(soap, tag, id, (const std::string *)ptr, "contest24:guid");
	case SOAP_TYPE_C2_contest24__duration__:
		return ((contest24__duration__ *)ptr)->soap_out(soap, tag, id, "contest24:duration");
	case SOAP_TYPE_C2_contest24__duration:
		return soap_out_contest24__duration(soap, tag, id, (const std::string *)ptr, "contest24:duration");
	case SOAP_TYPE_C2_contest24__char__:
		return ((contest24__char__ *)ptr)->soap_out(soap, tag, id, "contest24:char");
	case SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse:
		return ((_contest23__ExchangeFrequenciesResponse *)ptr)->soap_out(soap, "contest23:ExchangeFrequenciesResponse", id, "");
	case SOAP_TYPE_C2__contest23__ExchangeFrequencies:
		return ((_contest23__ExchangeFrequencies *)ptr)->soap_out(soap, "contest23:ExchangeFrequencies", id, "");
	case SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse:
		return ((_contest23__ColumnNamesToIndicesResponse *)ptr)->soap_out(soap, "contest23:ColumnNamesToIndicesResponse", id, "");
	case SOAP_TYPE_C2__contest23__ColumnNamesToIndices:
		return ((_contest23__ColumnNamesToIndices *)ptr)->soap_out(soap, "contest23:ColumnNamesToIndices", id, "");
	case SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse:
		return ((_contest23__getQsosByKeyArrayResponse *)ptr)->soap_out(soap, "contest23:getQsosByKeyArrayResponse", id, "");
	case SOAP_TYPE_C2__contest23__getQsosByKeyArray:
		return ((_contest23__getQsosByKeyArray *)ptr)->soap_out(soap, "contest23:getQsosByKeyArray", id, "");
	case SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse:
		return ((_contest23__AddAndGetLogSummaryResponse *)ptr)->soap_out(soap, "contest23:AddAndGetLogSummaryResponse", id, "");
	case SOAP_TYPE_C2__contest23__AddAndGetLogSummary:
		return ((_contest23__AddAndGetLogSummary *)ptr)->soap_out(soap, "contest23:AddAndGetLogSummary", id, "");
	case SOAP_TYPE_C2__contest23__addAndGetQsosResponse:
		return ((_contest23__addAndGetQsosResponse *)ptr)->soap_out(soap, "contest23:addAndGetQsosResponse", id, "");
	case SOAP_TYPE_C2__contest23__addAndGetQsos:
		return ((_contest23__addAndGetQsos *)ptr)->soap_out(soap, "contest23:addAndGetQsos", id, "");
	case SOAP_TYPE_C2__contest23__GetSessionIdResponse:
		return ((_contest23__GetSessionIdResponse *)ptr)->soap_out(soap, "contest23:GetSessionIdResponse", id, "");
	case SOAP_TYPE_C2__contest23__GetSessionId:
		return ((_contest23__GetSessionId *)ptr)->soap_out(soap, "contest23:GetSessionId", id, "");
	case SOAP_TYPE_C2_contest25__RigFrequency:
		return ((contest25__RigFrequency *)ptr)->soap_out(soap, tag, id, "contest25:RigFrequency");
	case SOAP_TYPE_C2_contest25__ArrayOfRigFrequency:
		return ((contest25__ArrayOfRigFrequency *)ptr)->soap_out(soap, tag, id, "contest25:ArrayOfRigFrequency");
	case SOAP_TYPE_C2_contest25__QsoIdVersion:
		return ((contest25__QsoIdVersion *)ptr)->soap_out(soap, tag, id, "contest25:QsoIdVersion");
	case SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion:
		return ((contest25__ArrayOfQsoIdVersion *)ptr)->soap_out(soap, tag, id, "contest25:ArrayOfQsoIdVersion");
	case SOAP_TYPE_C2_contest25__LogSummary:
		return ((contest25__LogSummary *)ptr)->soap_out(soap, tag, id, "contest25:LogSummary");
	case SOAP_TYPE_C2_contest25__QsoUpdate:
		return ((contest25__QsoUpdate *)ptr)->soap_out(soap, tag, id, "contest25:QsoUpdate");
	case SOAP_TYPE_C2_contest25__Qso:
		return ((contest25__Qso *)ptr)->soap_out(soap, tag, id, "contest25:Qso");
	case SOAP_TYPE_C2_contest25__ArrayOfQso:
		return ((contest25__ArrayOfQso *)ptr)->soap_out(soap, tag, id, "contest25:ArrayOfQso");
	case SOAP_TYPE_C2_contest26__ArrayOfint:
		return ((contest26__ArrayOfint *)ptr)->soap_out(soap, tag, id, "contest26:ArrayOfint");
	case SOAP_TYPE_C2_contest26__ArrayOfstring:
		return ((contest26__ArrayOfstring *)ptr)->soap_out(soap, tag, id, "contest26:ArrayOfstring");
	case SOAP_TYPE_C2_xsd__unsignedShort_:
		return ((xsd__unsignedShort_ *)ptr)->soap_out(soap, tag, id, "xsd:unsignedShort");
	case SOAP_TYPE_C2_xsd__unsignedLong_:
		return ((xsd__unsignedLong_ *)ptr)->soap_out(soap, tag, id, "xsd:unsignedLong");
	case SOAP_TYPE_C2_xsd__unsignedInt_:
		return ((xsd__unsignedInt_ *)ptr)->soap_out(soap, tag, id, "xsd:unsignedInt");
	case SOAP_TYPE_C2_xsd__unsignedByte__:
		return ((xsd__unsignedByte__ *)ptr)->soap_out(soap, tag, id, "xsd:unsignedByte");
	case SOAP_TYPE_C2_xsd__string_:
		return ((xsd__string_ *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE_C2_xsd__short_:
		return ((xsd__short_ *)ptr)->soap_out(soap, tag, id, "xsd:short");
	case SOAP_TYPE_C2_xsd__long_:
		return ((xsd__long_ *)ptr)->soap_out(soap, tag, id, "xsd:long");
	case SOAP_TYPE_C2_xsd__int_:
		return ((xsd__int_ *)ptr)->soap_out(soap, tag, id, "xsd:int");
	case SOAP_TYPE_C2_xsd__float_:
		return ((xsd__float_ *)ptr)->soap_out(soap, tag, id, "xsd:float");
	case SOAP_TYPE_C2_xsd__duration__:
		return ((xsd__duration__ *)ptr)->soap_out(soap, tag, id, "xsd:duration");
	case SOAP_TYPE_C2_xsd__duration:
		return soap_out_xsd__duration(soap, tag, id, (const std::string *)ptr, "xsd:duration");
	case SOAP_TYPE_C2_xsd__double_:
		return ((xsd__double_ *)ptr)->soap_out(soap, tag, id, "xsd:double");
	case SOAP_TYPE_C2_xsd__decimal__:
		return ((xsd__decimal__ *)ptr)->soap_out(soap, tag, id, "xsd:decimal");
	case SOAP_TYPE_C2_xsd__decimal:
		return soap_out_xsd__decimal(soap, tag, id, (const std::string *)ptr, "xsd:decimal");
	case SOAP_TYPE_C2_xsd__dateTime_:
		return ((xsd__dateTime_ *)ptr)->soap_out(soap, tag, id, "xsd:dateTime");
	case SOAP_TYPE_C2_xsd__byte__:
		return ((xsd__byte__ *)ptr)->soap_out(soap, tag, id, "xsd:byte");
	case SOAP_TYPE_C2_xsd__boolean_:
		return ((xsd__boolean_ *)ptr)->soap_out(soap, tag, id, "xsd:boolean");
	case SOAP_TYPE_C2_xsd__base64Binary__:
		return ((xsd__base64Binary__ *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_C2_xsd__anyURI__:
		return ((xsd__anyURI__ *)ptr)->soap_out(soap, tag, id, "xsd:anyURI");
	case SOAP_TYPE_C2_xsd__anyURI:
		return soap_out_xsd__anyURI(soap, tag, id, (const std::string *)ptr, "xsd:anyURI");
	case SOAP_TYPE_C2_xsd__QName__:
		return ((xsd__QName__ *)ptr)->soap_out(soap, tag, id, "xsd:QName");
	case SOAP_TYPE_C2_xsd__IDREF__:
		return ((xsd__IDREF__ *)ptr)->soap_out(soap, tag, id, "xsd:IDREF");
	case SOAP_TYPE_C2_xsd__IDREF:
		return soap_out_xsd__IDREF(soap, tag, id, (const std::string *)ptr, "xsd:IDREF");
	case SOAP_TYPE_C2_xsd__ID__:
		return ((xsd__ID__ *)ptr)->soap_out(soap, tag, id, "xsd:ID");
	case SOAP_TYPE_C2_xsd__ID:
		return soap_out_xsd__ID(soap, tag, id, (const std::string *)ptr, "xsd:ID");
	case SOAP_TYPE_C2_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_C2_xsd__QName:
		return soap_out_xsd__QName(soap, tag, id, (const std::string *)ptr, "xsd:QName");
	case SOAP_TYPE_C2_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_C2_xsd__anyType:
		return ((xsd__anyType *)ptr)->soap_out(soap, tag, id, "xsd:anyType");
	case SOAP_TYPE_C2_PointerTo_contest23__ExchangeFrequencies:
		return soap_out_PointerTo_contest23__ExchangeFrequencies(soap, tag, id, (_contest23__ExchangeFrequencies *const*)ptr, "contest23:ExchangeFrequencies");
	case SOAP_TYPE_C2_PointerTo_contest23__ColumnNamesToIndices:
		return soap_out_PointerTo_contest23__ColumnNamesToIndices(soap, tag, id, (_contest23__ColumnNamesToIndices *const*)ptr, "contest23:ColumnNamesToIndices");
	case SOAP_TYPE_C2_PointerTo_contest23__getQsosByKeyArray:
		return soap_out_PointerTo_contest23__getQsosByKeyArray(soap, tag, id, (_contest23__getQsosByKeyArray *const*)ptr, "contest23:getQsosByKeyArray");
	case SOAP_TYPE_C2_PointerTo_contest23__AddAndGetLogSummary:
		return soap_out_PointerTo_contest23__AddAndGetLogSummary(soap, tag, id, (_contest23__AddAndGetLogSummary *const*)ptr, "contest23:AddAndGetLogSummary");
	case SOAP_TYPE_C2_PointerTo_contest23__addAndGetQsos:
		return soap_out_PointerTo_contest23__addAndGetQsos(soap, tag, id, (_contest23__addAndGetQsos *const*)ptr, "contest23:addAndGetQsos");
	case SOAP_TYPE_C2_PointerTo_contest23__GetSessionId:
		return soap_out_PointerTo_contest23__GetSessionId(soap, tag, id, (_contest23__GetSessionId *const*)ptr, "contest23:GetSessionId");
	case SOAP_TYPE_C2_PointerTocontest25__ArrayOfRigFrequency:
		return soap_out_PointerTocontest25__ArrayOfRigFrequency(soap, tag, id, (contest25__ArrayOfRigFrequency *const*)ptr, "contest25:ArrayOfRigFrequency");
	case SOAP_TYPE_C2_PointerTocontest26__ArrayOfint:
		return soap_out_PointerTocontest26__ArrayOfint(soap, tag, id, (contest26__ArrayOfint *const*)ptr, "contest26:ArrayOfint");
	case SOAP_TYPE_C2_PointerTocontest25__LogSummary:
		return soap_out_PointerTocontest25__LogSummary(soap, tag, id, (contest25__LogSummary *const*)ptr, "contest25:LogSummary");
	case SOAP_TYPE_C2_PointerTocontest25__QsoUpdate:
		return soap_out_PointerTocontest25__QsoUpdate(soap, tag, id, (contest25__QsoUpdate *const*)ptr, "contest25:QsoUpdate");
	case SOAP_TYPE_C2_PointerTocontest25__RigFrequency:
		return soap_out_PointerTocontest25__RigFrequency(soap, tag, id, (contest25__RigFrequency *const*)ptr, "contest25:RigFrequency");
	case SOAP_TYPE_C2_PointerTocontest25__QsoIdVersion:
		return soap_out_PointerTocontest25__QsoIdVersion(soap, tag, id, (contest25__QsoIdVersion *const*)ptr, "contest25:QsoIdVersion");
	case SOAP_TYPE_C2_PointerTocontest25__ArrayOfQsoIdVersion:
		return soap_out_PointerTocontest25__ArrayOfQsoIdVersion(soap, tag, id, (contest25__ArrayOfQsoIdVersion *const*)ptr, "contest25:ArrayOfQsoIdVersion");
	case SOAP_TYPE_C2_PointerTocontest25__ArrayOfQso:
		return soap_out_PointerTocontest25__ArrayOfQso(soap, tag, id, (contest25__ArrayOfQso *const*)ptr, "contest25:ArrayOfQso");
	case SOAP_TYPE_C2_PointerTocontest26__ArrayOfstring:
		return soap_out_PointerTocontest26__ArrayOfstring(soap, tag, id, (contest26__ArrayOfstring *const*)ptr, "contest26:ArrayOfstring");
	case SOAP_TYPE_C2_PointerTocontest25__Qso:
		return soap_out_PointerTocontest25__Qso(soap, tag, id, (contest25__Qso *const*)ptr, "contest25:Qso");
	case SOAP_TYPE_C2_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_C2__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_C2_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in C2C.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag, 0, NULL); /* unknown type to serialize */
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_C2_contest24__guid__:
		((contest24__guid__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest24__guid:
		soap_serialize_contest24__guid(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_C2_contest24__duration__:
		((contest24__duration__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest24__duration:
		soap_serialize_contest24__duration(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_C2_contest24__char__:
		((contest24__char__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse:
		((_contest23__ExchangeFrequenciesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__ExchangeFrequencies:
		((_contest23__ExchangeFrequencies *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse:
		((_contest23__ColumnNamesToIndicesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__ColumnNamesToIndices:
		((_contest23__ColumnNamesToIndices *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse:
		((_contest23__getQsosByKeyArrayResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__getQsosByKeyArray:
		((_contest23__getQsosByKeyArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse:
		((_contest23__AddAndGetLogSummaryResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__AddAndGetLogSummary:
		((_contest23__AddAndGetLogSummary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__addAndGetQsosResponse:
		((_contest23__addAndGetQsosResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__addAndGetQsos:
		((_contest23__addAndGetQsos *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__GetSessionIdResponse:
		((_contest23__GetSessionIdResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2__contest23__GetSessionId:
		((_contest23__GetSessionId *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest25__RigFrequency:
		((contest25__RigFrequency *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest25__ArrayOfRigFrequency:
		((contest25__ArrayOfRigFrequency *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest25__QsoIdVersion:
		((contest25__QsoIdVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion:
		((contest25__ArrayOfQsoIdVersion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest25__LogSummary:
		((contest25__LogSummary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest25__QsoUpdate:
		((contest25__QsoUpdate *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest25__Qso:
		((contest25__Qso *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest25__ArrayOfQso:
		((contest25__ArrayOfQso *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest26__ArrayOfint:
		((contest26__ArrayOfint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_contest26__ArrayOfstring:
		((contest26__ArrayOfstring *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__unsignedShort_:
		((xsd__unsignedShort_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__unsignedLong_:
		((xsd__unsignedLong_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__unsignedInt_:
		((xsd__unsignedInt_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__unsignedByte__:
		((xsd__unsignedByte__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__string_:
		((xsd__string_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__short_:
		((xsd__short_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__long_:
		((xsd__long_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__int_:
		((xsd__int_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__float_:
		((xsd__float_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__duration__:
		((xsd__duration__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__duration:
		soap_serialize_xsd__duration(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_C2_xsd__double_:
		((xsd__double_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__decimal__:
		((xsd__decimal__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__decimal:
		soap_serialize_xsd__decimal(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_C2_xsd__dateTime_:
		((xsd__dateTime_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__byte__:
		((xsd__byte__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__boolean_:
		((xsd__boolean_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__base64Binary__:
		((xsd__base64Binary__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__anyURI__:
		((xsd__anyURI__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__anyURI:
		soap_serialize_xsd__anyURI(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_C2_xsd__QName__:
		((xsd__QName__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__IDREF__:
		((xsd__IDREF__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__IDREF:
		soap_serialize_xsd__IDREF(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_C2_xsd__ID__:
		((xsd__ID__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__ID:
		soap_serialize_xsd__ID(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_C2_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2_xsd__QName:
		soap_serialize_xsd__QName(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_C2_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_C2_xsd__anyType:
		((xsd__anyType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_C2___contest23__ExchangeFrequencies:
		soap_serialize___contest23__ExchangeFrequencies(soap, (const struct __contest23__ExchangeFrequencies *)ptr);
		break;
	case SOAP_TYPE_C2___contest23__ColumnNamesToIndices:
		soap_serialize___contest23__ColumnNamesToIndices(soap, (const struct __contest23__ColumnNamesToIndices *)ptr);
		break;
	case SOAP_TYPE_C2___contest23__getQsosByKeyArray:
		soap_serialize___contest23__getQsosByKeyArray(soap, (const struct __contest23__getQsosByKeyArray *)ptr);
		break;
	case SOAP_TYPE_C2___contest23__AddAndGetLogSummary:
		soap_serialize___contest23__AddAndGetLogSummary(soap, (const struct __contest23__AddAndGetLogSummary *)ptr);
		break;
	case SOAP_TYPE_C2___contest23__addAndGetQsos:
		soap_serialize___contest23__addAndGetQsos(soap, (const struct __contest23__addAndGetQsos *)ptr);
		break;
	case SOAP_TYPE_C2___contest23__GetSessionId:
		soap_serialize___contest23__GetSessionId(soap, (const struct __contest23__GetSessionId *)ptr);
		break;
	case SOAP_TYPE_C2_PointerTo_contest23__ExchangeFrequencies:
		soap_serialize_PointerTo_contest23__ExchangeFrequencies(soap, (_contest23__ExchangeFrequencies *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTo_contest23__ColumnNamesToIndices:
		soap_serialize_PointerTo_contest23__ColumnNamesToIndices(soap, (_contest23__ColumnNamesToIndices *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTo_contest23__getQsosByKeyArray:
		soap_serialize_PointerTo_contest23__getQsosByKeyArray(soap, (_contest23__getQsosByKeyArray *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTo_contest23__AddAndGetLogSummary:
		soap_serialize_PointerTo_contest23__AddAndGetLogSummary(soap, (_contest23__AddAndGetLogSummary *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTo_contest23__addAndGetQsos:
		soap_serialize_PointerTo_contest23__addAndGetQsos(soap, (_contest23__addAndGetQsos *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTo_contest23__GetSessionId:
		soap_serialize_PointerTo_contest23__GetSessionId(soap, (_contest23__GetSessionId *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTocontest25__ArrayOfRigFrequency:
		soap_serialize_PointerTocontest25__ArrayOfRigFrequency(soap, (contest25__ArrayOfRigFrequency *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTocontest26__ArrayOfint:
		soap_serialize_PointerTocontest26__ArrayOfint(soap, (contest26__ArrayOfint *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTocontest25__LogSummary:
		soap_serialize_PointerTocontest25__LogSummary(soap, (contest25__LogSummary *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTocontest25__QsoUpdate:
		soap_serialize_PointerTocontest25__QsoUpdate(soap, (contest25__QsoUpdate *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTocontest25__RigFrequency:
		soap_serialize_PointerTocontest25__RigFrequency(soap, (contest25__RigFrequency *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTocontest25__QsoIdVersion:
		soap_serialize_PointerTocontest25__QsoIdVersion(soap, (contest25__QsoIdVersion *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTocontest25__ArrayOfQsoIdVersion:
		soap_serialize_PointerTocontest25__ArrayOfQsoIdVersion(soap, (contest25__ArrayOfQsoIdVersion *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTocontest25__ArrayOfQso:
		soap_serialize_PointerTocontest25__ArrayOfQso(soap, (contest25__ArrayOfQso *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTocontest26__ArrayOfstring:
		soap_serialize_PointerTocontest26__ArrayOfstring(soap, (contest26__ArrayOfstring *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTocontest25__Qso:
		soap_serialize_PointerTocontest25__Qso(soap, (contest25__Qso *const*)ptr);
		break;
	case SOAP_TYPE_C2_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE_C2__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_C2_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}

SOAP_FMAC3 void * SOAP_FMAC4 C2_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_C2_xsd__anyType:
		return (void*)soap_instantiate_xsd__anyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__ID__:
		return (void*)soap_instantiate_xsd__ID__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__IDREF__:
		return (void*)soap_instantiate_xsd__IDREF__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__QName__:
		return (void*)soap_instantiate_xsd__QName__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__anyURI__:
		return (void*)soap_instantiate_xsd__anyURI__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__base64Binary__:
		return (void*)soap_instantiate_xsd__base64Binary__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__boolean_:
		return (void*)soap_instantiate_xsd__boolean_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__byte__:
		return (void*)soap_instantiate_xsd__byte__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__dateTime_:
		return (void*)soap_instantiate_xsd__dateTime_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__decimal__:
		return (void*)soap_instantiate_xsd__decimal__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__double_:
		return (void*)soap_instantiate_xsd__double_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__duration__:
		return (void*)soap_instantiate_xsd__duration__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__float_:
		return (void*)soap_instantiate_xsd__float_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__int_:
		return (void*)soap_instantiate_xsd__int_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__long_:
		return (void*)soap_instantiate_xsd__long_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__short_:
		return (void*)soap_instantiate_xsd__short_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__string_:
		return (void*)soap_instantiate_xsd__string_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__unsignedByte__:
		return (void*)soap_instantiate_xsd__unsignedByte__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__unsignedInt_:
		return (void*)soap_instantiate_xsd__unsignedInt_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__unsignedLong_:
		return (void*)soap_instantiate_xsd__unsignedLong_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__unsignedShort_:
		return (void*)soap_instantiate_xsd__unsignedShort_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest24__char__:
		return (void*)soap_instantiate_contest24__char__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest24__duration__:
		return (void*)soap_instantiate_contest24__duration__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest24__guid__:
		return (void*)soap_instantiate_contest24__guid__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest26__ArrayOfstring:
		return (void*)soap_instantiate_contest26__ArrayOfstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest26__ArrayOfint:
		return (void*)soap_instantiate_contest26__ArrayOfint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest25__ArrayOfQso:
		return (void*)soap_instantiate_contest25__ArrayOfQso(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest25__Qso:
		return (void*)soap_instantiate_contest25__Qso(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest25__QsoUpdate:
		return (void*)soap_instantiate_contest25__QsoUpdate(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest25__LogSummary:
		return (void*)soap_instantiate_contest25__LogSummary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion:
		return (void*)soap_instantiate_contest25__ArrayOfQsoIdVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest25__QsoIdVersion:
		return (void*)soap_instantiate_contest25__QsoIdVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest25__ArrayOfRigFrequency:
		return (void*)soap_instantiate_contest25__ArrayOfRigFrequency(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest25__RigFrequency:
		return (void*)soap_instantiate_contest25__RigFrequency(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__GetSessionId:
		return (void*)soap_instantiate__contest23__GetSessionId(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__GetSessionIdResponse:
		return (void*)soap_instantiate__contest23__GetSessionIdResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__addAndGetQsos:
		return (void*)soap_instantiate__contest23__addAndGetQsos(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__addAndGetQsosResponse:
		return (void*)soap_instantiate__contest23__addAndGetQsosResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__AddAndGetLogSummary:
		return (void*)soap_instantiate__contest23__AddAndGetLogSummary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse:
		return (void*)soap_instantiate__contest23__AddAndGetLogSummaryResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__getQsosByKeyArray:
		return (void*)soap_instantiate__contest23__getQsosByKeyArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse:
		return (void*)soap_instantiate__contest23__getQsosByKeyArrayResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__ColumnNamesToIndices:
		return (void*)soap_instantiate__contest23__ColumnNamesToIndices(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse:
		return (void*)soap_instantiate__contest23__ColumnNamesToIndicesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__ExchangeFrequencies:
		return (void*)soap_instantiate__contest23__ExchangeFrequencies(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse:
		return (void*)soap_instantiate__contest23__ExchangeFrequenciesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2___contest23__GetSessionId:
		return (void*)soap_instantiate___contest23__GetSessionId(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2___contest23__addAndGetQsos:
		return (void*)soap_instantiate___contest23__addAndGetQsos(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2___contest23__AddAndGetLogSummary:
		return (void*)soap_instantiate___contest23__AddAndGetLogSummary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2___contest23__getQsosByKeyArray:
		return (void*)soap_instantiate___contest23__getQsosByKeyArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2___contest23__ColumnNamesToIndices:
		return (void*)soap_instantiate___contest23__ColumnNamesToIndices(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2___contest23__ExchangeFrequencies:
		return (void*)soap_instantiate___contest23__ExchangeFrequencies(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C2_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C2_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C2_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C2_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C2_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_C2_xsd__QName:
		return (void*)soap_instantiate_xsd__QName(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__ID:
		return (void*)soap_instantiate_xsd__ID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__IDREF:
		return (void*)soap_instantiate_xsd__IDREF(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__anyURI:
		return (void*)soap_instantiate_xsd__anyURI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__decimal:
		return (void*)soap_instantiate_xsd__decimal(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_xsd__duration:
		return (void*)soap_instantiate_xsd__duration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest24__duration:
		return (void*)soap_instantiate_contest24__duration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_contest24__guid:
		return (void*)soap_instantiate_contest24__guid(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__RigFrequency:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTocontest25__RigFrequency(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__QsoIdVersion:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__Qso:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerTocontest25__Qso(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_std__vectorTemplateOfint:
		return (void*)soap_instantiate_std__vectorTemplateOfint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_C2_std__vectorTemplateOfstd__string:
		return (void*)soap_instantiate_std__vectorTemplateOfstd__string(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 C2_fdelete(struct soap *soap, struct soap_clist *p)
{
	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_C2_xsd__anyType:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__anyType*>(p->ptr), xsd__anyType);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__anyType*>(p->ptr), xsd__anyType);
		break;
	case SOAP_TYPE_C2_std__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_C2_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__base64Binary*>(p->ptr), xsd__base64Binary);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__base64Binary*>(p->ptr), xsd__base64Binary);
		break;
	case SOAP_TYPE_C2_xsd__ID__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__ID__*>(p->ptr), xsd__ID__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__ID__*>(p->ptr), xsd__ID__);
		break;
	case SOAP_TYPE_C2_xsd__IDREF__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__IDREF__*>(p->ptr), xsd__IDREF__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__IDREF__*>(p->ptr), xsd__IDREF__);
		break;
	case SOAP_TYPE_C2_xsd__QName__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__QName__*>(p->ptr), xsd__QName__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__QName__*>(p->ptr), xsd__QName__);
		break;
	case SOAP_TYPE_C2_xsd__anyURI__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__anyURI__*>(p->ptr), xsd__anyURI__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__anyURI__*>(p->ptr), xsd__anyURI__);
		break;
	case SOAP_TYPE_C2_xsd__base64Binary__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__base64Binary__*>(p->ptr), xsd__base64Binary__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__base64Binary__*>(p->ptr), xsd__base64Binary__);
		break;
	case SOAP_TYPE_C2_xsd__boolean_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__boolean_*>(p->ptr), xsd__boolean_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__boolean_*>(p->ptr), xsd__boolean_);
		break;
	case SOAP_TYPE_C2_xsd__byte__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__byte__*>(p->ptr), xsd__byte__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__byte__*>(p->ptr), xsd__byte__);
		break;
	case SOAP_TYPE_C2_xsd__dateTime_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__dateTime_*>(p->ptr), xsd__dateTime_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__dateTime_*>(p->ptr), xsd__dateTime_);
		break;
	case SOAP_TYPE_C2_xsd__decimal__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__decimal__*>(p->ptr), xsd__decimal__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__decimal__*>(p->ptr), xsd__decimal__);
		break;
	case SOAP_TYPE_C2_xsd__double_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__double_*>(p->ptr), xsd__double_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__double_*>(p->ptr), xsd__double_);
		break;
	case SOAP_TYPE_C2_xsd__duration__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__duration__*>(p->ptr), xsd__duration__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__duration__*>(p->ptr), xsd__duration__);
		break;
	case SOAP_TYPE_C2_xsd__float_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__float_*>(p->ptr), xsd__float_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__float_*>(p->ptr), xsd__float_);
		break;
	case SOAP_TYPE_C2_xsd__int_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__int_*>(p->ptr), xsd__int_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__int_*>(p->ptr), xsd__int_);
		break;
	case SOAP_TYPE_C2_xsd__long_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__long_*>(p->ptr), xsd__long_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__long_*>(p->ptr), xsd__long_);
		break;
	case SOAP_TYPE_C2_xsd__short_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__short_*>(p->ptr), xsd__short_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__short_*>(p->ptr), xsd__short_);
		break;
	case SOAP_TYPE_C2_xsd__string_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__string_*>(p->ptr), xsd__string_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__string_*>(p->ptr), xsd__string_);
		break;
	case SOAP_TYPE_C2_xsd__unsignedByte__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__unsignedByte__*>(p->ptr), xsd__unsignedByte__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__unsignedByte__*>(p->ptr), xsd__unsignedByte__);
		break;
	case SOAP_TYPE_C2_xsd__unsignedInt_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__unsignedInt_*>(p->ptr), xsd__unsignedInt_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__unsignedInt_*>(p->ptr), xsd__unsignedInt_);
		break;
	case SOAP_TYPE_C2_xsd__unsignedLong_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__unsignedLong_*>(p->ptr), xsd__unsignedLong_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__unsignedLong_*>(p->ptr), xsd__unsignedLong_);
		break;
	case SOAP_TYPE_C2_xsd__unsignedShort_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<xsd__unsignedShort_*>(p->ptr), xsd__unsignedShort_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<xsd__unsignedShort_*>(p->ptr), xsd__unsignedShort_);
		break;
	case SOAP_TYPE_C2_contest24__char__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest24__char__*>(p->ptr), contest24__char__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest24__char__*>(p->ptr), contest24__char__);
		break;
	case SOAP_TYPE_C2_contest24__duration__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest24__duration__*>(p->ptr), contest24__duration__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest24__duration__*>(p->ptr), contest24__duration__);
		break;
	case SOAP_TYPE_C2_contest24__guid__:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest24__guid__*>(p->ptr), contest24__guid__);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest24__guid__*>(p->ptr), contest24__guid__);
		break;
	case SOAP_TYPE_C2_contest26__ArrayOfstring:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest26__ArrayOfstring*>(p->ptr), contest26__ArrayOfstring);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest26__ArrayOfstring*>(p->ptr), contest26__ArrayOfstring);
		break;
	case SOAP_TYPE_C2_contest26__ArrayOfint:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest26__ArrayOfint*>(p->ptr), contest26__ArrayOfint);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest26__ArrayOfint*>(p->ptr), contest26__ArrayOfint);
		break;
	case SOAP_TYPE_C2_contest25__ArrayOfQso:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest25__ArrayOfQso*>(p->ptr), contest25__ArrayOfQso);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest25__ArrayOfQso*>(p->ptr), contest25__ArrayOfQso);
		break;
	case SOAP_TYPE_C2_contest25__Qso:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest25__Qso*>(p->ptr), contest25__Qso);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest25__Qso*>(p->ptr), contest25__Qso);
		break;
	case SOAP_TYPE_C2_contest25__QsoUpdate:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest25__QsoUpdate*>(p->ptr), contest25__QsoUpdate);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest25__QsoUpdate*>(p->ptr), contest25__QsoUpdate);
		break;
	case SOAP_TYPE_C2_contest25__LogSummary:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest25__LogSummary*>(p->ptr), contest25__LogSummary);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest25__LogSummary*>(p->ptr), contest25__LogSummary);
		break;
	case SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest25__ArrayOfQsoIdVersion*>(p->ptr), contest25__ArrayOfQsoIdVersion);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest25__ArrayOfQsoIdVersion*>(p->ptr), contest25__ArrayOfQsoIdVersion);
		break;
	case SOAP_TYPE_C2_contest25__QsoIdVersion:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest25__QsoIdVersion*>(p->ptr), contest25__QsoIdVersion);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest25__QsoIdVersion*>(p->ptr), contest25__QsoIdVersion);
		break;
	case SOAP_TYPE_C2_contest25__ArrayOfRigFrequency:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest25__ArrayOfRigFrequency*>(p->ptr), contest25__ArrayOfRigFrequency);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest25__ArrayOfRigFrequency*>(p->ptr), contest25__ArrayOfRigFrequency);
		break;
	case SOAP_TYPE_C2_contest25__RigFrequency:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<contest25__RigFrequency*>(p->ptr), contest25__RigFrequency);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<contest25__RigFrequency*>(p->ptr), contest25__RigFrequency);
		break;
	case SOAP_TYPE_C2__contest23__GetSessionId:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_contest23__GetSessionId*>(p->ptr), _contest23__GetSessionId);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_contest23__GetSessionId*>(p->ptr), _contest23__GetSessionId);
		break;
	case SOAP_TYPE_C2__contest23__GetSessionIdResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_contest23__GetSessionIdResponse*>(p->ptr), _contest23__GetSessionIdResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_contest23__GetSessionIdResponse*>(p->ptr), _contest23__GetSessionIdResponse);
		break;
	case SOAP_TYPE_C2__contest23__addAndGetQsos:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_contest23__addAndGetQsos*>(p->ptr), _contest23__addAndGetQsos);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_contest23__addAndGetQsos*>(p->ptr), _contest23__addAndGetQsos);
		break;
	case SOAP_TYPE_C2__contest23__addAndGetQsosResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_contest23__addAndGetQsosResponse*>(p->ptr), _contest23__addAndGetQsosResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_contest23__addAndGetQsosResponse*>(p->ptr), _contest23__addAndGetQsosResponse);
		break;
	case SOAP_TYPE_C2__contest23__AddAndGetLogSummary:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_contest23__AddAndGetLogSummary*>(p->ptr), _contest23__AddAndGetLogSummary);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_contest23__AddAndGetLogSummary*>(p->ptr), _contest23__AddAndGetLogSummary);
		break;
	case SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_contest23__AddAndGetLogSummaryResponse*>(p->ptr), _contest23__AddAndGetLogSummaryResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_contest23__AddAndGetLogSummaryResponse*>(p->ptr), _contest23__AddAndGetLogSummaryResponse);
		break;
	case SOAP_TYPE_C2__contest23__getQsosByKeyArray:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_contest23__getQsosByKeyArray*>(p->ptr), _contest23__getQsosByKeyArray);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_contest23__getQsosByKeyArray*>(p->ptr), _contest23__getQsosByKeyArray);
		break;
	case SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_contest23__getQsosByKeyArrayResponse*>(p->ptr), _contest23__getQsosByKeyArrayResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_contest23__getQsosByKeyArrayResponse*>(p->ptr), _contest23__getQsosByKeyArrayResponse);
		break;
	case SOAP_TYPE_C2__contest23__ColumnNamesToIndices:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_contest23__ColumnNamesToIndices*>(p->ptr), _contest23__ColumnNamesToIndices);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_contest23__ColumnNamesToIndices*>(p->ptr), _contest23__ColumnNamesToIndices);
		break;
	case SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_contest23__ColumnNamesToIndicesResponse*>(p->ptr), _contest23__ColumnNamesToIndicesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_contest23__ColumnNamesToIndicesResponse*>(p->ptr), _contest23__ColumnNamesToIndicesResponse);
		break;
	case SOAP_TYPE_C2__contest23__ExchangeFrequencies:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_contest23__ExchangeFrequencies*>(p->ptr), _contest23__ExchangeFrequencies);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_contest23__ExchangeFrequencies*>(p->ptr), _contest23__ExchangeFrequencies);
		break;
	case SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_contest23__ExchangeFrequenciesResponse*>(p->ptr), _contest23__ExchangeFrequenciesResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_contest23__ExchangeFrequenciesResponse*>(p->ptr), _contest23__ExchangeFrequenciesResponse);
		break;
	case SOAP_TYPE_C2___contest23__GetSessionId:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __contest23__GetSessionId*>(p->ptr), struct __contest23__GetSessionId);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __contest23__GetSessionId*>(p->ptr), struct __contest23__GetSessionId);
		break;
	case SOAP_TYPE_C2___contest23__addAndGetQsos:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __contest23__addAndGetQsos*>(p->ptr), struct __contest23__addAndGetQsos);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __contest23__addAndGetQsos*>(p->ptr), struct __contest23__addAndGetQsos);
		break;
	case SOAP_TYPE_C2___contest23__AddAndGetLogSummary:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __contest23__AddAndGetLogSummary*>(p->ptr), struct __contest23__AddAndGetLogSummary);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __contest23__AddAndGetLogSummary*>(p->ptr), struct __contest23__AddAndGetLogSummary);
		break;
	case SOAP_TYPE_C2___contest23__getQsosByKeyArray:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __contest23__getQsosByKeyArray*>(p->ptr), struct __contest23__getQsosByKeyArray);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __contest23__getQsosByKeyArray*>(p->ptr), struct __contest23__getQsosByKeyArray);
		break;
	case SOAP_TYPE_C2___contest23__ColumnNamesToIndices:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __contest23__ColumnNamesToIndices*>(p->ptr), struct __contest23__ColumnNamesToIndices);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __contest23__ColumnNamesToIndices*>(p->ptr), struct __contest23__ColumnNamesToIndices);
		break;
	case SOAP_TYPE_C2___contest23__ExchangeFrequencies:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __contest23__ExchangeFrequencies*>(p->ptr), struct __contest23__ExchangeFrequencies);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __contest23__ExchangeFrequencies*>(p->ptr), struct __contest23__ExchangeFrequencies);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C2_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C2_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C2_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C2_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C2_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	case SOAP_TYPE_C2_xsd__QName:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_C2_xsd__ID:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_C2_xsd__IDREF:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_C2_xsd__anyURI:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_C2_xsd__decimal:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_C2_xsd__duration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_C2_contest24__duration:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_C2_contest24__guid:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__RigFrequency:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<contest25__RigFrequency *> *>(p->ptr), std::vector<contest25__RigFrequency *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<contest25__RigFrequency *> *>(p->ptr), std::vector<contest25__RigFrequency *> );
		break;
	case SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__QsoIdVersion:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<contest25__QsoIdVersion *> *>(p->ptr), std::vector<contest25__QsoIdVersion *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<contest25__QsoIdVersion *> *>(p->ptr), std::vector<contest25__QsoIdVersion *> );
		break;
	case SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__Qso:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<contest25__Qso *> *>(p->ptr), std::vector<contest25__Qso *> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<contest25__Qso *> *>(p->ptr), std::vector<contest25__Qso *> );
		break;
	case SOAP_TYPE_C2_std__vectorTemplateOfint:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<int> *>(p->ptr), std::vector<int> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<int> *>(p->ptr), std::vector<int> );
		break;
	case SOAP_TYPE_C2_std__vectorTemplateOfstd__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::vector<std::string> *>(p->ptr), std::vector<std::string> );
		break;
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 C2_fbase(int t, int b)
{
	do
	{	switch (t)
		{

		case SOAP_TYPE_C2_xsd__ID__: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_xsd__IDREF__: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_xsd__QName__: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_xsd__anyURI__: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_xsd__base64Binary__: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_xsd__boolean_: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_xsd__byte__: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_xsd__dateTime_: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_xsd__decimal__: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_xsd__double_: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_xsd__duration__: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_xsd__float_: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_xsd__int_: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_xsd__long_: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_xsd__short_: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_xsd__string_: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_xsd__unsignedByte__: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_xsd__unsignedInt_: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_xsd__unsignedLong_: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_xsd__unsignedShort_: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_contest24__char__: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_contest24__duration__: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_contest24__guid__: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_contest26__ArrayOfstring: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_contest26__ArrayOfint: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_contest25__ArrayOfQso: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_contest25__Qso: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_contest25__QsoUpdate: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_contest25__LogSummary: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_contest25__QsoIdVersion: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_contest25__ArrayOfRigFrequency: t = SOAP_TYPE_C2_xsd__anyType; break;
		case SOAP_TYPE_C2_contest25__RigFrequency: t = SOAP_TYPE_C2_xsd__anyType; break;
		default: return 0;
		}
	}
	while (t != b);
	return 1;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 C2_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__RigFrequency:
		if (t == SOAP_TYPE_C2_contest25__RigFrequency || C2_fbase(t, SOAP_TYPE_C2_contest25__RigFrequency))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<contest25__RigFrequency *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<contest25__RigFrequency *> *)p)[index] = *(contest25__RigFrequency **)q;
		}
		break;
	case SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__QsoIdVersion:
		if (t == SOAP_TYPE_C2_contest25__QsoIdVersion || C2_fbase(t, SOAP_TYPE_C2_contest25__QsoIdVersion))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<contest25__QsoIdVersion *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<contest25__QsoIdVersion *> *)p)[index] = *(contest25__QsoIdVersion **)q;
		}
		break;
	case SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__Qso:
		if (t == SOAP_TYPE_C2_contest25__Qso || C2_fbase(t, SOAP_TYPE_C2_contest25__Qso))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<contest25__Qso *>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<contest25__Qso *> *)p)[index] = *(contest25__Qso **)q;
		}
		break;
	case SOAP_TYPE_C2_std__vectorTemplateOfint:
		if (t == SOAP_TYPE_C2_int)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<int>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<int> *)p)[index] = *(int *)q;
		}
		break;
	case SOAP_TYPE_C2_std__vectorTemplateOfstd__string:
		if (t == SOAP_TYPE_C2_std__string)
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container std::vector<std::string>  insert type=%d in %d location=%p object=%p at index=%lu\n", t, tt, p, q, (unsigned long)index));
			(*(std::vector<std::string> *)p)[index] = *(std::string *)q;
		}
		break;
	case SOAP_TYPE_C2_xsd__anyType:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__anyType type=%d location=%p object=%p\n", t, p, q));
		*(xsd__anyType*)p = *(xsd__anyType*)q;
		break;
	case SOAP_TYPE_C2_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_C2_xsd__base64Binary:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__base64Binary type=%d location=%p object=%p\n", t, p, q));
		*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
		break;
	case SOAP_TYPE_C2_xsd__ID__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__ID__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__ID__*)p = *(xsd__ID__*)q;
		break;
	case SOAP_TYPE_C2_xsd__IDREF__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__IDREF__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__IDREF__*)p = *(xsd__IDREF__*)q;
		break;
	case SOAP_TYPE_C2_xsd__QName__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__QName__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__QName__*)p = *(xsd__QName__*)q;
		break;
	case SOAP_TYPE_C2_xsd__anyURI__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__anyURI__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__anyURI__*)p = *(xsd__anyURI__*)q;
		break;
	case SOAP_TYPE_C2_xsd__base64Binary__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__base64Binary__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__base64Binary__*)p = *(xsd__base64Binary__*)q;
		break;
	case SOAP_TYPE_C2_xsd__boolean_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__boolean_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__boolean_*)p = *(xsd__boolean_*)q;
		break;
	case SOAP_TYPE_C2_xsd__byte__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__byte__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__byte__*)p = *(xsd__byte__*)q;
		break;
	case SOAP_TYPE_C2_xsd__dateTime_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__dateTime_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__dateTime_*)p = *(xsd__dateTime_*)q;
		break;
	case SOAP_TYPE_C2_xsd__decimal__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__decimal__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__decimal__*)p = *(xsd__decimal__*)q;
		break;
	case SOAP_TYPE_C2_xsd__double_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__double_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__double_*)p = *(xsd__double_*)q;
		break;
	case SOAP_TYPE_C2_xsd__duration__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__duration__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__duration__*)p = *(xsd__duration__*)q;
		break;
	case SOAP_TYPE_C2_xsd__float_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__float_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__float_*)p = *(xsd__float_*)q;
		break;
	case SOAP_TYPE_C2_xsd__int_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__int_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__int_*)p = *(xsd__int_*)q;
		break;
	case SOAP_TYPE_C2_xsd__long_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__long_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__long_*)p = *(xsd__long_*)q;
		break;
	case SOAP_TYPE_C2_xsd__short_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__short_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__short_*)p = *(xsd__short_*)q;
		break;
	case SOAP_TYPE_C2_xsd__string_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__string_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__string_*)p = *(xsd__string_*)q;
		break;
	case SOAP_TYPE_C2_xsd__unsignedByte__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__unsignedByte__ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__unsignedByte__*)p = *(xsd__unsignedByte__*)q;
		break;
	case SOAP_TYPE_C2_xsd__unsignedInt_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__unsignedInt_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__unsignedInt_*)p = *(xsd__unsignedInt_*)q;
		break;
	case SOAP_TYPE_C2_xsd__unsignedLong_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__unsignedLong_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__unsignedLong_*)p = *(xsd__unsignedLong_*)q;
		break;
	case SOAP_TYPE_C2_xsd__unsignedShort_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy xsd__unsignedShort_ type=%d location=%p object=%p\n", t, p, q));
		*(xsd__unsignedShort_*)p = *(xsd__unsignedShort_*)q;
		break;
	case SOAP_TYPE_C2_contest24__char__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest24__char__ type=%d location=%p object=%p\n", t, p, q));
		*(contest24__char__*)p = *(contest24__char__*)q;
		break;
	case SOAP_TYPE_C2_contest24__duration__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest24__duration__ type=%d location=%p object=%p\n", t, p, q));
		*(contest24__duration__*)p = *(contest24__duration__*)q;
		break;
	case SOAP_TYPE_C2_contest24__guid__:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest24__guid__ type=%d location=%p object=%p\n", t, p, q));
		*(contest24__guid__*)p = *(contest24__guid__*)q;
		break;
	case SOAP_TYPE_C2_contest26__ArrayOfstring:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest26__ArrayOfstring type=%d location=%p object=%p\n", t, p, q));
		*(contest26__ArrayOfstring*)p = *(contest26__ArrayOfstring*)q;
		break;
	case SOAP_TYPE_C2_contest26__ArrayOfint:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest26__ArrayOfint type=%d location=%p object=%p\n", t, p, q));
		*(contest26__ArrayOfint*)p = *(contest26__ArrayOfint*)q;
		break;
	case SOAP_TYPE_C2_contest25__ArrayOfQso:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest25__ArrayOfQso type=%d location=%p object=%p\n", t, p, q));
		*(contest25__ArrayOfQso*)p = *(contest25__ArrayOfQso*)q;
		break;
	case SOAP_TYPE_C2_contest25__Qso:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest25__Qso type=%d location=%p object=%p\n", t, p, q));
		*(contest25__Qso*)p = *(contest25__Qso*)q;
		break;
	case SOAP_TYPE_C2_contest25__QsoUpdate:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest25__QsoUpdate type=%d location=%p object=%p\n", t, p, q));
		*(contest25__QsoUpdate*)p = *(contest25__QsoUpdate*)q;
		break;
	case SOAP_TYPE_C2_contest25__LogSummary:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest25__LogSummary type=%d location=%p object=%p\n", t, p, q));
		*(contest25__LogSummary*)p = *(contest25__LogSummary*)q;
		break;
	case SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest25__ArrayOfQsoIdVersion type=%d location=%p object=%p\n", t, p, q));
		*(contest25__ArrayOfQsoIdVersion*)p = *(contest25__ArrayOfQsoIdVersion*)q;
		break;
	case SOAP_TYPE_C2_contest25__QsoIdVersion:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest25__QsoIdVersion type=%d location=%p object=%p\n", t, p, q));
		*(contest25__QsoIdVersion*)p = *(contest25__QsoIdVersion*)q;
		break;
	case SOAP_TYPE_C2_contest25__ArrayOfRigFrequency:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest25__ArrayOfRigFrequency type=%d location=%p object=%p\n", t, p, q));
		*(contest25__ArrayOfRigFrequency*)p = *(contest25__ArrayOfRigFrequency*)q;
		break;
	case SOAP_TYPE_C2_contest25__RigFrequency:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy contest25__RigFrequency type=%d location=%p object=%p\n", t, p, q));
		*(contest25__RigFrequency*)p = *(contest25__RigFrequency*)q;
		break;
	case SOAP_TYPE_C2__contest23__GetSessionId:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _contest23__GetSessionId type=%d location=%p object=%p\n", t, p, q));
		*(_contest23__GetSessionId*)p = *(_contest23__GetSessionId*)q;
		break;
	case SOAP_TYPE_C2__contest23__GetSessionIdResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _contest23__GetSessionIdResponse type=%d location=%p object=%p\n", t, p, q));
		*(_contest23__GetSessionIdResponse*)p = *(_contest23__GetSessionIdResponse*)q;
		break;
	case SOAP_TYPE_C2__contest23__addAndGetQsos:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _contest23__addAndGetQsos type=%d location=%p object=%p\n", t, p, q));
		*(_contest23__addAndGetQsos*)p = *(_contest23__addAndGetQsos*)q;
		break;
	case SOAP_TYPE_C2__contest23__addAndGetQsosResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _contest23__addAndGetQsosResponse type=%d location=%p object=%p\n", t, p, q));
		*(_contest23__addAndGetQsosResponse*)p = *(_contest23__addAndGetQsosResponse*)q;
		break;
	case SOAP_TYPE_C2__contest23__AddAndGetLogSummary:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _contest23__AddAndGetLogSummary type=%d location=%p object=%p\n", t, p, q));
		*(_contest23__AddAndGetLogSummary*)p = *(_contest23__AddAndGetLogSummary*)q;
		break;
	case SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _contest23__AddAndGetLogSummaryResponse type=%d location=%p object=%p\n", t, p, q));
		*(_contest23__AddAndGetLogSummaryResponse*)p = *(_contest23__AddAndGetLogSummaryResponse*)q;
		break;
	case SOAP_TYPE_C2__contest23__getQsosByKeyArray:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _contest23__getQsosByKeyArray type=%d location=%p object=%p\n", t, p, q));
		*(_contest23__getQsosByKeyArray*)p = *(_contest23__getQsosByKeyArray*)q;
		break;
	case SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _contest23__getQsosByKeyArrayResponse type=%d location=%p object=%p\n", t, p, q));
		*(_contest23__getQsosByKeyArrayResponse*)p = *(_contest23__getQsosByKeyArrayResponse*)q;
		break;
	case SOAP_TYPE_C2__contest23__ColumnNamesToIndices:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _contest23__ColumnNamesToIndices type=%d location=%p object=%p\n", t, p, q));
		*(_contest23__ColumnNamesToIndices*)p = *(_contest23__ColumnNamesToIndices*)q;
		break;
	case SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _contest23__ColumnNamesToIndicesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_contest23__ColumnNamesToIndicesResponse*)p = *(_contest23__ColumnNamesToIndicesResponse*)q;
		break;
	case SOAP_TYPE_C2__contest23__ExchangeFrequencies:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _contest23__ExchangeFrequencies type=%d location=%p object=%p\n", t, p, q));
		*(_contest23__ExchangeFrequencies*)p = *(_contest23__ExchangeFrequencies*)q;
		break;
	case SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _contest23__ExchangeFrequenciesResponse type=%d location=%p object=%p\n", t, p, q));
		*(_contest23__ExchangeFrequenciesResponse*)p = *(_contest23__ExchangeFrequenciesResponse*)q;
		break;
	case SOAP_TYPE_C2___contest23__GetSessionId:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __contest23__GetSessionId type=%d location=%p object=%p\n", t, p, q));
		*(struct __contest23__GetSessionId*)p = *(struct __contest23__GetSessionId*)q;
		break;
	case SOAP_TYPE_C2___contest23__addAndGetQsos:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __contest23__addAndGetQsos type=%d location=%p object=%p\n", t, p, q));
		*(struct __contest23__addAndGetQsos*)p = *(struct __contest23__addAndGetQsos*)q;
		break;
	case SOAP_TYPE_C2___contest23__AddAndGetLogSummary:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __contest23__AddAndGetLogSummary type=%d location=%p object=%p\n", t, p, q));
		*(struct __contest23__AddAndGetLogSummary*)p = *(struct __contest23__AddAndGetLogSummary*)q;
		break;
	case SOAP_TYPE_C2___contest23__getQsosByKeyArray:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __contest23__getQsosByKeyArray type=%d location=%p object=%p\n", t, p, q));
		*(struct __contest23__getQsosByKeyArray*)p = *(struct __contest23__getQsosByKeyArray*)q;
		break;
	case SOAP_TYPE_C2___contest23__ColumnNamesToIndices:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __contest23__ColumnNamesToIndices type=%d location=%p object=%p\n", t, p, q));
		*(struct __contest23__ColumnNamesToIndices*)p = *(struct __contest23__ColumnNamesToIndices*)q;
		break;
	case SOAP_TYPE_C2___contest23__ExchangeFrequencies:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __contest23__ExchangeFrequencies type=%d location=%p object=%p\n", t, p, q));
		*(struct __contest23__ExchangeFrequencies*)p = *(struct __contest23__ExchangeFrequencies*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C2_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C2_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C2_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C2_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_C2_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	case SOAP_TYPE_C2_xsd__QName:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_C2_xsd__ID:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_C2_xsd__IDREF:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_C2_xsd__anyURI:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_C2_xsd__decimal:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_C2_xsd__duration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_C2_contest24__duration:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE_C2_contest24__guid:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_C2_xsd__byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_xsd__byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_C2_xsd__byte);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_xsd__byte(soap, tag ? tag : "xsd:byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_xsd__byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_C2_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_C2_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap *soap, const char *tag, int id, const short *a, const char *type)
{
	return soap_outshort(soap, tag, id, a, type, SOAP_TYPE_C2_short);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap *soap, const char *tag, short *a, const char *type)
{
	a = soap_inshort(soap, tag, a, type, SOAP_TYPE_C2_short);
	return a;
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_new_short(struct soap *soap, int n)
{
	short *a = static_cast<short *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(short)));
	for (short *p = a; p && n--; ++p)
		soap_default_short(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap *soap, const short *a, const char *tag, const char *type)
{
	if (soap_out_short(soap, tag ? tag : "short", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap *soap, short *p, const char *tag, const char *type)
{
	if ((p = soap_in_short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest24__char(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_C2_contest24__char);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_contest24__char(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_C2_contest24__char);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest24__char(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_contest24__char(soap, tag ? tag : "contest24:char", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_contest24__char(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest24__char(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_C2_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_C2_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_C2_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{
	a = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_C2_LONG64);
	return a;
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_new_LONG64(struct soap *soap, int n)
{
	LONG64 *a = static_cast<LONG64 *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(LONG64)));
	for (LONG64 *p = a; p && n--; ++p)
		soap_default_LONG64(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	if (soap_out_LONG64(soap, tag ? tag : "long", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_C2_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{
	a = soap_infloat(soap, tag, a, type, SOAP_TYPE_C2_float);
	return a;
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_new_float(struct soap *soap, int n)
{
	float *a = static_cast<float *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(float)));
	for (float *p = a; p && n--; ++p)
		soap_default_float(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	if (soap_out_float(soap, tag ? tag : "float", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_C2_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{
	a = soap_indouble(soap, tag, a, type, SOAP_TYPE_C2_double);
	return a;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_new_double(struct soap *soap, int n)
{
	double *a = static_cast<double *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(double)));
	for (double *p = a; p && n--; ++p)
		soap_default_double(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	if (soap_out_double(soap, tag ? tag : "double", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_C2_xsd__unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	a = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_C2_xsd__unsignedByte);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	if (soap_out_xsd__unsignedByte(soap, tag ? tag : "xsd:unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_C2_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	a = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_C2_unsignedByte);
	return a;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_new_unsignedByte(struct soap *soap, int n)
{
	unsigned char *a = static_cast<unsigned char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned char)));
	for (unsigned char *p = a; p && n--; ++p)
		soap_default_unsignedByte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	if (soap_out_unsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap *soap, const char *tag, int id, const unsigned short *a, const char *type)
{
	return soap_outunsignedShort(soap, tag, id, a, type, SOAP_TYPE_C2_unsignedShort);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap *soap, const char *tag, unsigned short *a, const char *type)
{
	a = soap_inunsignedShort(soap, tag, a, type, SOAP_TYPE_C2_unsignedShort);
	return a;
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_new_unsignedShort(struct soap *soap, int n)
{
	unsigned short *a = static_cast<unsigned short *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned short)));
	for (unsigned short *p = a; p && n--; ++p)
		soap_default_unsignedShort(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap *soap, const unsigned short *a, const char *tag, const char *type)
{
	if (soap_out_unsignedShort(soap, tag ? tag : "unsignedShort", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap *soap, unsigned short *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedShort(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_C2_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	a = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_C2_unsignedInt);
	return a;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_new_unsignedInt(struct soap *soap, int n)
{
	unsigned int *a = static_cast<unsigned int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(unsigned int)));
	for (unsigned int *p = a; p && n--; ++p)
		soap_default_unsignedInt(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	if (soap_out_unsignedInt(soap, tag ? tag : "unsignedInt", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ULONG64(struct soap *soap, const char *tag, int id, const ULONG64 *a, const char *type)
{
	return soap_outULONG64(soap, tag, id, a, type, SOAP_TYPE_C2_ULONG64);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_ULONG64(struct soap *soap, const char *tag, ULONG64 *a, const char *type)
{
	a = soap_inULONG64(soap, tag, a, type, SOAP_TYPE_C2_ULONG64);
	return a;
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_new_ULONG64(struct soap *soap, int n)
{
	ULONG64 *a = static_cast<ULONG64 *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(ULONG64)));
	for (ULONG64 *p = a; p && n--; ++p)
		soap_default_ULONG64(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ULONG64(struct soap *soap, const ULONG64 *a, const char *tag, const char *type)
{
	if (soap_out_ULONG64(soap, tag ? tag : "unsignedLong", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_ULONG64(struct soap *soap, ULONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_ULONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_dateTime(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_C2_dateTime);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_dateTime(struct soap *soap, const char *tag, time_t *a, const char *type)
{
	a = soap_indateTime(soap, tag, a, type, SOAP_TYPE_C2_dateTime);
	return a;
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_new_dateTime(struct soap *soap, int n)
{
	time_t *a = static_cast<time_t *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(time_t)));
	for (time_t *p = a; p && n--; ++p)
		soap_default_dateTime(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_dateTime(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	if (soap_out_dateTime(soap, tag ? tag : "dateTime", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_dateTime(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (LONG64)false, "false" },
	{ (LONG64)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
	return soap_code_str(soap_codes_bool, n != 0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else if (!*s)
		return soap->error = SOAP_EMPTY;
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_bool, sizeof(bool), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (*soap->href != '#')
	{	int err = soap_s2bool(soap, soap_value(soap), a);
		if ((soap->body && soap_element_end_in(soap, tag)) || err)
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_bool, SOAP_TYPE_C2_bool, sizeof(bool), 0, NULL, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_new_bool(struct soap *soap, int n)
{
	bool *a = static_cast<bool *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(bool)));
	for (bool *p = a; p && n--; ++p)
		soap_default_bool(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	if (soap_out_bool(soap, tag ? tag : "boolean", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest24__guid__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_contest24__guid(soap, &this->contest24__guid__::__item);
}

void contest24__guid__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_contest24__guid(soap, &this->contest24__guid__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int contest24__guid__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest24__guid__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest24__guid__(struct soap *soap, const char *tag, int id, const contest24__guid__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_contest24__guid(soap, tag, id, &a->contest24__guid__::__item, "contest24:guid");
}

void *contest24__guid__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest24__guid__(soap, tag, this, type);
}

SOAP_FMAC3 contest24__guid__ * SOAP_FMAC4 soap_in_contest24__guid__(struct soap *soap, const char *tag, contest24__guid__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (contest24__guid__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest24__guid__, sizeof(contest24__guid__), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_contest24__guid__)
		return (contest24__guid__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_contest24__guid(soap, tag, &a->contest24__guid__::__item, "contest24:guid"))
		return NULL;
	return a;
}

SOAP_FMAC1 contest24__guid__ * SOAP_FMAC2 soap_instantiate_contest24__guid__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest24__guid__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest24__guid__ *p;
	size_t k = sizeof(contest24__guid__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_contest24__guid__, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest24__guid__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest24__guid__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest24__guid__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest24__guid__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest24__guid__(soap, tag ? tag : "contest24:guid", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest24__guid__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest24__guid__(soap, this, tag, type);
}

SOAP_FMAC3 contest24__guid__ * SOAP_FMAC4 soap_get_contest24__guid__(struct soap *soap, contest24__guid__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest24__guid__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_contest24__guid(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest24__guid(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_C2_contest24__guid), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_contest24__guid(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_C2_contest24__guid, sizeof(std::string), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_C2_contest24__guid, sizeof(std::string), soap->type, soap->arrayType, C2_instantiate, C2_fbase), 0, SOAP_TYPE_C2_contest24__guid, SOAP_TYPE_C2_contest24__guid, sizeof(std::string), 0, C2_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest24__guid(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_contest24__guid(soap, tag ? tag : "contest24:guid", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_contest24__guid(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest24__guid(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest24__duration__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_contest24__duration(soap, &this->contest24__duration__::__item);
}

void contest24__duration__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_contest24__duration(soap, &this->contest24__duration__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int contest24__duration__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest24__duration__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest24__duration__(struct soap *soap, const char *tag, int id, const contest24__duration__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_contest24__duration(soap, tag, id, &a->contest24__duration__::__item, "contest24:duration");
}

void *contest24__duration__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest24__duration__(soap, tag, this, type);
}

SOAP_FMAC3 contest24__duration__ * SOAP_FMAC4 soap_in_contest24__duration__(struct soap *soap, const char *tag, contest24__duration__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (contest24__duration__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest24__duration__, sizeof(contest24__duration__), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_contest24__duration__)
		return (contest24__duration__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_contest24__duration(soap, tag, &a->contest24__duration__::__item, "contest24:duration"))
		return NULL;
	return a;
}

SOAP_FMAC1 contest24__duration__ * SOAP_FMAC2 soap_instantiate_contest24__duration__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest24__duration__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest24__duration__ *p;
	size_t k = sizeof(contest24__duration__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_contest24__duration__, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest24__duration__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest24__duration__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest24__duration__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest24__duration__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest24__duration__(soap, tag ? tag : "contest24:duration", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest24__duration__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest24__duration__(soap, this, tag, type);
}

SOAP_FMAC3 contest24__duration__ * SOAP_FMAC4 soap_get_contest24__duration__(struct soap *soap, contest24__duration__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest24__duration__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest24__duration(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_C2_contest24__duration), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_contest24__duration(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_C2_contest24__duration, sizeof(std::string), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 5, 0, -1, "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_C2_contest24__duration, sizeof(std::string), soap->type, soap->arrayType, C2_instantiate, C2_fbase), 0, SOAP_TYPE_C2_contest24__duration, SOAP_TYPE_C2_contest24__duration, sizeof(std::string), 0, C2_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_contest24__duration(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_contest24__duration(soap, tag ? tag : "contest24:duration", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_contest24__duration(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest24__duration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest24__char__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_contest24__char(soap, &this->contest24__char__::__item);
}

void contest24__char__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int contest24__char__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest24__char__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest24__char__(struct soap *soap, const char *tag, int id, const contest24__char__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_contest24__char(soap, tag, id, &a->contest24__char__::__item, "contest24:char");
}

void *contest24__char__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest24__char__(soap, tag, this, type);
}

SOAP_FMAC3 contest24__char__ * SOAP_FMAC4 soap_in_contest24__char__(struct soap *soap, const char *tag, contest24__char__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (contest24__char__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest24__char__, sizeof(contest24__char__), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_contest24__char__)
		return (contest24__char__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_contest24__char(soap, tag, &a->contest24__char__::__item, "contest24:char"))
		return NULL;
	return a;
}

SOAP_FMAC1 contest24__char__ * SOAP_FMAC2 soap_instantiate_contest24__char__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest24__char__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest24__char__ *p;
	size_t k = sizeof(contest24__char__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_contest24__char__, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest24__char__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest24__char__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest24__char__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest24__char__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest24__char__(soap, tag ? tag : "contest24:char", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest24__char__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest24__char__(soap, this, tag, type);
}

SOAP_FMAC3 contest24__char__ * SOAP_FMAC4 soap_get_contest24__char__(struct soap *soap, contest24__char__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest24__char__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _contest23__ExchangeFrequenciesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_contest23__ExchangeFrequenciesResponse::ExchangeFrequenciesResult = NULL;
}

void _contest23__ExchangeFrequenciesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTocontest25__ArrayOfRigFrequency(soap, &this->_contest23__ExchangeFrequenciesResponse::ExchangeFrequenciesResult);
#endif
}

int _contest23__ExchangeFrequenciesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__ExchangeFrequenciesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__ExchangeFrequenciesResponse(struct soap *soap, const char *tag, int id, const _contest23__ExchangeFrequenciesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse), type))
		return soap->error;
	if (a->ExchangeFrequenciesResult)
		soap_element_result(soap, "contest23:ExchangeFrequenciesResult");
	if (!a->_contest23__ExchangeFrequenciesResponse::ExchangeFrequenciesResult)
	{	if (soap_element_nil(soap, "contest23:ExchangeFrequenciesResult"))
			return soap->error;
	}
	else if (soap_out_PointerTocontest25__ArrayOfRigFrequency(soap, "contest23:ExchangeFrequenciesResult", -1, &a->_contest23__ExchangeFrequenciesResponse::ExchangeFrequenciesResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_contest23__ExchangeFrequenciesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__contest23__ExchangeFrequenciesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__ExchangeFrequenciesResponse * SOAP_FMAC4 soap_in__contest23__ExchangeFrequenciesResponse(struct soap *soap, const char *tag, _contest23__ExchangeFrequenciesResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__ExchangeFrequenciesResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse, sizeof(_contest23__ExchangeFrequenciesResponse), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_contest23__ExchangeFrequenciesResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_ExchangeFrequenciesResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ExchangeFrequenciesResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest25__ArrayOfRigFrequency(soap, "contest23:ExchangeFrequenciesResult", &a->_contest23__ExchangeFrequenciesResponse::ExchangeFrequenciesResult, "contest25:ArrayOfRigFrequency"))
				{	soap_flag_ExchangeFrequenciesResult1--;
					continue;
				}
			}
			soap_check_result(soap, "contest23:ExchangeFrequenciesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ExchangeFrequenciesResult1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_contest23__ExchangeFrequenciesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse, SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse, sizeof(_contest23__ExchangeFrequenciesResponse), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _contest23__ExchangeFrequenciesResponse * SOAP_FMAC2 soap_instantiate__contest23__ExchangeFrequenciesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__ExchangeFrequenciesResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_contest23__ExchangeFrequenciesResponse *p;
	size_t k = sizeof(_contest23__ExchangeFrequenciesResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2__contest23__ExchangeFrequenciesResponse, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _contest23__ExchangeFrequenciesResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _contest23__ExchangeFrequenciesResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _contest23__ExchangeFrequenciesResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _contest23__ExchangeFrequenciesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__contest23__ExchangeFrequenciesResponse(soap, tag ? tag : "contest23:ExchangeFrequenciesResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__ExchangeFrequenciesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__ExchangeFrequenciesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__ExchangeFrequenciesResponse * SOAP_FMAC4 soap_get__contest23__ExchangeFrequenciesResponse(struct soap *soap, _contest23__ExchangeFrequenciesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__ExchangeFrequenciesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _contest23__ExchangeFrequencies::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_contest23__ExchangeFrequencies::IncomingFreqs = NULL;
}

void _contest23__ExchangeFrequencies::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTocontest25__ArrayOfRigFrequency(soap, &this->_contest23__ExchangeFrequencies::IncomingFreqs);
#endif
}

int _contest23__ExchangeFrequencies::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__ExchangeFrequencies(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__ExchangeFrequencies(struct soap *soap, const char *tag, int id, const _contest23__ExchangeFrequencies *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__ExchangeFrequencies), type))
		return soap->error;
	if (!a->_contest23__ExchangeFrequencies::IncomingFreqs)
	{	if (soap_element_nil(soap, "contest23:IncomingFreqs"))
			return soap->error;
	}
	else if (soap_out_PointerTocontest25__ArrayOfRigFrequency(soap, "contest23:IncomingFreqs", -1, &a->_contest23__ExchangeFrequencies::IncomingFreqs, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_contest23__ExchangeFrequencies::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__contest23__ExchangeFrequencies(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__ExchangeFrequencies * SOAP_FMAC4 soap_in__contest23__ExchangeFrequencies(struct soap *soap, const char *tag, _contest23__ExchangeFrequencies *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__ExchangeFrequencies*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__ExchangeFrequencies, sizeof(_contest23__ExchangeFrequencies), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2__contest23__ExchangeFrequencies)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_contest23__ExchangeFrequencies *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_IncomingFreqs1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_IncomingFreqs1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest25__ArrayOfRigFrequency(soap, "contest23:IncomingFreqs", &a->_contest23__ExchangeFrequencies::IncomingFreqs, "contest25:ArrayOfRigFrequency"))
				{	soap_flag_IncomingFreqs1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_IncomingFreqs1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_contest23__ExchangeFrequencies *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__ExchangeFrequencies, SOAP_TYPE_C2__contest23__ExchangeFrequencies, sizeof(_contest23__ExchangeFrequencies), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _contest23__ExchangeFrequencies * SOAP_FMAC2 soap_instantiate__contest23__ExchangeFrequencies(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__ExchangeFrequencies(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_contest23__ExchangeFrequencies *p;
	size_t k = sizeof(_contest23__ExchangeFrequencies);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2__contest23__ExchangeFrequencies, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _contest23__ExchangeFrequencies);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _contest23__ExchangeFrequencies, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _contest23__ExchangeFrequencies location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _contest23__ExchangeFrequencies::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__contest23__ExchangeFrequencies(soap, tag ? tag : "contest23:ExchangeFrequencies", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__ExchangeFrequencies::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__ExchangeFrequencies(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__ExchangeFrequencies * SOAP_FMAC4 soap_get__contest23__ExchangeFrequencies(struct soap *soap, _contest23__ExchangeFrequencies *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__ExchangeFrequencies(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _contest23__ColumnNamesToIndicesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_contest23__ColumnNamesToIndicesResponse::ColumnNamesToIndicesResult = NULL;
}

void _contest23__ColumnNamesToIndicesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTocontest26__ArrayOfint(soap, &this->_contest23__ColumnNamesToIndicesResponse::ColumnNamesToIndicesResult);
#endif
}

int _contest23__ColumnNamesToIndicesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__ColumnNamesToIndicesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__ColumnNamesToIndicesResponse(struct soap *soap, const char *tag, int id, const _contest23__ColumnNamesToIndicesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse), type))
		return soap->error;
	if (a->ColumnNamesToIndicesResult)
		soap_element_result(soap, "contest23:ColumnNamesToIndicesResult");
	if (!a->_contest23__ColumnNamesToIndicesResponse::ColumnNamesToIndicesResult)
	{	if (soap_element_nil(soap, "contest23:ColumnNamesToIndicesResult"))
			return soap->error;
	}
	else if (soap_out_PointerTocontest26__ArrayOfint(soap, "contest23:ColumnNamesToIndicesResult", -1, &a->_contest23__ColumnNamesToIndicesResponse::ColumnNamesToIndicesResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_contest23__ColumnNamesToIndicesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__contest23__ColumnNamesToIndicesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__ColumnNamesToIndicesResponse * SOAP_FMAC4 soap_in__contest23__ColumnNamesToIndicesResponse(struct soap *soap, const char *tag, _contest23__ColumnNamesToIndicesResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__ColumnNamesToIndicesResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse, sizeof(_contest23__ColumnNamesToIndicesResponse), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_contest23__ColumnNamesToIndicesResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_ColumnNamesToIndicesResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ColumnNamesToIndicesResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest26__ArrayOfint(soap, "contest23:ColumnNamesToIndicesResult", &a->_contest23__ColumnNamesToIndicesResponse::ColumnNamesToIndicesResult, "contest26:ArrayOfint"))
				{	soap_flag_ColumnNamesToIndicesResult1--;
					continue;
				}
			}
			soap_check_result(soap, "contest23:ColumnNamesToIndicesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_ColumnNamesToIndicesResult1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_contest23__ColumnNamesToIndicesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse, SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse, sizeof(_contest23__ColumnNamesToIndicesResponse), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _contest23__ColumnNamesToIndicesResponse * SOAP_FMAC2 soap_instantiate__contest23__ColumnNamesToIndicesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__ColumnNamesToIndicesResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_contest23__ColumnNamesToIndicesResponse *p;
	size_t k = sizeof(_contest23__ColumnNamesToIndicesResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2__contest23__ColumnNamesToIndicesResponse, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _contest23__ColumnNamesToIndicesResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _contest23__ColumnNamesToIndicesResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _contest23__ColumnNamesToIndicesResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _contest23__ColumnNamesToIndicesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__contest23__ColumnNamesToIndicesResponse(soap, tag ? tag : "contest23:ColumnNamesToIndicesResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__ColumnNamesToIndicesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__ColumnNamesToIndicesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__ColumnNamesToIndicesResponse * SOAP_FMAC4 soap_get__contest23__ColumnNamesToIndicesResponse(struct soap *soap, _contest23__ColumnNamesToIndicesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__ColumnNamesToIndicesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _contest23__ColumnNamesToIndices::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_contest23__ColumnNamesToIndices::SessionId);
	this->_contest23__ColumnNamesToIndices::ColumnNames = NULL;
}

void _contest23__ColumnNamesToIndices::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_contest23__ColumnNamesToIndices::SessionId);
	soap_serialize_PointerTocontest26__ArrayOfstring(soap, &this->_contest23__ColumnNamesToIndices::ColumnNames);
#endif
}

int _contest23__ColumnNamesToIndices::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__ColumnNamesToIndices(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__ColumnNamesToIndices(struct soap *soap, const char *tag, int id, const _contest23__ColumnNamesToIndices *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__ColumnNamesToIndices), type))
		return soap->error;
	if (soap_out_std__string(soap, "contest23:SessionId", -1, &a->_contest23__ColumnNamesToIndices::SessionId, ""))
		return soap->error;
	if (!a->_contest23__ColumnNamesToIndices::ColumnNames)
	{	if (soap_element_nil(soap, "contest23:ColumnNames"))
			return soap->error;
	}
	else if (soap_out_PointerTocontest26__ArrayOfstring(soap, "contest23:ColumnNames", -1, &a->_contest23__ColumnNamesToIndices::ColumnNames, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_contest23__ColumnNamesToIndices::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__contest23__ColumnNamesToIndices(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__ColumnNamesToIndices * SOAP_FMAC4 soap_in__contest23__ColumnNamesToIndices(struct soap *soap, const char *tag, _contest23__ColumnNamesToIndices *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__ColumnNamesToIndices*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__ColumnNamesToIndices, sizeof(_contest23__ColumnNamesToIndices), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2__contest23__ColumnNamesToIndices)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_contest23__ColumnNamesToIndices *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_SessionId1 = 1;
	size_t soap_flag_ColumnNames1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SessionId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "contest23:SessionId", &a->_contest23__ColumnNamesToIndices::SessionId, "xsd:string"))
				{	soap_flag_SessionId1--;
					continue;
				}
			}
			if (soap_flag_ColumnNames1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest26__ArrayOfstring(soap, "contest23:ColumnNames", &a->_contest23__ColumnNamesToIndices::ColumnNames, "contest26:ArrayOfstring"))
				{	soap_flag_ColumnNames1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_SessionId1 > 0 || soap_flag_ColumnNames1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_contest23__ColumnNamesToIndices *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__ColumnNamesToIndices, SOAP_TYPE_C2__contest23__ColumnNamesToIndices, sizeof(_contest23__ColumnNamesToIndices), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _contest23__ColumnNamesToIndices * SOAP_FMAC2 soap_instantiate__contest23__ColumnNamesToIndices(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__ColumnNamesToIndices(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_contest23__ColumnNamesToIndices *p;
	size_t k = sizeof(_contest23__ColumnNamesToIndices);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2__contest23__ColumnNamesToIndices, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _contest23__ColumnNamesToIndices);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _contest23__ColumnNamesToIndices, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _contest23__ColumnNamesToIndices location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _contest23__ColumnNamesToIndices::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__contest23__ColumnNamesToIndices(soap, tag ? tag : "contest23:ColumnNamesToIndices", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__ColumnNamesToIndices::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__ColumnNamesToIndices(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__ColumnNamesToIndices * SOAP_FMAC4 soap_get__contest23__ColumnNamesToIndices(struct soap *soap, _contest23__ColumnNamesToIndices *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__ColumnNamesToIndices(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _contest23__getQsosByKeyArrayResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_contest23__getQsosByKeyArrayResponse::getQsosByKeyArrayResult = NULL;
}

void _contest23__getQsosByKeyArrayResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTocontest25__QsoUpdate(soap, &this->_contest23__getQsosByKeyArrayResponse::getQsosByKeyArrayResult);
#endif
}

int _contest23__getQsosByKeyArrayResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__getQsosByKeyArrayResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__getQsosByKeyArrayResponse(struct soap *soap, const char *tag, int id, const _contest23__getQsosByKeyArrayResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse), type))
		return soap->error;
	if (a->getQsosByKeyArrayResult)
		soap_element_result(soap, "contest23:getQsosByKeyArrayResult");
	if (!a->_contest23__getQsosByKeyArrayResponse::getQsosByKeyArrayResult)
	{	if (soap_element_empty(soap, "contest23:getQsosByKeyArrayResult", 0, NULL))
			return soap->error;
	}
	else if (soap_out_PointerTocontest25__QsoUpdate(soap, "contest23:getQsosByKeyArrayResult", -1, &a->_contest23__getQsosByKeyArrayResponse::getQsosByKeyArrayResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_contest23__getQsosByKeyArrayResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__contest23__getQsosByKeyArrayResponse(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__getQsosByKeyArrayResponse * SOAP_FMAC4 soap_in__contest23__getQsosByKeyArrayResponse(struct soap *soap, const char *tag, _contest23__getQsosByKeyArrayResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__getQsosByKeyArrayResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse, sizeof(_contest23__getQsosByKeyArrayResponse), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_contest23__getQsosByKeyArrayResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_getQsosByKeyArrayResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_getQsosByKeyArrayResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest25__QsoUpdate(soap, "contest23:getQsosByKeyArrayResult", &a->_contest23__getQsosByKeyArrayResponse::getQsosByKeyArrayResult, "contest25:QsoUpdate"))
				{	soap_flag_getQsosByKeyArrayResult1--;
					continue;
				}
			}
			soap_check_result(soap, "contest23:getQsosByKeyArrayResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->_contest23__getQsosByKeyArrayResponse::getQsosByKeyArrayResult))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_contest23__getQsosByKeyArrayResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse, SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse, sizeof(_contest23__getQsosByKeyArrayResponse), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _contest23__getQsosByKeyArrayResponse * SOAP_FMAC2 soap_instantiate__contest23__getQsosByKeyArrayResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__getQsosByKeyArrayResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_contest23__getQsosByKeyArrayResponse *p;
	size_t k = sizeof(_contest23__getQsosByKeyArrayResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2__contest23__getQsosByKeyArrayResponse, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _contest23__getQsosByKeyArrayResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _contest23__getQsosByKeyArrayResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _contest23__getQsosByKeyArrayResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _contest23__getQsosByKeyArrayResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__contest23__getQsosByKeyArrayResponse(soap, tag ? tag : "contest23:getQsosByKeyArrayResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__getQsosByKeyArrayResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__getQsosByKeyArrayResponse(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__getQsosByKeyArrayResponse * SOAP_FMAC4 soap_get__contest23__getQsosByKeyArrayResponse(struct soap *soap, _contest23__getQsosByKeyArrayResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__getQsosByKeyArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _contest23__getQsosByKeyArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_contest23__getQsosByKeyArray::SessionId);
	this->_contest23__getQsosByKeyArray::QsoKeyArray = NULL;
}

void _contest23__getQsosByKeyArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_contest23__getQsosByKeyArray::SessionId);
	soap_serialize_PointerTocontest26__ArrayOfstring(soap, &this->_contest23__getQsosByKeyArray::QsoKeyArray);
#endif
}

int _contest23__getQsosByKeyArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__getQsosByKeyArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__getQsosByKeyArray(struct soap *soap, const char *tag, int id, const _contest23__getQsosByKeyArray *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__getQsosByKeyArray), type))
		return soap->error;
	if (soap_out_std__string(soap, "contest23:SessionId", -1, &a->_contest23__getQsosByKeyArray::SessionId, ""))
		return soap->error;
	if (!a->_contest23__getQsosByKeyArray::QsoKeyArray)
	{	if (soap_element_nil(soap, "contest23:QsoKeyArray"))
			return soap->error;
	}
	else if (soap_out_PointerTocontest26__ArrayOfstring(soap, "contest23:QsoKeyArray", -1, &a->_contest23__getQsosByKeyArray::QsoKeyArray, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_contest23__getQsosByKeyArray::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__contest23__getQsosByKeyArray(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__getQsosByKeyArray * SOAP_FMAC4 soap_in__contest23__getQsosByKeyArray(struct soap *soap, const char *tag, _contest23__getQsosByKeyArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__getQsosByKeyArray*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__getQsosByKeyArray, sizeof(_contest23__getQsosByKeyArray), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2__contest23__getQsosByKeyArray)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_contest23__getQsosByKeyArray *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_SessionId1 = 1;
	size_t soap_flag_QsoKeyArray1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SessionId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "contest23:SessionId", &a->_contest23__getQsosByKeyArray::SessionId, "xsd:string"))
				{	soap_flag_SessionId1--;
					continue;
				}
			}
			if (soap_flag_QsoKeyArray1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest26__ArrayOfstring(soap, "contest23:QsoKeyArray", &a->_contest23__getQsosByKeyArray::QsoKeyArray, "contest26:ArrayOfstring"))
				{	soap_flag_QsoKeyArray1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_SessionId1 > 0 || soap_flag_QsoKeyArray1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_contest23__getQsosByKeyArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__getQsosByKeyArray, SOAP_TYPE_C2__contest23__getQsosByKeyArray, sizeof(_contest23__getQsosByKeyArray), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _contest23__getQsosByKeyArray * SOAP_FMAC2 soap_instantiate__contest23__getQsosByKeyArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__getQsosByKeyArray(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_contest23__getQsosByKeyArray *p;
	size_t k = sizeof(_contest23__getQsosByKeyArray);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2__contest23__getQsosByKeyArray, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _contest23__getQsosByKeyArray);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _contest23__getQsosByKeyArray, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _contest23__getQsosByKeyArray location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _contest23__getQsosByKeyArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__contest23__getQsosByKeyArray(soap, tag ? tag : "contest23:getQsosByKeyArray", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__getQsosByKeyArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__getQsosByKeyArray(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__getQsosByKeyArray * SOAP_FMAC4 soap_get__contest23__getQsosByKeyArray(struct soap *soap, _contest23__getQsosByKeyArray *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__getQsosByKeyArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _contest23__AddAndGetLogSummaryResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_contest23__AddAndGetLogSummaryResponse::AddAndGetLogSummaryResult = NULL;
}

void _contest23__AddAndGetLogSummaryResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTocontest25__LogSummary(soap, &this->_contest23__AddAndGetLogSummaryResponse::AddAndGetLogSummaryResult);
#endif
}

int _contest23__AddAndGetLogSummaryResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__AddAndGetLogSummaryResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__AddAndGetLogSummaryResponse(struct soap *soap, const char *tag, int id, const _contest23__AddAndGetLogSummaryResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse), type))
		return soap->error;
	if (a->AddAndGetLogSummaryResult)
		soap_element_result(soap, "contest23:AddAndGetLogSummaryResult");
	if (!a->_contest23__AddAndGetLogSummaryResponse::AddAndGetLogSummaryResult)
	{	if (soap_element_empty(soap, "contest23:AddAndGetLogSummaryResult", 0, NULL))
			return soap->error;
	}
	else if (soap_out_PointerTocontest25__LogSummary(soap, "contest23:AddAndGetLogSummaryResult", -1, &a->_contest23__AddAndGetLogSummaryResponse::AddAndGetLogSummaryResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_contest23__AddAndGetLogSummaryResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__contest23__AddAndGetLogSummaryResponse(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__AddAndGetLogSummaryResponse * SOAP_FMAC4 soap_in__contest23__AddAndGetLogSummaryResponse(struct soap *soap, const char *tag, _contest23__AddAndGetLogSummaryResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__AddAndGetLogSummaryResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse, sizeof(_contest23__AddAndGetLogSummaryResponse), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_contest23__AddAndGetLogSummaryResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_AddAndGetLogSummaryResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AddAndGetLogSummaryResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest25__LogSummary(soap, "contest23:AddAndGetLogSummaryResult", &a->_contest23__AddAndGetLogSummaryResponse::AddAndGetLogSummaryResult, "contest25:LogSummary"))
				{	soap_flag_AddAndGetLogSummaryResult1--;
					continue;
				}
			}
			soap_check_result(soap, "contest23:AddAndGetLogSummaryResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->_contest23__AddAndGetLogSummaryResponse::AddAndGetLogSummaryResult))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_contest23__AddAndGetLogSummaryResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse, SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse, sizeof(_contest23__AddAndGetLogSummaryResponse), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _contest23__AddAndGetLogSummaryResponse * SOAP_FMAC2 soap_instantiate__contest23__AddAndGetLogSummaryResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__AddAndGetLogSummaryResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_contest23__AddAndGetLogSummaryResponse *p;
	size_t k = sizeof(_contest23__AddAndGetLogSummaryResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2__contest23__AddAndGetLogSummaryResponse, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _contest23__AddAndGetLogSummaryResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _contest23__AddAndGetLogSummaryResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _contest23__AddAndGetLogSummaryResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _contest23__AddAndGetLogSummaryResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__contest23__AddAndGetLogSummaryResponse(soap, tag ? tag : "contest23:AddAndGetLogSummaryResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__AddAndGetLogSummaryResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__AddAndGetLogSummaryResponse(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__AddAndGetLogSummaryResponse * SOAP_FMAC4 soap_get__contest23__AddAndGetLogSummaryResponse(struct soap *soap, _contest23__AddAndGetLogSummaryResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__AddAndGetLogSummaryResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _contest23__AddAndGetLogSummary::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_contest23__AddAndGetLogSummary::SessionId);
	this->_contest23__AddAndGetLogSummary::QsoAddArray = NULL;
	soap_default_int(soap, &this->_contest23__AddAndGetLogSummary::OldState);
	soap_default_int(soap, &this->_contest23__AddAndGetLogSummary::MaxRequested);
}

void _contest23__AddAndGetLogSummary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_contest23__AddAndGetLogSummary::SessionId);
	soap_serialize_PointerTocontest25__ArrayOfQso(soap, &this->_contest23__AddAndGetLogSummary::QsoAddArray);
#endif
}

int _contest23__AddAndGetLogSummary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__AddAndGetLogSummary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__AddAndGetLogSummary(struct soap *soap, const char *tag, int id, const _contest23__AddAndGetLogSummary *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__AddAndGetLogSummary), type))
		return soap->error;
	if (soap_out_std__string(soap, "contest23:SessionId", -1, &a->_contest23__AddAndGetLogSummary::SessionId, ""))
		return soap->error;
	if (!a->_contest23__AddAndGetLogSummary::QsoAddArray)
	{	if (soap_element_nil(soap, "contest23:QsoAddArray"))
			return soap->error;
	}
	else if (soap_out_PointerTocontest25__ArrayOfQso(soap, "contest23:QsoAddArray", -1, &a->_contest23__AddAndGetLogSummary::QsoAddArray, ""))
		return soap->error;
	if (soap_out_int(soap, "contest23:OldState", -1, &a->_contest23__AddAndGetLogSummary::OldState, ""))
		return soap->error;
	if (soap_out_int(soap, "contest23:MaxRequested", -1, &a->_contest23__AddAndGetLogSummary::MaxRequested, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_contest23__AddAndGetLogSummary::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__contest23__AddAndGetLogSummary(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__AddAndGetLogSummary * SOAP_FMAC4 soap_in__contest23__AddAndGetLogSummary(struct soap *soap, const char *tag, _contest23__AddAndGetLogSummary *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__AddAndGetLogSummary*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__AddAndGetLogSummary, sizeof(_contest23__AddAndGetLogSummary), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2__contest23__AddAndGetLogSummary)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_contest23__AddAndGetLogSummary *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_SessionId1 = 1;
	size_t soap_flag_QsoAddArray1 = 1;
	size_t soap_flag_OldState1 = 1;
	size_t soap_flag_MaxRequested1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SessionId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "contest23:SessionId", &a->_contest23__AddAndGetLogSummary::SessionId, "xsd:string"))
				{	soap_flag_SessionId1--;
					continue;
				}
			}
			if (soap_flag_QsoAddArray1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest25__ArrayOfQso(soap, "contest23:QsoAddArray", &a->_contest23__AddAndGetLogSummary::QsoAddArray, "contest25:ArrayOfQso"))
				{	soap_flag_QsoAddArray1--;
					continue;
				}
			}
			if (soap_flag_OldState1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "contest23:OldState", &a->_contest23__AddAndGetLogSummary::OldState, "xsd:int"))
				{	soap_flag_OldState1--;
					continue;
				}
			}
			if (soap_flag_MaxRequested1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "contest23:MaxRequested", &a->_contest23__AddAndGetLogSummary::MaxRequested, "xsd:int"))
				{	soap_flag_MaxRequested1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_SessionId1 > 0 || soap_flag_QsoAddArray1 > 0 || soap_flag_OldState1 > 0 || soap_flag_MaxRequested1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_contest23__AddAndGetLogSummary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__AddAndGetLogSummary, SOAP_TYPE_C2__contest23__AddAndGetLogSummary, sizeof(_contest23__AddAndGetLogSummary), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _contest23__AddAndGetLogSummary * SOAP_FMAC2 soap_instantiate__contest23__AddAndGetLogSummary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__AddAndGetLogSummary(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_contest23__AddAndGetLogSummary *p;
	size_t k = sizeof(_contest23__AddAndGetLogSummary);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2__contest23__AddAndGetLogSummary, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _contest23__AddAndGetLogSummary);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _contest23__AddAndGetLogSummary, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _contest23__AddAndGetLogSummary location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _contest23__AddAndGetLogSummary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__contest23__AddAndGetLogSummary(soap, tag ? tag : "contest23:AddAndGetLogSummary", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__AddAndGetLogSummary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__AddAndGetLogSummary(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__AddAndGetLogSummary * SOAP_FMAC4 soap_get__contest23__AddAndGetLogSummary(struct soap *soap, _contest23__AddAndGetLogSummary *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__AddAndGetLogSummary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _contest23__addAndGetQsosResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_contest23__addAndGetQsosResponse::addAndGetQsosResult = NULL;
}

void _contest23__addAndGetQsosResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTocontest25__QsoUpdate(soap, &this->_contest23__addAndGetQsosResponse::addAndGetQsosResult);
#endif
}

int _contest23__addAndGetQsosResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__addAndGetQsosResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__addAndGetQsosResponse(struct soap *soap, const char *tag, int id, const _contest23__addAndGetQsosResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__addAndGetQsosResponse), type))
		return soap->error;
	if (a->addAndGetQsosResult)
		soap_element_result(soap, "contest23:addAndGetQsosResult");
	if (!a->_contest23__addAndGetQsosResponse::addAndGetQsosResult)
	{	if (soap_element_empty(soap, "contest23:addAndGetQsosResult", 0, NULL))
			return soap->error;
	}
	else if (soap_out_PointerTocontest25__QsoUpdate(soap, "contest23:addAndGetQsosResult", -1, &a->_contest23__addAndGetQsosResponse::addAndGetQsosResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_contest23__addAndGetQsosResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__contest23__addAndGetQsosResponse(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__addAndGetQsosResponse * SOAP_FMAC4 soap_in__contest23__addAndGetQsosResponse(struct soap *soap, const char *tag, _contest23__addAndGetQsosResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__addAndGetQsosResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__addAndGetQsosResponse, sizeof(_contest23__addAndGetQsosResponse), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2__contest23__addAndGetQsosResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_contest23__addAndGetQsosResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_addAndGetQsosResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_addAndGetQsosResult1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest25__QsoUpdate(soap, "contest23:addAndGetQsosResult", &a->_contest23__addAndGetQsosResponse::addAndGetQsosResult, "contest25:QsoUpdate"))
				{	soap_flag_addAndGetQsosResult1--;
					continue;
				}
			}
			soap_check_result(soap, "contest23:addAndGetQsosResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (!a->_contest23__addAndGetQsosResponse::addAndGetQsosResult))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_contest23__addAndGetQsosResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__addAndGetQsosResponse, SOAP_TYPE_C2__contest23__addAndGetQsosResponse, sizeof(_contest23__addAndGetQsosResponse), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _contest23__addAndGetQsosResponse * SOAP_FMAC2 soap_instantiate__contest23__addAndGetQsosResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__addAndGetQsosResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_contest23__addAndGetQsosResponse *p;
	size_t k = sizeof(_contest23__addAndGetQsosResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2__contest23__addAndGetQsosResponse, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _contest23__addAndGetQsosResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _contest23__addAndGetQsosResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _contest23__addAndGetQsosResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _contest23__addAndGetQsosResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__contest23__addAndGetQsosResponse(soap, tag ? tag : "contest23:addAndGetQsosResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__addAndGetQsosResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__addAndGetQsosResponse(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__addAndGetQsosResponse * SOAP_FMAC4 soap_get__contest23__addAndGetQsosResponse(struct soap *soap, _contest23__addAndGetQsosResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__addAndGetQsosResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _contest23__addAndGetQsos::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_contest23__addAndGetQsos::SessionId);
	this->_contest23__addAndGetQsos::QsoAddArray = NULL;
	soap_default_int(soap, &this->_contest23__addAndGetQsos::OldState);
	soap_default_int(soap, &this->_contest23__addAndGetQsos::MaxRequested);
}

void _contest23__addAndGetQsos::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_contest23__addAndGetQsos::SessionId);
	soap_serialize_PointerTocontest25__ArrayOfQso(soap, &this->_contest23__addAndGetQsos::QsoAddArray);
#endif
}

int _contest23__addAndGetQsos::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__addAndGetQsos(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__addAndGetQsos(struct soap *soap, const char *tag, int id, const _contest23__addAndGetQsos *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__addAndGetQsos), type))
		return soap->error;
	if (soap_out_std__string(soap, "contest23:SessionId", -1, &a->_contest23__addAndGetQsos::SessionId, ""))
		return soap->error;
	if (!a->_contest23__addAndGetQsos::QsoAddArray)
	{	if (soap_element_nil(soap, "contest23:QsoAddArray"))
			return soap->error;
	}
	else if (soap_out_PointerTocontest25__ArrayOfQso(soap, "contest23:QsoAddArray", -1, &a->_contest23__addAndGetQsos::QsoAddArray, ""))
		return soap->error;
	if (soap_out_int(soap, "contest23:OldState", -1, &a->_contest23__addAndGetQsos::OldState, ""))
		return soap->error;
	if (soap_out_int(soap, "contest23:MaxRequested", -1, &a->_contest23__addAndGetQsos::MaxRequested, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_contest23__addAndGetQsos::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__contest23__addAndGetQsos(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__addAndGetQsos * SOAP_FMAC4 soap_in__contest23__addAndGetQsos(struct soap *soap, const char *tag, _contest23__addAndGetQsos *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__addAndGetQsos*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__addAndGetQsos, sizeof(_contest23__addAndGetQsos), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2__contest23__addAndGetQsos)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_contest23__addAndGetQsos *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_SessionId1 = 1;
	size_t soap_flag_QsoAddArray1 = 1;
	size_t soap_flag_OldState1 = 1;
	size_t soap_flag_MaxRequested1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SessionId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "contest23:SessionId", &a->_contest23__addAndGetQsos::SessionId, "xsd:string"))
				{	soap_flag_SessionId1--;
					continue;
				}
			}
			if (soap_flag_QsoAddArray1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest25__ArrayOfQso(soap, "contest23:QsoAddArray", &a->_contest23__addAndGetQsos::QsoAddArray, "contest25:ArrayOfQso"))
				{	soap_flag_QsoAddArray1--;
					continue;
				}
			}
			if (soap_flag_OldState1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "contest23:OldState", &a->_contest23__addAndGetQsos::OldState, "xsd:int"))
				{	soap_flag_OldState1--;
					continue;
				}
			}
			if (soap_flag_MaxRequested1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "contest23:MaxRequested", &a->_contest23__addAndGetQsos::MaxRequested, "xsd:int"))
				{	soap_flag_MaxRequested1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_SessionId1 > 0 || soap_flag_QsoAddArray1 > 0 || soap_flag_OldState1 > 0 || soap_flag_MaxRequested1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_contest23__addAndGetQsos *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__addAndGetQsos, SOAP_TYPE_C2__contest23__addAndGetQsos, sizeof(_contest23__addAndGetQsos), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _contest23__addAndGetQsos * SOAP_FMAC2 soap_instantiate__contest23__addAndGetQsos(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__addAndGetQsos(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_contest23__addAndGetQsos *p;
	size_t k = sizeof(_contest23__addAndGetQsos);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2__contest23__addAndGetQsos, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _contest23__addAndGetQsos);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _contest23__addAndGetQsos, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _contest23__addAndGetQsos location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _contest23__addAndGetQsos::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__contest23__addAndGetQsos(soap, tag ? tag : "contest23:addAndGetQsos", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__addAndGetQsos::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__addAndGetQsos(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__addAndGetQsos * SOAP_FMAC4 soap_get__contest23__addAndGetQsos(struct soap *soap, _contest23__addAndGetQsos *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__addAndGetQsos(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _contest23__GetSessionIdResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__string(soap, &this->_contest23__GetSessionIdResponse::GetSessionIdResult);
}

void _contest23__GetSessionIdResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->_contest23__GetSessionIdResponse::GetSessionIdResult);
#endif
}

int _contest23__GetSessionIdResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__GetSessionIdResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__GetSessionIdResponse(struct soap *soap, const char *tag, int id, const _contest23__GetSessionIdResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__GetSessionIdResponse), type))
		return soap->error;
	soap_element_result(soap, "contest23:GetSessionIdResult");
	if (soap_out_std__string(soap, "contest23:GetSessionIdResult", -1, &a->_contest23__GetSessionIdResponse::GetSessionIdResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_contest23__GetSessionIdResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__contest23__GetSessionIdResponse(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__GetSessionIdResponse * SOAP_FMAC4 soap_in__contest23__GetSessionIdResponse(struct soap *soap, const char *tag, _contest23__GetSessionIdResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__GetSessionIdResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__GetSessionIdResponse, sizeof(_contest23__GetSessionIdResponse), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2__contest23__GetSessionIdResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_contest23__GetSessionIdResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_GetSessionIdResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetSessionIdResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "contest23:GetSessionIdResult", &a->_contest23__GetSessionIdResponse::GetSessionIdResult, "xsd:string"))
				{	soap_flag_GetSessionIdResult1--;
					continue;
				}
			}
			soap_check_result(soap, "contest23:GetSessionIdResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_GetSessionIdResult1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_contest23__GetSessionIdResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__GetSessionIdResponse, SOAP_TYPE_C2__contest23__GetSessionIdResponse, sizeof(_contest23__GetSessionIdResponse), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _contest23__GetSessionIdResponse * SOAP_FMAC2 soap_instantiate__contest23__GetSessionIdResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__GetSessionIdResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_contest23__GetSessionIdResponse *p;
	size_t k = sizeof(_contest23__GetSessionIdResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2__contest23__GetSessionIdResponse, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _contest23__GetSessionIdResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _contest23__GetSessionIdResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _contest23__GetSessionIdResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _contest23__GetSessionIdResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__contest23__GetSessionIdResponse(soap, tag ? tag : "contest23:GetSessionIdResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__GetSessionIdResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__GetSessionIdResponse(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__GetSessionIdResponse * SOAP_FMAC4 soap_get__contest23__GetSessionIdResponse(struct soap *soap, _contest23__GetSessionIdResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__GetSessionIdResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _contest23__GetSessionId::soap_default(struct soap *soap)
{
	this->soap = soap;
}

void _contest23__GetSessionId::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int _contest23__GetSessionId::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__contest23__GetSessionId(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__contest23__GetSessionId(struct soap *soap, const char *tag, int id, const _contest23__GetSessionId *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2__contest23__GetSessionId), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_contest23__GetSessionId::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__contest23__GetSessionId(soap, tag, this, type);
}

SOAP_FMAC3 _contest23__GetSessionId * SOAP_FMAC4 soap_in__contest23__GetSessionId(struct soap *soap, const char *tag, _contest23__GetSessionId *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_contest23__GetSessionId*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2__contest23__GetSessionId, sizeof(_contest23__GetSessionId), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2__contest23__GetSessionId)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_contest23__GetSessionId *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_contest23__GetSessionId *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2__contest23__GetSessionId, SOAP_TYPE_C2__contest23__GetSessionId, sizeof(_contest23__GetSessionId), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _contest23__GetSessionId * SOAP_FMAC2 soap_instantiate__contest23__GetSessionId(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__contest23__GetSessionId(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_contest23__GetSessionId *p;
	size_t k = sizeof(_contest23__GetSessionId);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2__contest23__GetSessionId, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _contest23__GetSessionId);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _contest23__GetSessionId, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _contest23__GetSessionId location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _contest23__GetSessionId::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__contest23__GetSessionId(soap, tag ? tag : "contest23:GetSessionId", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_contest23__GetSessionId::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__contest23__GetSessionId(soap, this, tag, type);
}

SOAP_FMAC3 _contest23__GetSessionId * SOAP_FMAC4 soap_get__contest23__GetSessionId(struct soap *soap, _contest23__GetSessionId *p, const char *tag, const char *type)
{
	if ((p = soap_in__contest23__GetSessionId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest25__RigFrequency::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__string(soap, &this->contest25__RigFrequency::label);
	soap_default_int(soap, &this->contest25__RigFrequency::mode);
	soap_default_int(soap, &this->contest25__RigFrequency::networkLetter);
	soap_default_double(soap, &this->contest25__RigFrequency::recvFreq);
	soap_default_int(soap, &this->contest25__RigFrequency::rigNumber);
	soap_default_std__string(soap, &this->contest25__RigFrequency::station);
	soap_default_double(soap, &this->contest25__RigFrequency::xmitFreq);
}

void contest25__RigFrequency::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->contest25__RigFrequency::label);
	soap_serialize_std__string(soap, &this->contest25__RigFrequency::station);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int contest25__RigFrequency::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest25__RigFrequency(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__RigFrequency(struct soap *soap, const char *tag, int id, const contest25__RigFrequency *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_contest25__RigFrequency), type ? type : "contest25:RigFrequency"))
		return soap->error;
	if (soap_out_std__string(soap, "contest25:label", -1, &a->contest25__RigFrequency::label, ""))
		return soap->error;
	if (soap_out_int(soap, "contest25:mode", -1, &a->contest25__RigFrequency::mode, ""))
		return soap->error;
	if (soap_out_int(soap, "contest25:networkLetter", -1, &a->contest25__RigFrequency::networkLetter, ""))
		return soap->error;
	if (soap_out_double(soap, "contest25:recvFreq", -1, &a->contest25__RigFrequency::recvFreq, ""))
		return soap->error;
	if (soap_out_int(soap, "contest25:rigNumber", -1, &a->contest25__RigFrequency::rigNumber, ""))
		return soap->error;
	if (soap_out_std__string(soap, "contest25:station", -1, &a->contest25__RigFrequency::station, ""))
		return soap->error;
	if (soap_out_double(soap, "contest25:xmitFreq", -1, &a->contest25__RigFrequency::xmitFreq, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest25__RigFrequency::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest25__RigFrequency(soap, tag, this, type);
}

SOAP_FMAC3 contest25__RigFrequency * SOAP_FMAC4 soap_in_contest25__RigFrequency(struct soap *soap, const char *tag, contest25__RigFrequency *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest25__RigFrequency*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest25__RigFrequency, sizeof(contest25__RigFrequency), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_contest25__RigFrequency)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (contest25__RigFrequency *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_label1 = 1;
	size_t soap_flag_mode1 = 1;
	size_t soap_flag_networkLetter1 = 1;
	size_t soap_flag_recvFreq1 = 1;
	size_t soap_flag_rigNumber1 = 1;
	size_t soap_flag_station1 = 1;
	size_t soap_flag_xmitFreq1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_label1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "contest25:label", &a->contest25__RigFrequency::label, "xsd:string"))
				{	soap_flag_label1--;
					continue;
				}
			}
			if (soap_flag_mode1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "contest25:mode", &a->contest25__RigFrequency::mode, "xsd:int"))
				{	soap_flag_mode1--;
					continue;
				}
			}
			if (soap_flag_networkLetter1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "contest25:networkLetter", &a->contest25__RigFrequency::networkLetter, "xsd:int"))
				{	soap_flag_networkLetter1--;
					continue;
				}
			}
			if (soap_flag_recvFreq1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_double(soap, "contest25:recvFreq", &a->contest25__RigFrequency::recvFreq, "xsd:double"))
				{	soap_flag_recvFreq1--;
					continue;
				}
			}
			if (soap_flag_rigNumber1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "contest25:rigNumber", &a->contest25__RigFrequency::rigNumber, "xsd:int"))
				{	soap_flag_rigNumber1--;
					continue;
				}
			}
			if (soap_flag_station1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "contest25:station", &a->contest25__RigFrequency::station, "xsd:string"))
				{	soap_flag_station1--;
					continue;
				}
			}
			if (soap_flag_xmitFreq1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_double(soap, "contest25:xmitFreq", &a->contest25__RigFrequency::xmitFreq, "xsd:double"))
				{	soap_flag_xmitFreq1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_label1 > 0 || soap_flag_mode1 > 0 || soap_flag_networkLetter1 > 0 || soap_flag_recvFreq1 > 0 || soap_flag_rigNumber1 > 0 || soap_flag_station1 > 0 || soap_flag_xmitFreq1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (contest25__RigFrequency *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_contest25__RigFrequency, SOAP_TYPE_C2_contest25__RigFrequency, sizeof(contest25__RigFrequency), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 contest25__RigFrequency * SOAP_FMAC2 soap_instantiate_contest25__RigFrequency(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest25__RigFrequency(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest25__RigFrequency *p;
	size_t k = sizeof(contest25__RigFrequency);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_contest25__RigFrequency, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest25__RigFrequency);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest25__RigFrequency, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest25__RigFrequency location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest25__RigFrequency::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest25__RigFrequency(soap, tag ? tag : "contest25:RigFrequency", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest25__RigFrequency::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest25__RigFrequency(soap, this, tag, type);
}

SOAP_FMAC3 contest25__RigFrequency * SOAP_FMAC4 soap_get_contest25__RigFrequency(struct soap *soap, contest25__RigFrequency *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest25__RigFrequency(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest25__ArrayOfRigFrequency::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__vectorTemplateOfPointerTocontest25__RigFrequency(soap, &this->contest25__ArrayOfRigFrequency::RigFrequency);
}

void contest25__ArrayOfRigFrequency::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTocontest25__RigFrequency(soap, &this->contest25__ArrayOfRigFrequency::RigFrequency);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int contest25__ArrayOfRigFrequency::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest25__ArrayOfRigFrequency(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__ArrayOfRigFrequency(struct soap *soap, const char *tag, int id, const contest25__ArrayOfRigFrequency *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_contest25__ArrayOfRigFrequency), type ? type : "contest25:ArrayOfRigFrequency"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTocontest25__RigFrequency(soap, "contest25:RigFrequency", -1, &a->contest25__ArrayOfRigFrequency::RigFrequency, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest25__ArrayOfRigFrequency::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest25__ArrayOfRigFrequency(soap, tag, this, type);
}

SOAP_FMAC3 contest25__ArrayOfRigFrequency * SOAP_FMAC4 soap_in_contest25__ArrayOfRigFrequency(struct soap *soap, const char *tag, contest25__ArrayOfRigFrequency *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest25__ArrayOfRigFrequency*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest25__ArrayOfRigFrequency, sizeof(contest25__ArrayOfRigFrequency), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_contest25__ArrayOfRigFrequency)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (contest25__ArrayOfRigFrequency *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTocontest25__RigFrequency(soap, "contest25:RigFrequency", &a->contest25__ArrayOfRigFrequency::RigFrequency, "contest25:RigFrequency"))
					continue;
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (a->contest25__ArrayOfRigFrequency::RigFrequency.size() < 1))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (contest25__ArrayOfRigFrequency *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_contest25__ArrayOfRigFrequency, SOAP_TYPE_C2_contest25__ArrayOfRigFrequency, sizeof(contest25__ArrayOfRigFrequency), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 contest25__ArrayOfRigFrequency * SOAP_FMAC2 soap_instantiate_contest25__ArrayOfRigFrequency(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest25__ArrayOfRigFrequency(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest25__ArrayOfRigFrequency *p;
	size_t k = sizeof(contest25__ArrayOfRigFrequency);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_contest25__ArrayOfRigFrequency, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest25__ArrayOfRigFrequency);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest25__ArrayOfRigFrequency, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest25__ArrayOfRigFrequency location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest25__ArrayOfRigFrequency::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest25__ArrayOfRigFrequency(soap, tag ? tag : "contest25:ArrayOfRigFrequency", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest25__ArrayOfRigFrequency::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest25__ArrayOfRigFrequency(soap, this, tag, type);
}

SOAP_FMAC3 contest25__ArrayOfRigFrequency * SOAP_FMAC4 soap_get_contest25__ArrayOfRigFrequency(struct soap *soap, contest25__ArrayOfRigFrequency *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest25__ArrayOfRigFrequency(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest25__QsoIdVersion::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__string(soap, &this->contest25__QsoIdVersion::id);
	soap_default_std__string(soap, &this->contest25__QsoIdVersion::updatedBy);
	soap_default_int(soap, &this->contest25__QsoIdVersion::version);
}

void contest25__QsoIdVersion::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->contest25__QsoIdVersion::id);
	soap_serialize_std__string(soap, &this->contest25__QsoIdVersion::updatedBy);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int contest25__QsoIdVersion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest25__QsoIdVersion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__QsoIdVersion(struct soap *soap, const char *tag, int id, const contest25__QsoIdVersion *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_contest25__QsoIdVersion), type ? type : "contest25:QsoIdVersion"))
		return soap->error;
	if (soap_out_std__string(soap, "contest25:id", -1, &a->contest25__QsoIdVersion::id, ""))
		return soap->error;
	if (soap_out_std__string(soap, "contest25:updatedBy", -1, &a->contest25__QsoIdVersion::updatedBy, ""))
		return soap->error;
	if (soap_out_int(soap, "contest25:version", -1, &a->contest25__QsoIdVersion::version, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest25__QsoIdVersion::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest25__QsoIdVersion(soap, tag, this, type);
}

SOAP_FMAC3 contest25__QsoIdVersion * SOAP_FMAC4 soap_in_contest25__QsoIdVersion(struct soap *soap, const char *tag, contest25__QsoIdVersion *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest25__QsoIdVersion*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest25__QsoIdVersion, sizeof(contest25__QsoIdVersion), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_contest25__QsoIdVersion)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (contest25__QsoIdVersion *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_id1 = 1;
	size_t soap_flag_updatedBy1 = 1;
	size_t soap_flag_version1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "contest25:id", &a->contest25__QsoIdVersion::id, "xsd:string"))
				{	soap_flag_id1--;
					continue;
				}
			}
			if (soap_flag_updatedBy1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "contest25:updatedBy", &a->contest25__QsoIdVersion::updatedBy, "xsd:string"))
				{	soap_flag_updatedBy1--;
					continue;
				}
			}
			if (soap_flag_version1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "contest25:version", &a->contest25__QsoIdVersion::version, "xsd:int"))
				{	soap_flag_version1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_updatedBy1 > 0 || soap_flag_version1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (contest25__QsoIdVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_contest25__QsoIdVersion, SOAP_TYPE_C2_contest25__QsoIdVersion, sizeof(contest25__QsoIdVersion), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 contest25__QsoIdVersion * SOAP_FMAC2 soap_instantiate_contest25__QsoIdVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest25__QsoIdVersion(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest25__QsoIdVersion *p;
	size_t k = sizeof(contest25__QsoIdVersion);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_contest25__QsoIdVersion, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest25__QsoIdVersion);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest25__QsoIdVersion, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest25__QsoIdVersion location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest25__QsoIdVersion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest25__QsoIdVersion(soap, tag ? tag : "contest25:QsoIdVersion", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest25__QsoIdVersion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest25__QsoIdVersion(soap, this, tag, type);
}

SOAP_FMAC3 contest25__QsoIdVersion * SOAP_FMAC4 soap_get_contest25__QsoIdVersion(struct soap *soap, contest25__QsoIdVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest25__QsoIdVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest25__ArrayOfQsoIdVersion::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(soap, &this->contest25__ArrayOfQsoIdVersion::QsoIdVersion);
}

void contest25__ArrayOfQsoIdVersion::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(soap, &this->contest25__ArrayOfQsoIdVersion::QsoIdVersion);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int contest25__ArrayOfQsoIdVersion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest25__ArrayOfQsoIdVersion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__ArrayOfQsoIdVersion(struct soap *soap, const char *tag, int id, const contest25__ArrayOfQsoIdVersion *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion), type ? type : "contest25:ArrayOfQsoIdVersion"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(soap, "contest25:QsoIdVersion", -1, &a->contest25__ArrayOfQsoIdVersion::QsoIdVersion, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest25__ArrayOfQsoIdVersion::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest25__ArrayOfQsoIdVersion(soap, tag, this, type);
}

SOAP_FMAC3 contest25__ArrayOfQsoIdVersion * SOAP_FMAC4 soap_in_contest25__ArrayOfQsoIdVersion(struct soap *soap, const char *tag, contest25__ArrayOfQsoIdVersion *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest25__ArrayOfQsoIdVersion*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion, sizeof(contest25__ArrayOfQsoIdVersion), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (contest25__ArrayOfQsoIdVersion *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(soap, "contest25:QsoIdVersion", &a->contest25__ArrayOfQsoIdVersion::QsoIdVersion, "contest25:QsoIdVersion"))
					continue;
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest25__ArrayOfQsoIdVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion, SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion, sizeof(contest25__ArrayOfQsoIdVersion), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 contest25__ArrayOfQsoIdVersion * SOAP_FMAC2 soap_instantiate_contest25__ArrayOfQsoIdVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest25__ArrayOfQsoIdVersion(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest25__ArrayOfQsoIdVersion *p;
	size_t k = sizeof(contest25__ArrayOfQsoIdVersion);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest25__ArrayOfQsoIdVersion);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest25__ArrayOfQsoIdVersion, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest25__ArrayOfQsoIdVersion location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest25__ArrayOfQsoIdVersion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest25__ArrayOfQsoIdVersion(soap, tag ? tag : "contest25:ArrayOfQsoIdVersion", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest25__ArrayOfQsoIdVersion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest25__ArrayOfQsoIdVersion(soap, this, tag, type);
}

SOAP_FMAC3 contest25__ArrayOfQsoIdVersion * SOAP_FMAC4 soap_get_contest25__ArrayOfQsoIdVersion(struct soap *soap, contest25__ArrayOfQsoIdVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest25__ArrayOfQsoIdVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest25__LogSummary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_int(soap, &this->contest25__LogSummary::logState);
	this->contest25__LogSummary::logSummaryIds = NULL;
}

void contest25__LogSummary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTocontest25__ArrayOfQsoIdVersion(soap, &this->contest25__LogSummary::logSummaryIds);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int contest25__LogSummary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest25__LogSummary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__LogSummary(struct soap *soap, const char *tag, int id, const contest25__LogSummary *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_contest25__LogSummary), type ? type : "contest25:LogSummary"))
		return soap->error;
	if (soap_out_int(soap, "contest25:logState", -1, &a->contest25__LogSummary::logState, ""))
		return soap->error;
	if (!a->contest25__LogSummary::logSummaryIds)
	{	if (soap_element_nil(soap, "contest25:logSummaryIds"))
			return soap->error;
	}
	else if (soap_out_PointerTocontest25__ArrayOfQsoIdVersion(soap, "contest25:logSummaryIds", -1, &a->contest25__LogSummary::logSummaryIds, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest25__LogSummary::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest25__LogSummary(soap, tag, this, type);
}

SOAP_FMAC3 contest25__LogSummary * SOAP_FMAC4 soap_in_contest25__LogSummary(struct soap *soap, const char *tag, contest25__LogSummary *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest25__LogSummary*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest25__LogSummary, sizeof(contest25__LogSummary), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_contest25__LogSummary)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (contest25__LogSummary *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_logState1 = 1;
	size_t soap_flag_logSummaryIds1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_logState1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "contest25:logState", &a->contest25__LogSummary::logState, "xsd:int"))
				{	soap_flag_logState1--;
					continue;
				}
			}
			if (soap_flag_logSummaryIds1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest25__ArrayOfQsoIdVersion(soap, "contest25:logSummaryIds", &a->contest25__LogSummary::logSummaryIds, "contest25:ArrayOfQsoIdVersion"))
				{	soap_flag_logSummaryIds1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_logState1 > 0 || soap_flag_logSummaryIds1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (contest25__LogSummary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_contest25__LogSummary, SOAP_TYPE_C2_contest25__LogSummary, sizeof(contest25__LogSummary), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 contest25__LogSummary * SOAP_FMAC2 soap_instantiate_contest25__LogSummary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest25__LogSummary(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest25__LogSummary *p;
	size_t k = sizeof(contest25__LogSummary);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_contest25__LogSummary, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest25__LogSummary);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest25__LogSummary, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest25__LogSummary location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest25__LogSummary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest25__LogSummary(soap, tag ? tag : "contest25:LogSummary", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest25__LogSummary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest25__LogSummary(soap, this, tag, type);
}

SOAP_FMAC3 contest25__LogSummary * SOAP_FMAC4 soap_get_contest25__LogSummary(struct soap *soap, contest25__LogSummary *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest25__LogSummary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest25__QsoUpdate::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_int(soap, &this->contest25__QsoUpdate::logState);
	this->contest25__QsoUpdate::qsoArray = NULL;
}

void contest25__QsoUpdate::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTocontest25__ArrayOfQso(soap, &this->contest25__QsoUpdate::qsoArray);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int contest25__QsoUpdate::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest25__QsoUpdate(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__QsoUpdate(struct soap *soap, const char *tag, int id, const contest25__QsoUpdate *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_contest25__QsoUpdate), type ? type : "contest25:QsoUpdate"))
		return soap->error;
	if (soap_out_int(soap, "contest25:logState", -1, &a->contest25__QsoUpdate::logState, ""))
		return soap->error;
	if (!a->contest25__QsoUpdate::qsoArray)
	{	if (soap_element_nil(soap, "contest25:qsoArray"))
			return soap->error;
	}
	else if (soap_out_PointerTocontest25__ArrayOfQso(soap, "contest25:qsoArray", -1, &a->contest25__QsoUpdate::qsoArray, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest25__QsoUpdate::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest25__QsoUpdate(soap, tag, this, type);
}

SOAP_FMAC3 contest25__QsoUpdate * SOAP_FMAC4 soap_in_contest25__QsoUpdate(struct soap *soap, const char *tag, contest25__QsoUpdate *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest25__QsoUpdate*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest25__QsoUpdate, sizeof(contest25__QsoUpdate), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_contest25__QsoUpdate)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (contest25__QsoUpdate *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_logState1 = 1;
	size_t soap_flag_qsoArray1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_logState1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "contest25:logState", &a->contest25__QsoUpdate::logState, "xsd:int"))
				{	soap_flag_logState1--;
					continue;
				}
			}
			if (soap_flag_qsoArray1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest25__ArrayOfQso(soap, "contest25:qsoArray", &a->contest25__QsoUpdate::qsoArray, "contest25:ArrayOfQso"))
				{	soap_flag_qsoArray1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_logState1 > 0 || soap_flag_qsoArray1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (contest25__QsoUpdate *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_contest25__QsoUpdate, SOAP_TYPE_C2_contest25__QsoUpdate, sizeof(contest25__QsoUpdate), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 contest25__QsoUpdate * SOAP_FMAC2 soap_instantiate_contest25__QsoUpdate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest25__QsoUpdate(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest25__QsoUpdate *p;
	size_t k = sizeof(contest25__QsoUpdate);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_contest25__QsoUpdate, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest25__QsoUpdate);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest25__QsoUpdate, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest25__QsoUpdate location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest25__QsoUpdate::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest25__QsoUpdate(soap, tag ? tag : "contest25:QsoUpdate", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest25__QsoUpdate::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest25__QsoUpdate(soap, this, tag, type);
}

SOAP_FMAC3 contest25__QsoUpdate * SOAP_FMAC4 soap_get_contest25__QsoUpdate(struct soap *soap, contest25__QsoUpdate *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest25__QsoUpdate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest25__Qso::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_int(soap, &this->contest25__Qso::band);
	soap_default_int(soap, &this->contest25__Qso::dupe);
	soap_default_std__string(soap, &this->contest25__Qso::idKey);
	soap_default_int(soap, &this->contest25__Qso::mode);
	this->contest25__Qso::qsoparts = NULL;
	soap_default_double(soap, &this->contest25__Qso::recvFreq);
	soap_default_int(soap, &this->contest25__Qso::serial);
	soap_default_std__string(soap, &this->contest25__Qso::station);
	soap_default_int(soap, &this->contest25__Qso::time64H);
	soap_default_int(soap, &this->contest25__Qso::time64L);
	soap_default_std__string(soap, &this->contest25__Qso::updatedBy);
	soap_default_int(soap, &this->contest25__Qso::version);
	soap_default_double(soap, &this->contest25__Qso::xmitFreq);
}

void contest25__Qso::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->contest25__Qso::idKey);
	soap_serialize_PointerTocontest26__ArrayOfstring(soap, &this->contest25__Qso::qsoparts);
	soap_serialize_std__string(soap, &this->contest25__Qso::station);
	soap_serialize_std__string(soap, &this->contest25__Qso::updatedBy);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int contest25__Qso::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest25__Qso(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__Qso(struct soap *soap, const char *tag, int id, const contest25__Qso *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_contest25__Qso), type ? type : "contest25:Qso"))
		return soap->error;
	if (soap_out_int(soap, "contest25:band", -1, &a->contest25__Qso::band, ""))
		return soap->error;
	if (soap_out_int(soap, "contest25:dupe", -1, &a->contest25__Qso::dupe, ""))
		return soap->error;
	if (soap_out_std__string(soap, "contest25:idKey", -1, &a->contest25__Qso::idKey, ""))
		return soap->error;
	if (soap_out_int(soap, "contest25:mode", -1, &a->contest25__Qso::mode, ""))
		return soap->error;
	if (!a->contest25__Qso::qsoparts)
	{	if (soap_element_nil(soap, "contest25:qsoparts"))
			return soap->error;
	}
	else if (soap_out_PointerTocontest26__ArrayOfstring(soap, "contest25:qsoparts", -1, &a->contest25__Qso::qsoparts, ""))
		return soap->error;
	if (soap_out_double(soap, "contest25:recvFreq", -1, &a->contest25__Qso::recvFreq, ""))
		return soap->error;
	if (soap_out_int(soap, "contest25:serial", -1, &a->contest25__Qso::serial, ""))
		return soap->error;
	if (soap_out_std__string(soap, "contest25:station", -1, &a->contest25__Qso::station, ""))
		return soap->error;
	if (soap_out_int(soap, "contest25:time64H", -1, &a->contest25__Qso::time64H, ""))
		return soap->error;
	if (soap_out_int(soap, "contest25:time64L", -1, &a->contest25__Qso::time64L, ""))
		return soap->error;
	if (soap_out_std__string(soap, "contest25:updatedBy", -1, &a->contest25__Qso::updatedBy, ""))
		return soap->error;
	if (soap_out_int(soap, "contest25:version", -1, &a->contest25__Qso::version, ""))
		return soap->error;
	if (soap_out_double(soap, "contest25:xmitFreq", -1, &a->contest25__Qso::xmitFreq, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest25__Qso::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest25__Qso(soap, tag, this, type);
}

SOAP_FMAC3 contest25__Qso * SOAP_FMAC4 soap_in_contest25__Qso(struct soap *soap, const char *tag, contest25__Qso *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest25__Qso*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest25__Qso, sizeof(contest25__Qso), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_contest25__Qso)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (contest25__Qso *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	size_t soap_flag_band1 = 1;
	size_t soap_flag_dupe1 = 1;
	size_t soap_flag_idKey1 = 1;
	size_t soap_flag_mode1 = 1;
	size_t soap_flag_qsoparts1 = 1;
	size_t soap_flag_recvFreq1 = 1;
	size_t soap_flag_serial1 = 1;
	size_t soap_flag_station1 = 1;
	size_t soap_flag_time64H1 = 1;
	size_t soap_flag_time64L1 = 1;
	size_t soap_flag_updatedBy1 = 1;
	size_t soap_flag_version1 = 1;
	size_t soap_flag_xmitFreq1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_band1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "contest25:band", &a->contest25__Qso::band, "xsd:int"))
				{	soap_flag_band1--;
					continue;
				}
			}
			if (soap_flag_dupe1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "contest25:dupe", &a->contest25__Qso::dupe, "xsd:int"))
				{	soap_flag_dupe1--;
					continue;
				}
			}
			if (soap_flag_idKey1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "contest25:idKey", &a->contest25__Qso::idKey, "xsd:string"))
				{	soap_flag_idKey1--;
					continue;
				}
			}
			if (soap_flag_mode1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "contest25:mode", &a->contest25__Qso::mode, "xsd:int"))
				{	soap_flag_mode1--;
					continue;
				}
			}
			if (soap_flag_qsoparts1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTocontest26__ArrayOfstring(soap, "contest25:qsoparts", &a->contest25__Qso::qsoparts, "contest26:ArrayOfstring"))
				{	soap_flag_qsoparts1--;
					continue;
				}
			}
			if (soap_flag_recvFreq1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_double(soap, "contest25:recvFreq", &a->contest25__Qso::recvFreq, "xsd:double"))
				{	soap_flag_recvFreq1--;
					continue;
				}
			}
			if (soap_flag_serial1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "contest25:serial", &a->contest25__Qso::serial, "xsd:int"))
				{	soap_flag_serial1--;
					continue;
				}
			}
			if (soap_flag_station1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "contest25:station", &a->contest25__Qso::station, "xsd:string"))
				{	soap_flag_station1--;
					continue;
				}
			}
			if (soap_flag_time64H1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "contest25:time64H", &a->contest25__Qso::time64H, "xsd:int"))
				{	soap_flag_time64H1--;
					continue;
				}
			}
			if (soap_flag_time64L1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "contest25:time64L", &a->contest25__Qso::time64L, "xsd:int"))
				{	soap_flag_time64L1--;
					continue;
				}
			}
			if (soap_flag_updatedBy1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_std__string(soap, "contest25:updatedBy", &a->contest25__Qso::updatedBy, "xsd:string"))
				{	soap_flag_updatedBy1--;
					continue;
				}
			}
			if (soap_flag_version1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "contest25:version", &a->contest25__Qso::version, "xsd:int"))
				{	soap_flag_version1--;
					continue;
				}
			}
			if (soap_flag_xmitFreq1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_double(soap, "contest25:xmitFreq", &a->contest25__Qso::xmitFreq, "xsd:double"))
				{	soap_flag_xmitFreq1--;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_band1 > 0 || soap_flag_dupe1 > 0 || soap_flag_idKey1 > 0 || soap_flag_mode1 > 0 || soap_flag_qsoparts1 > 0 || soap_flag_recvFreq1 > 0 || soap_flag_serial1 > 0 || soap_flag_station1 > 0 || soap_flag_time64H1 > 0 || soap_flag_time64L1 > 0 || soap_flag_updatedBy1 > 0 || soap_flag_version1 > 0 || soap_flag_xmitFreq1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (contest25__Qso *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_contest25__Qso, SOAP_TYPE_C2_contest25__Qso, sizeof(contest25__Qso), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 contest25__Qso * SOAP_FMAC2 soap_instantiate_contest25__Qso(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest25__Qso(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest25__Qso *p;
	size_t k = sizeof(contest25__Qso);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_contest25__Qso, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest25__Qso);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest25__Qso, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest25__Qso location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest25__Qso::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest25__Qso(soap, tag ? tag : "contest25:Qso", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest25__Qso::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest25__Qso(soap, this, tag, type);
}

SOAP_FMAC3 contest25__Qso * SOAP_FMAC4 soap_get_contest25__Qso(struct soap *soap, contest25__Qso *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest25__Qso(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest25__ArrayOfQso::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__vectorTemplateOfPointerTocontest25__Qso(soap, &this->contest25__ArrayOfQso::Qso);
}

void contest25__ArrayOfQso::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfPointerTocontest25__Qso(soap, &this->contest25__ArrayOfQso::Qso);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int contest25__ArrayOfQso::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest25__ArrayOfQso(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest25__ArrayOfQso(struct soap *soap, const char *tag, int id, const contest25__ArrayOfQso *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_contest25__ArrayOfQso), type ? type : "contest25:ArrayOfQso"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerTocontest25__Qso(soap, "contest25:Qso", -1, &a->contest25__ArrayOfQso::Qso, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest25__ArrayOfQso::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest25__ArrayOfQso(soap, tag, this, type);
}

SOAP_FMAC3 contest25__ArrayOfQso * SOAP_FMAC4 soap_in_contest25__ArrayOfQso(struct soap *soap, const char *tag, contest25__ArrayOfQso *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest25__ArrayOfQso*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest25__ArrayOfQso, sizeof(contest25__ArrayOfQso), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_contest25__ArrayOfQso)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (contest25__ArrayOfQso *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfPointerTocontest25__Qso(soap, "contest25:Qso", &a->contest25__ArrayOfQso::Qso, "contest25:Qso"))
					continue;
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest25__ArrayOfQso *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_contest25__ArrayOfQso, SOAP_TYPE_C2_contest25__ArrayOfQso, sizeof(contest25__ArrayOfQso), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 contest25__ArrayOfQso * SOAP_FMAC2 soap_instantiate_contest25__ArrayOfQso(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest25__ArrayOfQso(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest25__ArrayOfQso *p;
	size_t k = sizeof(contest25__ArrayOfQso);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_contest25__ArrayOfQso, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest25__ArrayOfQso);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest25__ArrayOfQso, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest25__ArrayOfQso location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest25__ArrayOfQso::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest25__ArrayOfQso(soap, tag ? tag : "contest25:ArrayOfQso", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest25__ArrayOfQso::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest25__ArrayOfQso(soap, this, tag, type);
}

SOAP_FMAC3 contest25__ArrayOfQso * SOAP_FMAC4 soap_get_contest25__ArrayOfQso(struct soap *soap, contest25__ArrayOfQso *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest25__ArrayOfQso(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest26__ArrayOfint::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__vectorTemplateOfint(soap, &this->contest26__ArrayOfint::int_);
}

void contest26__ArrayOfint::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfint(soap, &this->contest26__ArrayOfint::int_);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int contest26__ArrayOfint::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest26__ArrayOfint(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest26__ArrayOfint(struct soap *soap, const char *tag, int id, const contest26__ArrayOfint *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_contest26__ArrayOfint), type ? type : "contest26:ArrayOfint"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfint(soap, "contest26:int", -1, &a->contest26__ArrayOfint::int_, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest26__ArrayOfint::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest26__ArrayOfint(soap, tag, this, type);
}

SOAP_FMAC3 contest26__ArrayOfint * SOAP_FMAC4 soap_in_contest26__ArrayOfint(struct soap *soap, const char *tag, contest26__ArrayOfint *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest26__ArrayOfint*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest26__ArrayOfint, sizeof(contest26__ArrayOfint), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_contest26__ArrayOfint)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (contest26__ArrayOfint *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfint(soap, "contest26:int", &a->contest26__ArrayOfint::int_, "xsd:int"))
					continue;
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest26__ArrayOfint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_contest26__ArrayOfint, SOAP_TYPE_C2_contest26__ArrayOfint, sizeof(contest26__ArrayOfint), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 contest26__ArrayOfint * SOAP_FMAC2 soap_instantiate_contest26__ArrayOfint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest26__ArrayOfint(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest26__ArrayOfint *p;
	size_t k = sizeof(contest26__ArrayOfint);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_contest26__ArrayOfint, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest26__ArrayOfint);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest26__ArrayOfint, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest26__ArrayOfint location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest26__ArrayOfint::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest26__ArrayOfint(soap, tag ? tag : "contest26:ArrayOfint", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest26__ArrayOfint::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest26__ArrayOfint(soap, this, tag, type);
}

SOAP_FMAC3 contest26__ArrayOfint * SOAP_FMAC4 soap_get_contest26__ArrayOfint(struct soap *soap, contest26__ArrayOfint *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest26__ArrayOfint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void contest26__ArrayOfstring::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__vectorTemplateOfstd__string(soap, &this->contest26__ArrayOfstring::string);
}

void contest26__ArrayOfstring::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfstd__string(soap, &this->contest26__ArrayOfstring::string);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int contest26__ArrayOfstring::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_contest26__ArrayOfstring(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_contest26__ArrayOfstring(struct soap *soap, const char *tag, int id, const contest26__ArrayOfstring *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_contest26__ArrayOfstring), type ? type : "contest26:ArrayOfstring"))
		return soap->error;
	if (soap_out_std__vectorTemplateOfstd__string(soap, "contest26:string", -1, &a->contest26__ArrayOfstring::string, ""))
		return soap->error;
	if (soap_outliteral(soap, "-item", (char*const*)&a->xsd__anyType::__item, NULL))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *contest26__ArrayOfstring::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_contest26__ArrayOfstring(soap, tag, this, type);
}

SOAP_FMAC3 contest26__ArrayOfstring * SOAP_FMAC4 soap_in_contest26__ArrayOfstring(struct soap *soap, const char *tag, contest26__ArrayOfstring *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (contest26__ArrayOfstring*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_contest26__ArrayOfstring, sizeof(contest26__ArrayOfstring), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_contest26__ArrayOfstring)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (contest26__ArrayOfstring *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag___item2 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_std__vectorTemplateOfstd__string(soap, "contest26:string", &a->contest26__ArrayOfstring::string, "xsd:string"))
					continue;
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-item", (char**)&a->xsd__anyType::__item))
				{	soap_flag___item2--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (contest26__ArrayOfstring *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_contest26__ArrayOfstring, SOAP_TYPE_C2_contest26__ArrayOfstring, sizeof(contest26__ArrayOfstring), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 contest26__ArrayOfstring * SOAP_FMAC2 soap_instantiate_contest26__ArrayOfstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_contest26__ArrayOfstring(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	contest26__ArrayOfstring *p;
	size_t k = sizeof(contest26__ArrayOfstring);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_contest26__ArrayOfstring, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, contest26__ArrayOfstring);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, contest26__ArrayOfstring, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated contest26__ArrayOfstring location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int contest26__ArrayOfstring::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_contest26__ArrayOfstring(soap, tag ? tag : "contest26:ArrayOfstring", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *contest26__ArrayOfstring::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_contest26__ArrayOfstring(soap, this, tag, type);
}

SOAP_FMAC3 contest26__ArrayOfstring * SOAP_FMAC4 soap_get_contest26__ArrayOfstring(struct soap *soap, contest26__ArrayOfstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_contest26__ArrayOfstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__unsignedShort_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_unsignedShort(soap, &this->xsd__unsignedShort_::__item);
}

void xsd__unsignedShort_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__unsignedShort_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedShort_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedShort_(struct soap *soap, const char *tag, int id, const xsd__unsignedShort_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_unsignedShort(soap, tag, id, &a->xsd__unsignedShort_::__item, "xsd:unsignedShort");
}

void *xsd__unsignedShort_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__unsignedShort_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedShort_ * SOAP_FMAC4 soap_in_xsd__unsignedShort_(struct soap *soap, const char *tag, xsd__unsignedShort_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedShort_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__unsignedShort_, sizeof(xsd__unsignedShort_), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_xsd__unsignedShort_)
		return (xsd__unsignedShort_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_unsignedShort(soap, tag, &a->xsd__unsignedShort_::__item, "xsd:unsignedShort"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__unsignedShort_ * SOAP_FMAC2 soap_instantiate_xsd__unsignedShort_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedShort_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__unsignedShort_ *p;
	size_t k = sizeof(xsd__unsignedShort_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__unsignedShort_, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__unsignedShort_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__unsignedShort_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__unsignedShort_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__unsignedShort_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__unsignedShort_(soap, tag ? tag : "xsd:unsignedShort", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedShort_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedShort_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedShort_ * SOAP_FMAC4 soap_get_xsd__unsignedShort_(struct soap *soap, xsd__unsignedShort_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedShort_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__unsignedLong_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_ULONG64(soap, &this->xsd__unsignedLong_::__item);
}

void xsd__unsignedLong_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__unsignedLong_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedLong_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedLong_(struct soap *soap, const char *tag, int id, const xsd__unsignedLong_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_ULONG64(soap, tag, id, &a->xsd__unsignedLong_::__item, "xsd:unsignedLong");
}

void *xsd__unsignedLong_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__unsignedLong_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedLong_ * SOAP_FMAC4 soap_in_xsd__unsignedLong_(struct soap *soap, const char *tag, xsd__unsignedLong_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedLong_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__unsignedLong_, sizeof(xsd__unsignedLong_), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_xsd__unsignedLong_)
		return (xsd__unsignedLong_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_ULONG64(soap, tag, &a->xsd__unsignedLong_::__item, "xsd:unsignedLong"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__unsignedLong_ * SOAP_FMAC2 soap_instantiate_xsd__unsignedLong_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedLong_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__unsignedLong_ *p;
	size_t k = sizeof(xsd__unsignedLong_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__unsignedLong_, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__unsignedLong_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__unsignedLong_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__unsignedLong_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__unsignedLong_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__unsignedLong_(soap, tag ? tag : "xsd:unsignedLong", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedLong_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedLong_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedLong_ * SOAP_FMAC4 soap_get_xsd__unsignedLong_(struct soap *soap, xsd__unsignedLong_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedLong_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__unsignedInt_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_unsignedInt(soap, &this->xsd__unsignedInt_::__item);
}

void xsd__unsignedInt_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__unsignedInt_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedInt_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedInt_(struct soap *soap, const char *tag, int id, const xsd__unsignedInt_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_unsignedInt(soap, tag, id, &a->xsd__unsignedInt_::__item, "xsd:unsignedInt");
}

void *xsd__unsignedInt_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__unsignedInt_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedInt_ * SOAP_FMAC4 soap_in_xsd__unsignedInt_(struct soap *soap, const char *tag, xsd__unsignedInt_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedInt_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__unsignedInt_, sizeof(xsd__unsignedInt_), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_xsd__unsignedInt_)
		return (xsd__unsignedInt_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_unsignedInt(soap, tag, &a->xsd__unsignedInt_::__item, "xsd:unsignedInt"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__unsignedInt_ * SOAP_FMAC2 soap_instantiate_xsd__unsignedInt_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedInt_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__unsignedInt_ *p;
	size_t k = sizeof(xsd__unsignedInt_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__unsignedInt_, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__unsignedInt_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__unsignedInt_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__unsignedInt_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__unsignedInt_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__unsignedInt_(soap, tag ? tag : "xsd:unsignedInt", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedInt_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedInt_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedInt_ * SOAP_FMAC4 soap_get_xsd__unsignedInt_(struct soap *soap, xsd__unsignedInt_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedInt_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__unsignedByte__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__unsignedByte(soap, &this->xsd__unsignedByte__::__item);
}

void xsd__unsignedByte__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__unsignedByte__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedByte__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte__(struct soap *soap, const char *tag, int id, const xsd__unsignedByte__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__unsignedByte(soap, tag, id, &a->xsd__unsignedByte__::__item, "xsd:unsignedByte");
}

void *xsd__unsignedByte__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__unsignedByte__(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedByte__ * SOAP_FMAC4 soap_in_xsd__unsignedByte__(struct soap *soap, const char *tag, xsd__unsignedByte__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedByte__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__unsignedByte__, sizeof(xsd__unsignedByte__), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_xsd__unsignedByte__)
		return (xsd__unsignedByte__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__unsignedByte(soap, tag, &a->xsd__unsignedByte__::__item, "xsd:unsignedByte"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__unsignedByte__ * SOAP_FMAC2 soap_instantiate_xsd__unsignedByte__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedByte__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__unsignedByte__ *p;
	size_t k = sizeof(xsd__unsignedByte__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__unsignedByte__, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__unsignedByte__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__unsignedByte__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__unsignedByte__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__unsignedByte__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__unsignedByte__(soap, tag ? tag : "xsd:unsignedByte", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedByte__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedByte__(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedByte__ * SOAP_FMAC4 soap_get_xsd__unsignedByte__(struct soap *soap, xsd__unsignedByte__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__string_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_std__string(soap, &this->xsd__string_::__item);
}

void xsd__string_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__string(soap, &this->xsd__string_::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__string_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__string_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string_(struct soap *soap, const char *tag, int id, const xsd__string_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_std__string(soap, tag, id, &a->xsd__string_::__item, "xsd:string");
}

void *xsd__string_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__string_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__string_ * SOAP_FMAC4 soap_in_xsd__string_(struct soap *soap, const char *tag, xsd__string_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__string_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__string_, sizeof(xsd__string_), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_xsd__string_)
		return (xsd__string_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_std__string(soap, tag, &a->xsd__string_::__item, "xsd:string"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__string_ * SOAP_FMAC2 soap_instantiate_xsd__string_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__string_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__string_ *p;
	size_t k = sizeof(xsd__string_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__string_, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__string_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__string_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__string_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__string_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__string_(soap, tag ? tag : "xsd:string", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__string_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__string_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__string_ * SOAP_FMAC4 soap_get_xsd__string_(struct soap *soap, xsd__string_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__short_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_short(soap, &this->xsd__short_::__item);
}

void xsd__short_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__short_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__short_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__short_(struct soap *soap, const char *tag, int id, const xsd__short_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_short(soap, tag, id, &a->xsd__short_::__item, "xsd:short");
}

void *xsd__short_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__short_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__short_ * SOAP_FMAC4 soap_in_xsd__short_(struct soap *soap, const char *tag, xsd__short_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__short_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__short_, sizeof(xsd__short_), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_xsd__short_)
		return (xsd__short_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_short(soap, tag, &a->xsd__short_::__item, "xsd:short"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__short_ * SOAP_FMAC2 soap_instantiate_xsd__short_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__short_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__short_ *p;
	size_t k = sizeof(xsd__short_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__short_, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__short_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__short_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__short_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__short_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__short_(soap, tag ? tag : "xsd:short", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__short_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__short_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__short_ * SOAP_FMAC4 soap_get_xsd__short_(struct soap *soap, xsd__short_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__short_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__long_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_LONG64(soap, &this->xsd__long_::__item);
}

void xsd__long_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__long_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__long_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long_(struct soap *soap, const char *tag, int id, const xsd__long_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_LONG64(soap, tag, id, &a->xsd__long_::__item, "xsd:long");
}

void *xsd__long_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__long_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__long_ * SOAP_FMAC4 soap_in_xsd__long_(struct soap *soap, const char *tag, xsd__long_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__long_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__long_, sizeof(xsd__long_), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_xsd__long_)
		return (xsd__long_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_LONG64(soap, tag, &a->xsd__long_::__item, "xsd:long"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__long_ * SOAP_FMAC2 soap_instantiate_xsd__long_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__long_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__long_ *p;
	size_t k = sizeof(xsd__long_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__long_, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__long_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__long_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__long_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__long_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__long_(soap, tag ? tag : "xsd:long", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__long_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__long_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__long_ * SOAP_FMAC4 soap_get_xsd__long_(struct soap *soap, xsd__long_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__long_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__int_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_int(soap, &this->xsd__int_::__item);
}

void xsd__int_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__int_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__int_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int_(struct soap *soap, const char *tag, int id, const xsd__int_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_int(soap, tag, id, &a->xsd__int_::__item, "xsd:int");
}

void *xsd__int_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__int_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__int_ * SOAP_FMAC4 soap_in_xsd__int_(struct soap *soap, const char *tag, xsd__int_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__int_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__int_, sizeof(xsd__int_), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_xsd__int_)
		return (xsd__int_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_int(soap, tag, &a->xsd__int_::__item, "xsd:int"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__int_ * SOAP_FMAC2 soap_instantiate_xsd__int_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__int_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__int_ *p;
	size_t k = sizeof(xsd__int_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__int_, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__int_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__int_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__int_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__int_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__int_(soap, tag ? tag : "xsd:int", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__int_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__int_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__int_ * SOAP_FMAC4 soap_get_xsd__int_(struct soap *soap, xsd__int_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__float_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_float(soap, &this->xsd__float_::__item);
}

void xsd__float_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__float_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__float_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float_(struct soap *soap, const char *tag, int id, const xsd__float_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_float(soap, tag, id, &a->xsd__float_::__item, "xsd:float");
}

void *xsd__float_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__float_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__float_ * SOAP_FMAC4 soap_in_xsd__float_(struct soap *soap, const char *tag, xsd__float_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__float_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__float_, sizeof(xsd__float_), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_xsd__float_)
		return (xsd__float_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_float(soap, tag, &a->xsd__float_::__item, "xsd:float"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__float_ * SOAP_FMAC2 soap_instantiate_xsd__float_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__float_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__float_ *p;
	size_t k = sizeof(xsd__float_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__float_, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__float_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__float_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__float_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__float_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__float_(soap, tag ? tag : "xsd:float", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__float_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__float_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__float_ * SOAP_FMAC4 soap_get_xsd__float_(struct soap *soap, xsd__float_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__float_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__duration__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__duration(soap, &this->xsd__duration__::__item);
}

void xsd__duration__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__duration(soap, &this->xsd__duration__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__duration__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__duration__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration__(struct soap *soap, const char *tag, int id, const xsd__duration__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__duration(soap, tag, id, &a->xsd__duration__::__item, "xsd:duration");
}

void *xsd__duration__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__duration__(soap, tag, this, type);
}

SOAP_FMAC3 xsd__duration__ * SOAP_FMAC4 soap_in_xsd__duration__(struct soap *soap, const char *tag, xsd__duration__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__duration__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__duration__, sizeof(xsd__duration__), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_xsd__duration__)
		return (xsd__duration__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__duration(soap, tag, &a->xsd__duration__::__item, "xsd:duration"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__duration__ * SOAP_FMAC2 soap_instantiate_xsd__duration__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__duration__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__duration__ *p;
	size_t k = sizeof(xsd__duration__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__duration__, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__duration__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__duration__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__duration__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__duration__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__duration__(soap, tag ? tag : "xsd:duration", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__duration__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__duration__(soap, this, tag, type);
}

SOAP_FMAC3 xsd__duration__ * SOAP_FMAC4 soap_get_xsd__duration__(struct soap *soap, xsd__duration__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__duration__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__duration(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_C2_xsd__duration), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__duration(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__duration, sizeof(std::string), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 5, 0, -1, "[-+]?P(\\d+Y)?(\\d+M)?(\\d+D)?(T(\\d+H)?(\\d+M)?(\\d+(\\.\\d*)?S)?)?")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__duration, sizeof(std::string), soap->type, soap->arrayType, C2_instantiate, C2_fbase), 0, SOAP_TYPE_C2_xsd__duration, SOAP_TYPE_C2_xsd__duration, sizeof(std::string), 0, C2_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__duration(soap, tag ? tag : "xsd:duration", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__duration(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__duration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__double_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_double(soap, &this->xsd__double_::__item);
}

void xsd__double_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__double_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__double_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double_(struct soap *soap, const char *tag, int id, const xsd__double_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_double(soap, tag, id, &a->xsd__double_::__item, "xsd:double");
}

void *xsd__double_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__double_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__double_ * SOAP_FMAC4 soap_in_xsd__double_(struct soap *soap, const char *tag, xsd__double_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__double_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__double_, sizeof(xsd__double_), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_xsd__double_)
		return (xsd__double_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_double(soap, tag, &a->xsd__double_::__item, "xsd:double"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__double_ * SOAP_FMAC2 soap_instantiate_xsd__double_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__double_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__double_ *p;
	size_t k = sizeof(xsd__double_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__double_, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__double_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__double_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__double_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__double_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__double_(soap, tag ? tag : "xsd:double", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__double_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__double_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__double_ * SOAP_FMAC4 soap_get_xsd__double_(struct soap *soap, xsd__double_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__double_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__decimal__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__decimal(soap, &this->xsd__decimal__::__item);
}

void xsd__decimal__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__decimal(soap, &this->xsd__decimal__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__decimal__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__decimal__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal__(struct soap *soap, const char *tag, int id, const xsd__decimal__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__decimal(soap, tag, id, &a->xsd__decimal__::__item, "xsd:decimal");
}

void *xsd__decimal__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__decimal__(soap, tag, this, type);
}

SOAP_FMAC3 xsd__decimal__ * SOAP_FMAC4 soap_in_xsd__decimal__(struct soap *soap, const char *tag, xsd__decimal__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__decimal__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__decimal__, sizeof(xsd__decimal__), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_xsd__decimal__)
		return (xsd__decimal__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__decimal(soap, tag, &a->xsd__decimal__::__item, "xsd:decimal"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__decimal__ * SOAP_FMAC2 soap_instantiate_xsd__decimal__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__decimal__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__decimal__ *p;
	size_t k = sizeof(xsd__decimal__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__decimal__, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__decimal__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__decimal__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__decimal__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__decimal__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__decimal__(soap, tag ? tag : "xsd:decimal", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__decimal__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__decimal__(soap, this, tag, type);
}

SOAP_FMAC3 xsd__decimal__ * SOAP_FMAC4 soap_get_xsd__decimal__(struct soap *soap, xsd__decimal__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_C2_xsd__decimal), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__decimal(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 5, 0, -1, "[-+]?(\\d+|\\d*\\.\\d*)")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__decimal, sizeof(std::string), soap->type, soap->arrayType, C2_instantiate, C2_fbase), 0, SOAP_TYPE_C2_xsd__decimal, SOAP_TYPE_C2_xsd__decimal, sizeof(std::string), 0, C2_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__decimal(soap, tag ? tag : "xsd:decimal", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__decimal(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__dateTime_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_dateTime(soap, &this->xsd__dateTime_::__item);
}

void xsd__dateTime_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__dateTime_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__dateTime_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime_(struct soap *soap, const char *tag, int id, const xsd__dateTime_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_dateTime(soap, tag, id, &a->xsd__dateTime_::__item, "xsd:dateTime");
}

void *xsd__dateTime_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__dateTime_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__dateTime_ * SOAP_FMAC4 soap_in_xsd__dateTime_(struct soap *soap, const char *tag, xsd__dateTime_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__dateTime_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__dateTime_, sizeof(xsd__dateTime_), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_xsd__dateTime_)
		return (xsd__dateTime_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_dateTime(soap, tag, &a->xsd__dateTime_::__item, "xsd:dateTime"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__dateTime_ * SOAP_FMAC2 soap_instantiate_xsd__dateTime_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__dateTime_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__dateTime_ *p;
	size_t k = sizeof(xsd__dateTime_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__dateTime_, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__dateTime_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__dateTime_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__dateTime_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__dateTime_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__dateTime_(soap, tag ? tag : "xsd:dateTime", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__dateTime_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__dateTime_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__dateTime_ * SOAP_FMAC4 soap_get_xsd__dateTime_(struct soap *soap, xsd__dateTime_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__dateTime_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__byte__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__byte(soap, &this->xsd__byte__::__item);
}

void xsd__byte__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__byte__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__byte__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte__(struct soap *soap, const char *tag, int id, const xsd__byte__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__byte(soap, tag, id, &a->xsd__byte__::__item, "xsd:byte");
}

void *xsd__byte__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__byte__(soap, tag, this, type);
}

SOAP_FMAC3 xsd__byte__ * SOAP_FMAC4 soap_in_xsd__byte__(struct soap *soap, const char *tag, xsd__byte__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__byte__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__byte__, sizeof(xsd__byte__), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_xsd__byte__)
		return (xsd__byte__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__byte(soap, tag, &a->xsd__byte__::__item, "xsd:byte"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__byte__ * SOAP_FMAC2 soap_instantiate_xsd__byte__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__byte__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__byte__ *p;
	size_t k = sizeof(xsd__byte__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__byte__, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__byte__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__byte__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__byte__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__byte__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__byte__(soap, tag ? tag : "xsd:byte", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__byte__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__byte__(soap, this, tag, type);
}

SOAP_FMAC3 xsd__byte__ * SOAP_FMAC4 soap_get_xsd__byte__(struct soap *soap, xsd__byte__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__byte__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__boolean_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_bool(soap, &this->xsd__boolean_::__item);
}

void xsd__boolean_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__boolean_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__boolean_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean_(struct soap *soap, const char *tag, int id, const xsd__boolean_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_bool(soap, tag, id, &a->xsd__boolean_::__item, "xsd:boolean");
}

void *xsd__boolean_::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__boolean_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__boolean_ * SOAP_FMAC4 soap_in_xsd__boolean_(struct soap *soap, const char *tag, xsd__boolean_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__boolean_*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__boolean_, sizeof(xsd__boolean_), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_xsd__boolean_)
		return (xsd__boolean_ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_bool(soap, tag, &a->xsd__boolean_::__item, "xsd:boolean"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__boolean_ * SOAP_FMAC2 soap_instantiate_xsd__boolean_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__boolean_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__boolean_ *p;
	size_t k = sizeof(xsd__boolean_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__boolean_, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__boolean_);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__boolean_, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__boolean_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__boolean_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__boolean_(soap, tag ? tag : "xsd:boolean", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__boolean_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__boolean_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__boolean_ * SOAP_FMAC4 soap_get_xsd__boolean_(struct soap *soap, xsd__boolean_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__boolean_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__base64Binary__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	this->xsd__base64Binary__::__item.xsd__base64Binary::soap_default(soap);
}

void xsd__base64Binary__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	this->xsd__base64Binary__::__item.soap_serialize(soap);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__base64Binary__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__base64Binary__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary__(struct soap *soap, const char *tag, int id, const xsd__base64Binary__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return (a->xsd__base64Binary__::__item).soap_out(soap, tag, id, "xsd:base64Binary");
}

void *xsd__base64Binary__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__base64Binary__(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary__ * SOAP_FMAC4 soap_in_xsd__base64Binary__(struct soap *soap, const char *tag, xsd__base64Binary__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__base64Binary__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__base64Binary__, sizeof(xsd__base64Binary__), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_xsd__base64Binary__)
		return (xsd__base64Binary__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!(a->xsd__base64Binary__::__item).soap_in(soap, tag, "xsd:base64Binary"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__base64Binary__ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__base64Binary__ *p;
	size_t k = sizeof(xsd__base64Binary__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__base64Binary__, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__base64Binary__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__base64Binary__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__base64Binary__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__base64Binary__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__base64Binary__(soap, tag ? tag : "xsd:base64Binary", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary__(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary__ * SOAP_FMAC4 soap_get_xsd__base64Binary__(struct soap *soap, xsd__base64Binary__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__anyURI__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__anyURI(soap, &this->xsd__anyURI__::__item);
}

void xsd__anyURI__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__anyURI(soap, &this->xsd__anyURI__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__anyURI__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyURI__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI__(struct soap *soap, const char *tag, int id, const xsd__anyURI__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__anyURI(soap, tag, id, &a->xsd__anyURI__::__item, "xsd:anyURI");
}

void *xsd__anyURI__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__anyURI__(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyURI__ * SOAP_FMAC4 soap_in_xsd__anyURI__(struct soap *soap, const char *tag, xsd__anyURI__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyURI__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__anyURI__, sizeof(xsd__anyURI__), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_xsd__anyURI__)
		return (xsd__anyURI__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__anyURI(soap, tag, &a->xsd__anyURI__::__item, "xsd:anyURI"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__anyURI__ * SOAP_FMAC2 soap_instantiate_xsd__anyURI__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyURI__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__anyURI__ *p;
	size_t k = sizeof(xsd__anyURI__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__anyURI__, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__anyURI__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__anyURI__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__anyURI__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__anyURI__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__anyURI__(soap, tag ? tag : "xsd:anyURI", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyURI__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyURI__(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyURI__ * SOAP_FMAC4 soap_get_xsd__anyURI__(struct soap *soap, xsd__anyURI__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_C2_xsd__anyURI), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__anyURI, sizeof(std::string), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 4, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__anyURI, sizeof(std::string), soap->type, soap->arrayType, C2_instantiate, C2_fbase), 0, SOAP_TYPE_C2_xsd__anyURI, SOAP_TYPE_C2_xsd__anyURI, sizeof(std::string), 0, C2_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__anyURI(soap, tag ? tag : "xsd:anyURI", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__QName__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__QName(soap, &this->xsd__QName__::__item);
}

void xsd__QName__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__QName(soap, &this->xsd__QName__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__QName__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__QName__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName__(struct soap *soap, const char *tag, int id, const xsd__QName__ *a, const char *type)
{
	std::string soap_tmp___item(soap_QName2s(soap, a->__item.c_str()));
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__QName(soap, tag, id, &soap_tmp___item, "xsd:QName");
}

void *xsd__QName__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__QName__(soap, tag, this, type);
}

SOAP_FMAC3 xsd__QName__ * SOAP_FMAC4 soap_in_xsd__QName__(struct soap *soap, const char *tag, xsd__QName__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__QName__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__QName__, sizeof(xsd__QName__), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_xsd__QName__)
		return (xsd__QName__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__QName(soap, tag, &a->xsd__QName__::__item, "xsd:QName"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__QName__ * SOAP_FMAC2 soap_instantiate_xsd__QName__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__QName__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__QName__ *p;
	size_t k = sizeof(xsd__QName__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__QName__, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__QName__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__QName__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__QName__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__QName__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__QName__(soap, tag ? tag : "xsd:QName", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__QName__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__QName__(soap, this, tag, type);
}

SOAP_FMAC3 xsd__QName__ * SOAP_FMAC4 soap_get_xsd__QName__(struct soap *soap, xsd__QName__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__QName__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__IDREF__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__IDREF(soap, &this->xsd__IDREF__::__item);
}

void xsd__IDREF__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__IDREF(soap, &this->xsd__IDREF__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__IDREF__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__IDREF__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF__(struct soap *soap, const char *tag, int id, const xsd__IDREF__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__IDREF(soap, tag, id, &a->xsd__IDREF__::__item, "xsd:IDREF");
}

void *xsd__IDREF__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__IDREF__(soap, tag, this, type);
}

SOAP_FMAC3 xsd__IDREF__ * SOAP_FMAC4 soap_in_xsd__IDREF__(struct soap *soap, const char *tag, xsd__IDREF__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__IDREF__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__IDREF__, sizeof(xsd__IDREF__), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_xsd__IDREF__)
		return (xsd__IDREF__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__IDREF(soap, tag, &a->xsd__IDREF__::__item, "xsd:IDREF"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__IDREF__ * SOAP_FMAC2 soap_instantiate_xsd__IDREF__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__IDREF__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__IDREF__ *p;
	size_t k = sizeof(xsd__IDREF__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__IDREF__, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__IDREF__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__IDREF__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__IDREF__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__IDREF__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__IDREF__(soap, tag ? tag : "xsd:IDREF", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__IDREF__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__IDREF__(soap, this, tag, type);
}

SOAP_FMAC3 xsd__IDREF__ * SOAP_FMAC4 soap_get_xsd__IDREF__(struct soap *soap, xsd__IDREF__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__IDREF__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__IDREF(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_C2_xsd__IDREF), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__IDREF(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__IDREF, sizeof(std::string), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 5, 0, -1, "[\\i-[:]][\\c-[:]]*")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__IDREF, sizeof(std::string), soap->type, soap->arrayType, C2_instantiate, C2_fbase), 0, SOAP_TYPE_C2_xsd__IDREF, SOAP_TYPE_C2_xsd__IDREF, sizeof(std::string), 0, C2_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__IDREF(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__IDREF(soap, tag ? tag : "xsd:IDREF", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__IDREF(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__IDREF(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__ID__::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::soap_default(soap);
	soap_default_xsd__ID(soap, &this->xsd__ID__::__item);
}

void xsd__ID__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__ID(soap, &this->xsd__ID__::__item);
	this->xsd__anyType::soap_serialize(soap);
#endif
}

int xsd__ID__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__ID__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID__(struct soap *soap, const char *tag, int id, const xsd__ID__ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_out_xsd__ID(soap, tag, id, &a->xsd__ID__::__item, "xsd:ID");
}

void *xsd__ID__::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__ID__(soap, tag, this, type);
}

SOAP_FMAC3 xsd__ID__ * SOAP_FMAC4 soap_in_xsd__ID__(struct soap *soap, const char *tag, xsd__ID__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__ID__*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__ID__, sizeof(xsd__ID__), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_xsd__ID__)
		return (xsd__ID__ *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_in_xsd__ID(soap, tag, &a->xsd__ID__::__item, "xsd:ID"))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__ID__ * SOAP_FMAC2 soap_instantiate_xsd__ID__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__ID__(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__ID__ *p;
	size_t k = sizeof(xsd__ID__);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__ID__, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__ID__);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__ID__, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__ID__ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__ID__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__ID__(soap, tag ? tag : "xsd:ID", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__ID__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__ID__(soap, this, tag, type);
}

SOAP_FMAC3 xsd__ID__ * SOAP_FMAC4 soap_get_xsd__ID__(struct soap *soap, xsd__ID__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__ID__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__ID(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_C2_xsd__ID), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__ID(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__ID, sizeof(std::string), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 5, 0, -1, "[\\i-[:]][\\c-[:]]*")))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__ID, sizeof(std::string), soap->type, soap->arrayType, C2_instantiate, C2_fbase), 0, SOAP_TYPE_C2_xsd__ID, SOAP_TYPE_C2_xsd__ID, sizeof(std::string), 0, C2_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__ID(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__ID(soap, tag ? tag : "xsd:ID", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__ID(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__ID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->__ptr = NULL;
	this->__size = 0;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (this->__ptr)
		(void)soap_attachment_reference(soap, this, this->__ptr, this->__size, SOAP_TYPE_C2_xsd__base64Binary, this->id, this->type);
#endif
}

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__base64Binary2s(struct soap *soap, xsd__base64Binary a)
{
	return soap_s2base64(soap, a.__ptr, NULL, a.__size);
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, a->__ptr, a->__size, a->id, a->type, a->options, type, SOAP_TYPE_C2_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, a->__ptr, a->__size, type, SOAP_TYPE_C2_xsd__base64Binary, NULL);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__base64Binary(struct soap *soap, const char *s, xsd__base64Binary *a)
{
	a->__ptr = (unsigned char*)soap_base642s(soap, s, NULL, 0, &a->__size);
	if (!a->__ptr)
		return soap->error;
	return SOAP_OK;
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
	if (!a)
		return NULL;
	a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_attachment_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_xsd__base64Binary, SOAP_TYPE_C2_xsd__base64Binary, sizeof(xsd__base64Binary), 0, C2_finsert, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	xsd__base64Binary *p;
	size_t k = sizeof(xsd__base64Binary);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__base64Binary, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__base64Binary);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__base64Binary, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__base64Binary location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__base64Binary(soap, tag ? tag : "xsd:base64Binary", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_C2_xsd__QName), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__QName(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__QName, sizeof(std::string), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 2, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_C2_xsd__QName, sizeof(std::string), soap->type, soap->arrayType, C2_instantiate, C2_fbase), 0, SOAP_TYPE_C2_xsd__QName, SOAP_TYPE_C2_xsd__QName, sizeof(std::string), 0, C2_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__QName(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__QName, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_xsd__QName(soap, tag ? tag : "xsd:QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__QName(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_C2_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_C2_std__string, sizeof(std::string), soap->type, soap->arrayType, C2_instantiate, C2_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_C2_std__string, sizeof(std::string), soap->type, soap->arrayType, C2_instantiate, C2_fbase), 0, SOAP_TYPE_C2_std__string, SOAP_TYPE_C2_std__string, sizeof(std::string), 0, C2_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_std__string, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__anyType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::__item = NULL;
}

void xsd__anyType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

int xsd__anyType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap *soap, const char *tag, int id, const xsd__anyType *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	return soap_outliteral(soap, tag, (char*const*)&a->xsd__anyType::__item, NULL);
}

void *xsd__anyType::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in_xsd__anyType(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap *soap, const char *tag, xsd__anyType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyType*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_xsd__anyType, sizeof(xsd__anyType), soap->type, soap->arrayType, C2_instantiate, C2_fbase)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced && soap->alloced != SOAP_TYPE_C2_xsd__anyType)
		return (xsd__anyType *)a->soap_in(soap, tag, type);
	if (soap->alloced)
		a->soap_default(soap);
	if (!soap_inliteral(soap, tag, (char**)&a->xsd__anyType::__item))
		return NULL;
	return a;
}

SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyType(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (soap && type && !soap_match_tag(soap, type, "xsd:ID"))
		return soap_instantiate_xsd__ID__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:IDREF"))
		return soap_instantiate_xsd__IDREF__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:QName"))
		return soap_instantiate_xsd__QName__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:anyURI"))
		return soap_instantiate_xsd__anyURI__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:base64Binary"))
		return soap_instantiate_xsd__base64Binary__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:boolean"))
		return soap_instantiate_xsd__boolean_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:byte"))
		return soap_instantiate_xsd__byte__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:dateTime"))
		return soap_instantiate_xsd__dateTime_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:decimal"))
		return soap_instantiate_xsd__decimal__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:double"))
		return soap_instantiate_xsd__double_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:duration"))
		return soap_instantiate_xsd__duration__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:float"))
		return soap_instantiate_xsd__float_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:int"))
		return soap_instantiate_xsd__int_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:long"))
		return soap_instantiate_xsd__long_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:short"))
		return soap_instantiate_xsd__short_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:string"))
		return soap_instantiate_xsd__string_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:unsignedByte"))
		return soap_instantiate_xsd__unsignedByte__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:unsignedInt"))
		return soap_instantiate_xsd__unsignedInt_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:unsignedLong"))
		return soap_instantiate_xsd__unsignedLong_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "xsd:unsignedShort"))
		return soap_instantiate_xsd__unsignedShort_(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "contest24:char"))
		return soap_instantiate_contest24__char__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "contest24:duration"))
		return soap_instantiate_contest24__duration__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "contest24:guid"))
		return soap_instantiate_contest24__guid__(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "contest26:ArrayOfstring"))
		return soap_instantiate_contest26__ArrayOfstring(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "contest26:ArrayOfint"))
		return soap_instantiate_contest26__ArrayOfint(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "contest25:ArrayOfQso"))
		return soap_instantiate_contest25__ArrayOfQso(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "contest25:Qso"))
		return soap_instantiate_contest25__Qso(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "contest25:QsoUpdate"))
		return soap_instantiate_contest25__QsoUpdate(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "contest25:LogSummary"))
		return soap_instantiate_contest25__LogSummary(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "contest25:ArrayOfQsoIdVersion"))
		return soap_instantiate_contest25__ArrayOfQsoIdVersion(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "contest25:QsoIdVersion"))
		return soap_instantiate_contest25__QsoIdVersion(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "contest25:ArrayOfRigFrequency"))
		return soap_instantiate_contest25__ArrayOfRigFrequency(soap, n, NULL, NULL, size);
	if (soap && type && !soap_match_tag(soap, type, "contest25:RigFrequency"))
		return soap_instantiate_contest25__RigFrequency(soap, n, NULL, NULL, size);
	xsd__anyType *p;
	size_t k = sizeof(xsd__anyType);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_xsd__anyType, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, xsd__anyType);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, xsd__anyType, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated xsd__anyType location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int xsd__anyType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out_xsd__anyType(soap, tag ? tag : "xsd:anyType", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyType(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap *soap, xsd__anyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode;
	soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Fault*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_SOAP_ENV__Fault, SOAP_TYPE_C2_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, C2_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_SOAP_ENV__Fault, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Reason*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_SOAP_ENV__Reason, SOAP_TYPE_C2_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, C2_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_SOAP_ENV__Reason, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Detail*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, "fault", &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_SOAP_ENV__Detail, SOAP_TYPE_C2_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, C2_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_SOAP_ENV__Detail, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value;
	soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Code*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_SOAP_ENV__Code, SOAP_TYPE_C2_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, C2_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_SOAP_ENV__Code, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_C2_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	(void)type; /* appease -Wall -Werror */
	a = (struct SOAP_ENV__Header*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_C2_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_C2_SOAP_ENV__Header, SOAP_TYPE_C2_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, C2_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_SOAP_ENV__Header, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___contest23__ExchangeFrequencies(struct soap *soap, struct __contest23__ExchangeFrequencies *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->contest23__ExchangeFrequencies = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___contest23__ExchangeFrequencies(struct soap *soap, const struct __contest23__ExchangeFrequencies *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_contest23__ExchangeFrequencies(soap, &a->contest23__ExchangeFrequencies);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___contest23__ExchangeFrequencies(struct soap *soap, const char *tag, int id, const struct __contest23__ExchangeFrequencies *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_contest23__ExchangeFrequencies(soap, "contest23:ExchangeFrequencies", -1, &a->contest23__ExchangeFrequencies, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest23__ExchangeFrequencies * SOAP_FMAC4 soap_in___contest23__ExchangeFrequencies(struct soap *soap, const char *tag, struct __contest23__ExchangeFrequencies *a, const char *type)
{
	size_t soap_flag_contest23__ExchangeFrequencies = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __contest23__ExchangeFrequencies*)soap_id_enter(soap, "", a, SOAP_TYPE_C2___contest23__ExchangeFrequencies, sizeof(struct __contest23__ExchangeFrequencies), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___contest23__ExchangeFrequencies(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_contest23__ExchangeFrequencies && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_contest23__ExchangeFrequencies(soap, "contest23:ExchangeFrequencies", &a->contest23__ExchangeFrequencies, ""))
				{	soap_flag_contest23__ExchangeFrequencies--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __contest23__ExchangeFrequencies * SOAP_FMAC2 soap_instantiate___contest23__ExchangeFrequencies(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___contest23__ExchangeFrequencies(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __contest23__ExchangeFrequencies *p;
	size_t k = sizeof(struct __contest23__ExchangeFrequencies);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2___contest23__ExchangeFrequencies, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __contest23__ExchangeFrequencies);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __contest23__ExchangeFrequencies, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __contest23__ExchangeFrequencies location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___contest23__ExchangeFrequencies(struct soap *soap, const struct __contest23__ExchangeFrequencies *a, const char *tag, const char *type)
{
	if (soap_out___contest23__ExchangeFrequencies(soap, tag ? tag : "-contest23:ExchangeFrequencies", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest23__ExchangeFrequencies * SOAP_FMAC4 soap_get___contest23__ExchangeFrequencies(struct soap *soap, struct __contest23__ExchangeFrequencies *p, const char *tag, const char *type)
{
	if ((p = soap_in___contest23__ExchangeFrequencies(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___contest23__ColumnNamesToIndices(struct soap *soap, struct __contest23__ColumnNamesToIndices *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->contest23__ColumnNamesToIndices = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___contest23__ColumnNamesToIndices(struct soap *soap, const struct __contest23__ColumnNamesToIndices *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_contest23__ColumnNamesToIndices(soap, &a->contest23__ColumnNamesToIndices);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___contest23__ColumnNamesToIndices(struct soap *soap, const char *tag, int id, const struct __contest23__ColumnNamesToIndices *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_contest23__ColumnNamesToIndices(soap, "contest23:ColumnNamesToIndices", -1, &a->contest23__ColumnNamesToIndices, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest23__ColumnNamesToIndices * SOAP_FMAC4 soap_in___contest23__ColumnNamesToIndices(struct soap *soap, const char *tag, struct __contest23__ColumnNamesToIndices *a, const char *type)
{
	size_t soap_flag_contest23__ColumnNamesToIndices = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __contest23__ColumnNamesToIndices*)soap_id_enter(soap, "", a, SOAP_TYPE_C2___contest23__ColumnNamesToIndices, sizeof(struct __contest23__ColumnNamesToIndices), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___contest23__ColumnNamesToIndices(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_contest23__ColumnNamesToIndices && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_contest23__ColumnNamesToIndices(soap, "contest23:ColumnNamesToIndices", &a->contest23__ColumnNamesToIndices, ""))
				{	soap_flag_contest23__ColumnNamesToIndices--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __contest23__ColumnNamesToIndices * SOAP_FMAC2 soap_instantiate___contest23__ColumnNamesToIndices(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___contest23__ColumnNamesToIndices(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __contest23__ColumnNamesToIndices *p;
	size_t k = sizeof(struct __contest23__ColumnNamesToIndices);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2___contest23__ColumnNamesToIndices, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __contest23__ColumnNamesToIndices);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __contest23__ColumnNamesToIndices, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __contest23__ColumnNamesToIndices location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___contest23__ColumnNamesToIndices(struct soap *soap, const struct __contest23__ColumnNamesToIndices *a, const char *tag, const char *type)
{
	if (soap_out___contest23__ColumnNamesToIndices(soap, tag ? tag : "-contest23:ColumnNamesToIndices", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest23__ColumnNamesToIndices * SOAP_FMAC4 soap_get___contest23__ColumnNamesToIndices(struct soap *soap, struct __contest23__ColumnNamesToIndices *p, const char *tag, const char *type)
{
	if ((p = soap_in___contest23__ColumnNamesToIndices(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___contest23__getQsosByKeyArray(struct soap *soap, struct __contest23__getQsosByKeyArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->contest23__getQsosByKeyArray = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___contest23__getQsosByKeyArray(struct soap *soap, const struct __contest23__getQsosByKeyArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_contest23__getQsosByKeyArray(soap, &a->contest23__getQsosByKeyArray);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___contest23__getQsosByKeyArray(struct soap *soap, const char *tag, int id, const struct __contest23__getQsosByKeyArray *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_contest23__getQsosByKeyArray(soap, "contest23:getQsosByKeyArray", -1, &a->contest23__getQsosByKeyArray, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest23__getQsosByKeyArray * SOAP_FMAC4 soap_in___contest23__getQsosByKeyArray(struct soap *soap, const char *tag, struct __contest23__getQsosByKeyArray *a, const char *type)
{
	size_t soap_flag_contest23__getQsosByKeyArray = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __contest23__getQsosByKeyArray*)soap_id_enter(soap, "", a, SOAP_TYPE_C2___contest23__getQsosByKeyArray, sizeof(struct __contest23__getQsosByKeyArray), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___contest23__getQsosByKeyArray(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_contest23__getQsosByKeyArray && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_contest23__getQsosByKeyArray(soap, "contest23:getQsosByKeyArray", &a->contest23__getQsosByKeyArray, ""))
				{	soap_flag_contest23__getQsosByKeyArray--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __contest23__getQsosByKeyArray * SOAP_FMAC2 soap_instantiate___contest23__getQsosByKeyArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___contest23__getQsosByKeyArray(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __contest23__getQsosByKeyArray *p;
	size_t k = sizeof(struct __contest23__getQsosByKeyArray);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2___contest23__getQsosByKeyArray, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __contest23__getQsosByKeyArray);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __contest23__getQsosByKeyArray, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __contest23__getQsosByKeyArray location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___contest23__getQsosByKeyArray(struct soap *soap, const struct __contest23__getQsosByKeyArray *a, const char *tag, const char *type)
{
	if (soap_out___contest23__getQsosByKeyArray(soap, tag ? tag : "-contest23:getQsosByKeyArray", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest23__getQsosByKeyArray * SOAP_FMAC4 soap_get___contest23__getQsosByKeyArray(struct soap *soap, struct __contest23__getQsosByKeyArray *p, const char *tag, const char *type)
{
	if ((p = soap_in___contest23__getQsosByKeyArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___contest23__AddAndGetLogSummary(struct soap *soap, struct __contest23__AddAndGetLogSummary *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->contest23__AddAndGetLogSummary = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___contest23__AddAndGetLogSummary(struct soap *soap, const struct __contest23__AddAndGetLogSummary *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_contest23__AddAndGetLogSummary(soap, &a->contest23__AddAndGetLogSummary);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___contest23__AddAndGetLogSummary(struct soap *soap, const char *tag, int id, const struct __contest23__AddAndGetLogSummary *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_contest23__AddAndGetLogSummary(soap, "contest23:AddAndGetLogSummary", -1, &a->contest23__AddAndGetLogSummary, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest23__AddAndGetLogSummary * SOAP_FMAC4 soap_in___contest23__AddAndGetLogSummary(struct soap *soap, const char *tag, struct __contest23__AddAndGetLogSummary *a, const char *type)
{
	size_t soap_flag_contest23__AddAndGetLogSummary = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __contest23__AddAndGetLogSummary*)soap_id_enter(soap, "", a, SOAP_TYPE_C2___contest23__AddAndGetLogSummary, sizeof(struct __contest23__AddAndGetLogSummary), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___contest23__AddAndGetLogSummary(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_contest23__AddAndGetLogSummary && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_contest23__AddAndGetLogSummary(soap, "contest23:AddAndGetLogSummary", &a->contest23__AddAndGetLogSummary, ""))
				{	soap_flag_contest23__AddAndGetLogSummary--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __contest23__AddAndGetLogSummary * SOAP_FMAC2 soap_instantiate___contest23__AddAndGetLogSummary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___contest23__AddAndGetLogSummary(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __contest23__AddAndGetLogSummary *p;
	size_t k = sizeof(struct __contest23__AddAndGetLogSummary);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2___contest23__AddAndGetLogSummary, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __contest23__AddAndGetLogSummary);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __contest23__AddAndGetLogSummary, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __contest23__AddAndGetLogSummary location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___contest23__AddAndGetLogSummary(struct soap *soap, const struct __contest23__AddAndGetLogSummary *a, const char *tag, const char *type)
{
	if (soap_out___contest23__AddAndGetLogSummary(soap, tag ? tag : "-contest23:AddAndGetLogSummary", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest23__AddAndGetLogSummary * SOAP_FMAC4 soap_get___contest23__AddAndGetLogSummary(struct soap *soap, struct __contest23__AddAndGetLogSummary *p, const char *tag, const char *type)
{
	if ((p = soap_in___contest23__AddAndGetLogSummary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___contest23__addAndGetQsos(struct soap *soap, struct __contest23__addAndGetQsos *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->contest23__addAndGetQsos = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___contest23__addAndGetQsos(struct soap *soap, const struct __contest23__addAndGetQsos *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_contest23__addAndGetQsos(soap, &a->contest23__addAndGetQsos);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___contest23__addAndGetQsos(struct soap *soap, const char *tag, int id, const struct __contest23__addAndGetQsos *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_contest23__addAndGetQsos(soap, "contest23:addAndGetQsos", -1, &a->contest23__addAndGetQsos, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest23__addAndGetQsos * SOAP_FMAC4 soap_in___contest23__addAndGetQsos(struct soap *soap, const char *tag, struct __contest23__addAndGetQsos *a, const char *type)
{
	size_t soap_flag_contest23__addAndGetQsos = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __contest23__addAndGetQsos*)soap_id_enter(soap, "", a, SOAP_TYPE_C2___contest23__addAndGetQsos, sizeof(struct __contest23__addAndGetQsos), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___contest23__addAndGetQsos(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_contest23__addAndGetQsos && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_contest23__addAndGetQsos(soap, "contest23:addAndGetQsos", &a->contest23__addAndGetQsos, ""))
				{	soap_flag_contest23__addAndGetQsos--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __contest23__addAndGetQsos * SOAP_FMAC2 soap_instantiate___contest23__addAndGetQsos(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___contest23__addAndGetQsos(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __contest23__addAndGetQsos *p;
	size_t k = sizeof(struct __contest23__addAndGetQsos);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2___contest23__addAndGetQsos, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __contest23__addAndGetQsos);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __contest23__addAndGetQsos, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __contest23__addAndGetQsos location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___contest23__addAndGetQsos(struct soap *soap, const struct __contest23__addAndGetQsos *a, const char *tag, const char *type)
{
	if (soap_out___contest23__addAndGetQsos(soap, tag ? tag : "-contest23:addAndGetQsos", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest23__addAndGetQsos * SOAP_FMAC4 soap_get___contest23__addAndGetQsos(struct soap *soap, struct __contest23__addAndGetQsos *p, const char *tag, const char *type)
{
	if ((p = soap_in___contest23__addAndGetQsos(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___contest23__GetSessionId(struct soap *soap, struct __contest23__GetSessionId *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->contest23__GetSessionId = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___contest23__GetSessionId(struct soap *soap, const struct __contest23__GetSessionId *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_contest23__GetSessionId(soap, &a->contest23__GetSessionId);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___contest23__GetSessionId(struct soap *soap, const char *tag, int id, const struct __contest23__GetSessionId *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_contest23__GetSessionId(soap, "contest23:GetSessionId", -1, &a->contest23__GetSessionId, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest23__GetSessionId * SOAP_FMAC4 soap_in___contest23__GetSessionId(struct soap *soap, const char *tag, struct __contest23__GetSessionId *a, const char *type)
{
	size_t soap_flag_contest23__GetSessionId = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __contest23__GetSessionId*)soap_id_enter(soap, "", a, SOAP_TYPE_C2___contest23__GetSessionId, sizeof(struct __contest23__GetSessionId), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___contest23__GetSessionId(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_contest23__GetSessionId && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_contest23__GetSessionId(soap, "contest23:GetSessionId", &a->contest23__GetSessionId, ""))
				{	soap_flag_contest23__GetSessionId--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __contest23__GetSessionId * SOAP_FMAC2 soap_instantiate___contest23__GetSessionId(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___contest23__GetSessionId(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __contest23__GetSessionId *p;
	size_t k = sizeof(struct __contest23__GetSessionId);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2___contest23__GetSessionId, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __contest23__GetSessionId);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __contest23__GetSessionId, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __contest23__GetSessionId location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___contest23__GetSessionId(struct soap *soap, const struct __contest23__GetSessionId *a, const char *tag, const char *type)
{
	if (soap_out___contest23__GetSessionId(soap, tag ? tag : "-contest23:GetSessionId", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __contest23__GetSessionId * SOAP_FMAC4 soap_get___contest23__GetSessionId(struct soap *soap, struct __contest23__GetSessionId *p, const char *tag, const char *type)
{
	if ((p = soap_in___contest23__GetSessionId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__ExchangeFrequencies(struct soap *soap, _contest23__ExchangeFrequencies *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C2__contest23__ExchangeFrequencies))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__ExchangeFrequencies(struct soap *soap, const char *tag, int id, _contest23__ExchangeFrequencies *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2__contest23__ExchangeFrequencies, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C2__contest23__ExchangeFrequencies ? type : NULL);
}

SOAP_FMAC3 _contest23__ExchangeFrequencies ** SOAP_FMAC4 soap_in_PointerTo_contest23__ExchangeFrequencies(struct soap *soap, const char *tag, _contest23__ExchangeFrequencies **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_contest23__ExchangeFrequencies **)soap_malloc(soap, sizeof(_contest23__ExchangeFrequencies *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_contest23__ExchangeFrequencies *)soap_instantiate__contest23__ExchangeFrequencies(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_contest23__ExchangeFrequencies **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2__contest23__ExchangeFrequencies, sizeof(_contest23__ExchangeFrequencies), 0, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__ExchangeFrequencies(struct soap *soap, _contest23__ExchangeFrequencies *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_contest23__ExchangeFrequencies(soap, tag ? tag : "contest23:ExchangeFrequencies", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _contest23__ExchangeFrequencies ** SOAP_FMAC4 soap_get_PointerTo_contest23__ExchangeFrequencies(struct soap *soap, _contest23__ExchangeFrequencies **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_contest23__ExchangeFrequencies(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__ColumnNamesToIndices(struct soap *soap, _contest23__ColumnNamesToIndices *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C2__contest23__ColumnNamesToIndices))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__ColumnNamesToIndices(struct soap *soap, const char *tag, int id, _contest23__ColumnNamesToIndices *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2__contest23__ColumnNamesToIndices, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C2__contest23__ColumnNamesToIndices ? type : NULL);
}

SOAP_FMAC3 _contest23__ColumnNamesToIndices ** SOAP_FMAC4 soap_in_PointerTo_contest23__ColumnNamesToIndices(struct soap *soap, const char *tag, _contest23__ColumnNamesToIndices **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_contest23__ColumnNamesToIndices **)soap_malloc(soap, sizeof(_contest23__ColumnNamesToIndices *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_contest23__ColumnNamesToIndices *)soap_instantiate__contest23__ColumnNamesToIndices(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_contest23__ColumnNamesToIndices **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2__contest23__ColumnNamesToIndices, sizeof(_contest23__ColumnNamesToIndices), 0, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__ColumnNamesToIndices(struct soap *soap, _contest23__ColumnNamesToIndices *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_contest23__ColumnNamesToIndices(soap, tag ? tag : "contest23:ColumnNamesToIndices", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _contest23__ColumnNamesToIndices ** SOAP_FMAC4 soap_get_PointerTo_contest23__ColumnNamesToIndices(struct soap *soap, _contest23__ColumnNamesToIndices **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_contest23__ColumnNamesToIndices(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__getQsosByKeyArray(struct soap *soap, _contest23__getQsosByKeyArray *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C2__contest23__getQsosByKeyArray))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__getQsosByKeyArray(struct soap *soap, const char *tag, int id, _contest23__getQsosByKeyArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2__contest23__getQsosByKeyArray, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C2__contest23__getQsosByKeyArray ? type : NULL);
}

SOAP_FMAC3 _contest23__getQsosByKeyArray ** SOAP_FMAC4 soap_in_PointerTo_contest23__getQsosByKeyArray(struct soap *soap, const char *tag, _contest23__getQsosByKeyArray **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_contest23__getQsosByKeyArray **)soap_malloc(soap, sizeof(_contest23__getQsosByKeyArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_contest23__getQsosByKeyArray *)soap_instantiate__contest23__getQsosByKeyArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_contest23__getQsosByKeyArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2__contest23__getQsosByKeyArray, sizeof(_contest23__getQsosByKeyArray), 0, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__getQsosByKeyArray(struct soap *soap, _contest23__getQsosByKeyArray *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_contest23__getQsosByKeyArray(soap, tag ? tag : "contest23:getQsosByKeyArray", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _contest23__getQsosByKeyArray ** SOAP_FMAC4 soap_get_PointerTo_contest23__getQsosByKeyArray(struct soap *soap, _contest23__getQsosByKeyArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_contest23__getQsosByKeyArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__AddAndGetLogSummary(struct soap *soap, _contest23__AddAndGetLogSummary *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C2__contest23__AddAndGetLogSummary))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__AddAndGetLogSummary(struct soap *soap, const char *tag, int id, _contest23__AddAndGetLogSummary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2__contest23__AddAndGetLogSummary, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C2__contest23__AddAndGetLogSummary ? type : NULL);
}

SOAP_FMAC3 _contest23__AddAndGetLogSummary ** SOAP_FMAC4 soap_in_PointerTo_contest23__AddAndGetLogSummary(struct soap *soap, const char *tag, _contest23__AddAndGetLogSummary **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_contest23__AddAndGetLogSummary **)soap_malloc(soap, sizeof(_contest23__AddAndGetLogSummary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_contest23__AddAndGetLogSummary *)soap_instantiate__contest23__AddAndGetLogSummary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_contest23__AddAndGetLogSummary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2__contest23__AddAndGetLogSummary, sizeof(_contest23__AddAndGetLogSummary), 0, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__AddAndGetLogSummary(struct soap *soap, _contest23__AddAndGetLogSummary *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_contest23__AddAndGetLogSummary(soap, tag ? tag : "contest23:AddAndGetLogSummary", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _contest23__AddAndGetLogSummary ** SOAP_FMAC4 soap_get_PointerTo_contest23__AddAndGetLogSummary(struct soap *soap, _contest23__AddAndGetLogSummary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_contest23__AddAndGetLogSummary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__addAndGetQsos(struct soap *soap, _contest23__addAndGetQsos *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C2__contest23__addAndGetQsos))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__addAndGetQsos(struct soap *soap, const char *tag, int id, _contest23__addAndGetQsos *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2__contest23__addAndGetQsos, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C2__contest23__addAndGetQsos ? type : NULL);
}

SOAP_FMAC3 _contest23__addAndGetQsos ** SOAP_FMAC4 soap_in_PointerTo_contest23__addAndGetQsos(struct soap *soap, const char *tag, _contest23__addAndGetQsos **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_contest23__addAndGetQsos **)soap_malloc(soap, sizeof(_contest23__addAndGetQsos *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_contest23__addAndGetQsos *)soap_instantiate__contest23__addAndGetQsos(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_contest23__addAndGetQsos **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2__contest23__addAndGetQsos, sizeof(_contest23__addAndGetQsos), 0, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__addAndGetQsos(struct soap *soap, _contest23__addAndGetQsos *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_contest23__addAndGetQsos(soap, tag ? tag : "contest23:addAndGetQsos", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _contest23__addAndGetQsos ** SOAP_FMAC4 soap_get_PointerTo_contest23__addAndGetQsos(struct soap *soap, _contest23__addAndGetQsos **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_contest23__addAndGetQsos(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_contest23__GetSessionId(struct soap *soap, _contest23__GetSessionId *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C2__contest23__GetSessionId))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_contest23__GetSessionId(struct soap *soap, const char *tag, int id, _contest23__GetSessionId *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2__contest23__GetSessionId, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C2__contest23__GetSessionId ? type : NULL);
}

SOAP_FMAC3 _contest23__GetSessionId ** SOAP_FMAC4 soap_in_PointerTo_contest23__GetSessionId(struct soap *soap, const char *tag, _contest23__GetSessionId **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_contest23__GetSessionId **)soap_malloc(soap, sizeof(_contest23__GetSessionId *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_contest23__GetSessionId *)soap_instantiate__contest23__GetSessionId(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_contest23__GetSessionId **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2__contest23__GetSessionId, sizeof(_contest23__GetSessionId), 0, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_contest23__GetSessionId(struct soap *soap, _contest23__GetSessionId *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_contest23__GetSessionId(soap, tag ? tag : "contest23:GetSessionId", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _contest23__GetSessionId ** SOAP_FMAC4 soap_get_PointerTo_contest23__GetSessionId(struct soap *soap, _contest23__GetSessionId **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_contest23__GetSessionId(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__ArrayOfRigFrequency(struct soap *soap, contest25__ArrayOfRigFrequency *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_contest25__ArrayOfRigFrequency))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__ArrayOfRigFrequency(struct soap *soap, const char *tag, int id, contest25__ArrayOfRigFrequency *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_contest25__ArrayOfRigFrequency, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C2_contest25__ArrayOfRigFrequency ? type : NULL);
}

SOAP_FMAC3 contest25__ArrayOfRigFrequency ** SOAP_FMAC4 soap_in_PointerTocontest25__ArrayOfRigFrequency(struct soap *soap, const char *tag, contest25__ArrayOfRigFrequency **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest25__ArrayOfRigFrequency **)soap_malloc(soap, sizeof(contest25__ArrayOfRigFrequency *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest25__ArrayOfRigFrequency *)soap_instantiate_contest25__ArrayOfRigFrequency(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (contest25__ArrayOfRigFrequency **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_contest25__ArrayOfRigFrequency, sizeof(contest25__ArrayOfRigFrequency), 0, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__ArrayOfRigFrequency(struct soap *soap, contest25__ArrayOfRigFrequency *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTocontest25__ArrayOfRigFrequency(soap, tag ? tag : "contest25:ArrayOfRigFrequency", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest25__ArrayOfRigFrequency ** SOAP_FMAC4 soap_get_PointerTocontest25__ArrayOfRigFrequency(struct soap *soap, contest25__ArrayOfRigFrequency **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest25__ArrayOfRigFrequency(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest26__ArrayOfint(struct soap *soap, contest26__ArrayOfint *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_contest26__ArrayOfint))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest26__ArrayOfint(struct soap *soap, const char *tag, int id, contest26__ArrayOfint *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_contest26__ArrayOfint, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C2_contest26__ArrayOfint ? type : NULL);
}

SOAP_FMAC3 contest26__ArrayOfint ** SOAP_FMAC4 soap_in_PointerTocontest26__ArrayOfint(struct soap *soap, const char *tag, contest26__ArrayOfint **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest26__ArrayOfint **)soap_malloc(soap, sizeof(contest26__ArrayOfint *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest26__ArrayOfint *)soap_instantiate_contest26__ArrayOfint(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (contest26__ArrayOfint **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_contest26__ArrayOfint, sizeof(contest26__ArrayOfint), 0, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest26__ArrayOfint(struct soap *soap, contest26__ArrayOfint *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTocontest26__ArrayOfint(soap, tag ? tag : "contest26:ArrayOfint", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest26__ArrayOfint ** SOAP_FMAC4 soap_get_PointerTocontest26__ArrayOfint(struct soap *soap, contest26__ArrayOfint **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest26__ArrayOfint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__LogSummary(struct soap *soap, contest25__LogSummary *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_contest25__LogSummary))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__LogSummary(struct soap *soap, const char *tag, int id, contest25__LogSummary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_contest25__LogSummary, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C2_contest25__LogSummary ? type : NULL);
}

SOAP_FMAC3 contest25__LogSummary ** SOAP_FMAC4 soap_in_PointerTocontest25__LogSummary(struct soap *soap, const char *tag, contest25__LogSummary **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest25__LogSummary **)soap_malloc(soap, sizeof(contest25__LogSummary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest25__LogSummary *)soap_instantiate_contest25__LogSummary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (contest25__LogSummary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_contest25__LogSummary, sizeof(contest25__LogSummary), 0, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__LogSummary(struct soap *soap, contest25__LogSummary *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTocontest25__LogSummary(soap, tag ? tag : "contest25:LogSummary", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest25__LogSummary ** SOAP_FMAC4 soap_get_PointerTocontest25__LogSummary(struct soap *soap, contest25__LogSummary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest25__LogSummary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__QsoUpdate(struct soap *soap, contest25__QsoUpdate *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_contest25__QsoUpdate))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__QsoUpdate(struct soap *soap, const char *tag, int id, contest25__QsoUpdate *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_contest25__QsoUpdate, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C2_contest25__QsoUpdate ? type : NULL);
}

SOAP_FMAC3 contest25__QsoUpdate ** SOAP_FMAC4 soap_in_PointerTocontest25__QsoUpdate(struct soap *soap, const char *tag, contest25__QsoUpdate **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest25__QsoUpdate **)soap_malloc(soap, sizeof(contest25__QsoUpdate *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest25__QsoUpdate *)soap_instantiate_contest25__QsoUpdate(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (contest25__QsoUpdate **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_contest25__QsoUpdate, sizeof(contest25__QsoUpdate), 0, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__QsoUpdate(struct soap *soap, contest25__QsoUpdate *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTocontest25__QsoUpdate(soap, tag ? tag : "contest25:QsoUpdate", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest25__QsoUpdate ** SOAP_FMAC4 soap_get_PointerTocontest25__QsoUpdate(struct soap *soap, contest25__QsoUpdate **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest25__QsoUpdate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__RigFrequency(struct soap *soap, contest25__RigFrequency *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_contest25__RigFrequency))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__RigFrequency(struct soap *soap, const char *tag, int id, contest25__RigFrequency *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_contest25__RigFrequency, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C2_contest25__RigFrequency ? type : NULL);
}

SOAP_FMAC3 contest25__RigFrequency ** SOAP_FMAC4 soap_in_PointerTocontest25__RigFrequency(struct soap *soap, const char *tag, contest25__RigFrequency **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest25__RigFrequency **)soap_malloc(soap, sizeof(contest25__RigFrequency *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest25__RigFrequency *)soap_instantiate_contest25__RigFrequency(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (contest25__RigFrequency **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_contest25__RigFrequency, sizeof(contest25__RigFrequency), 0, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__RigFrequency(struct soap *soap, contest25__RigFrequency *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTocontest25__RigFrequency(soap, tag ? tag : "contest25:RigFrequency", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest25__RigFrequency ** SOAP_FMAC4 soap_get_PointerTocontest25__RigFrequency(struct soap *soap, contest25__RigFrequency **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest25__RigFrequency(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__QsoIdVersion(struct soap *soap, contest25__QsoIdVersion *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_contest25__QsoIdVersion))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__QsoIdVersion(struct soap *soap, const char *tag, int id, contest25__QsoIdVersion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_contest25__QsoIdVersion, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C2_contest25__QsoIdVersion ? type : NULL);
}

SOAP_FMAC3 contest25__QsoIdVersion ** SOAP_FMAC4 soap_in_PointerTocontest25__QsoIdVersion(struct soap *soap, const char *tag, contest25__QsoIdVersion **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest25__QsoIdVersion **)soap_malloc(soap, sizeof(contest25__QsoIdVersion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest25__QsoIdVersion *)soap_instantiate_contest25__QsoIdVersion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (contest25__QsoIdVersion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_contest25__QsoIdVersion, sizeof(contest25__QsoIdVersion), 0, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__QsoIdVersion(struct soap *soap, contest25__QsoIdVersion *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTocontest25__QsoIdVersion(soap, tag ? tag : "contest25:QsoIdVersion", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest25__QsoIdVersion ** SOAP_FMAC4 soap_get_PointerTocontest25__QsoIdVersion(struct soap *soap, contest25__QsoIdVersion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest25__QsoIdVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__ArrayOfQsoIdVersion(struct soap *soap, contest25__ArrayOfQsoIdVersion *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__ArrayOfQsoIdVersion(struct soap *soap, const char *tag, int id, contest25__ArrayOfQsoIdVersion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion ? type : NULL);
}

SOAP_FMAC3 contest25__ArrayOfQsoIdVersion ** SOAP_FMAC4 soap_in_PointerTocontest25__ArrayOfQsoIdVersion(struct soap *soap, const char *tag, contest25__ArrayOfQsoIdVersion **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest25__ArrayOfQsoIdVersion **)soap_malloc(soap, sizeof(contest25__ArrayOfQsoIdVersion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest25__ArrayOfQsoIdVersion *)soap_instantiate_contest25__ArrayOfQsoIdVersion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (contest25__ArrayOfQsoIdVersion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_contest25__ArrayOfQsoIdVersion, sizeof(contest25__ArrayOfQsoIdVersion), 0, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__ArrayOfQsoIdVersion(struct soap *soap, contest25__ArrayOfQsoIdVersion *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTocontest25__ArrayOfQsoIdVersion(soap, tag ? tag : "contest25:ArrayOfQsoIdVersion", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest25__ArrayOfQsoIdVersion ** SOAP_FMAC4 soap_get_PointerTocontest25__ArrayOfQsoIdVersion(struct soap *soap, contest25__ArrayOfQsoIdVersion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest25__ArrayOfQsoIdVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__ArrayOfQso(struct soap *soap, contest25__ArrayOfQso *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_contest25__ArrayOfQso))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__ArrayOfQso(struct soap *soap, const char *tag, int id, contest25__ArrayOfQso *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_contest25__ArrayOfQso, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C2_contest25__ArrayOfQso ? type : NULL);
}

SOAP_FMAC3 contest25__ArrayOfQso ** SOAP_FMAC4 soap_in_PointerTocontest25__ArrayOfQso(struct soap *soap, const char *tag, contest25__ArrayOfQso **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest25__ArrayOfQso **)soap_malloc(soap, sizeof(contest25__ArrayOfQso *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest25__ArrayOfQso *)soap_instantiate_contest25__ArrayOfQso(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (contest25__ArrayOfQso **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_contest25__ArrayOfQso, sizeof(contest25__ArrayOfQso), 0, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__ArrayOfQso(struct soap *soap, contest25__ArrayOfQso *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTocontest25__ArrayOfQso(soap, tag ? tag : "contest25:ArrayOfQso", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest25__ArrayOfQso ** SOAP_FMAC4 soap_get_PointerTocontest25__ArrayOfQso(struct soap *soap, contest25__ArrayOfQso **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest25__ArrayOfQso(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest26__ArrayOfstring(struct soap *soap, contest26__ArrayOfstring *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_contest26__ArrayOfstring))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest26__ArrayOfstring(struct soap *soap, const char *tag, int id, contest26__ArrayOfstring *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_contest26__ArrayOfstring, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C2_contest26__ArrayOfstring ? type : NULL);
}

SOAP_FMAC3 contest26__ArrayOfstring ** SOAP_FMAC4 soap_in_PointerTocontest26__ArrayOfstring(struct soap *soap, const char *tag, contest26__ArrayOfstring **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest26__ArrayOfstring **)soap_malloc(soap, sizeof(contest26__ArrayOfstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest26__ArrayOfstring *)soap_instantiate_contest26__ArrayOfstring(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (contest26__ArrayOfstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_contest26__ArrayOfstring, sizeof(contest26__ArrayOfstring), 0, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest26__ArrayOfstring(struct soap *soap, contest26__ArrayOfstring *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTocontest26__ArrayOfstring(soap, tag ? tag : "contest26:ArrayOfstring", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest26__ArrayOfstring ** SOAP_FMAC4 soap_get_PointerTocontest26__ArrayOfstring(struct soap *soap, contest26__ArrayOfstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest26__ArrayOfstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTocontest25__Qso(struct soap *soap, contest25__Qso *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_C2_contest25__Qso))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTocontest25__Qso(struct soap *soap, const char *tag, int id, contest25__Qso *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_contest25__Qso, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE_C2_contest25__Qso ? type : NULL);
}

SOAP_FMAC3 contest25__Qso ** SOAP_FMAC4 soap_in_PointerTocontest25__Qso(struct soap *soap, const char *tag, contest25__Qso **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (contest25__Qso **)soap_malloc(soap, sizeof(contest25__Qso *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (contest25__Qso *)soap_instantiate_contest25__Qso(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (contest25__Qso **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_contest25__Qso, sizeof(contest25__Qso), 0, C2_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTocontest25__Qso(struct soap *soap, contest25__Qso *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTocontest25__Qso(soap, tag ? tag : "contest25:Qso", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 contest25__Qso ** SOAP_FMAC4 soap_get_PointerTocontest25__Qso(struct soap *soap, contest25__Qso **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTocontest25__Qso(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_C2_unsignedByte);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_C2_unsignedByte, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_C2_unsignedByte, sizeof(unsigned char), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTounsignedByte(soap, tag ? tag : "unsignedByte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_C2__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_C2__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_C2__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_C2_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_C2_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_C2_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTocontest25__RigFrequency(struct soap *soap, std::vector<contest25__RigFrequency *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTocontest25__RigFrequency(struct soap *soap, const std::vector<contest25__RigFrequency *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<contest25__RigFrequency *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTocontest25__RigFrequency(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTocontest25__RigFrequency(struct soap *soap, const char *tag, int id, const std::vector<contest25__RigFrequency *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<contest25__RigFrequency *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTocontest25__RigFrequency(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<contest25__RigFrequency *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTocontest25__RigFrequency(struct soap *soap, const char *tag, std::vector<contest25__RigFrequency *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTocontest25__RigFrequency(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		contest25__RigFrequency *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_C2_contest25__RigFrequency, SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__RigFrequency, sizeof(contest25__RigFrequency), 1, C2_finsert, C2_fbase))
				break;
			if (!soap_in_PointerTocontest25__RigFrequency(soap, tag, NULL, "contest25:RigFrequency"))
				break;
		}
		else
		{	if (!soap_in_PointerTocontest25__RigFrequency(soap, tag, &n, "contest25:RigFrequency"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<contest25__RigFrequency *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTocontest25__RigFrequency(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTocontest25__RigFrequency(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<contest25__RigFrequency *> *p;
	size_t k = sizeof(std::vector<contest25__RigFrequency *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__RigFrequency, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<contest25__RigFrequency *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<contest25__RigFrequency *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<contest25__RigFrequency *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(struct soap *soap, std::vector<contest25__QsoIdVersion *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(struct soap *soap, const std::vector<contest25__QsoIdVersion *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<contest25__QsoIdVersion *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTocontest25__QsoIdVersion(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(struct soap *soap, const char *tag, int id, const std::vector<contest25__QsoIdVersion *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<contest25__QsoIdVersion *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTocontest25__QsoIdVersion(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<contest25__QsoIdVersion *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(struct soap *soap, const char *tag, std::vector<contest25__QsoIdVersion *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		contest25__QsoIdVersion *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_C2_contest25__QsoIdVersion, SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__QsoIdVersion, sizeof(contest25__QsoIdVersion), 1, C2_finsert, C2_fbase))
				break;
			if (!soap_in_PointerTocontest25__QsoIdVersion(soap, tag, NULL, "contest25:QsoIdVersion"))
				break;
		}
		else
		{	if (!soap_in_PointerTocontest25__QsoIdVersion(soap, tag, &n, "contest25:QsoIdVersion"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<contest25__QsoIdVersion *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTocontest25__QsoIdVersion(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<contest25__QsoIdVersion *> *p;
	size_t k = sizeof(std::vector<contest25__QsoIdVersion *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__QsoIdVersion, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<contest25__QsoIdVersion *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<contest25__QsoIdVersion *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<contest25__QsoIdVersion *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTocontest25__Qso(struct soap *soap, std::vector<contest25__Qso *> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTocontest25__Qso(struct soap *soap, const std::vector<contest25__Qso *> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<contest25__Qso *> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerTocontest25__Qso(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTocontest25__Qso(struct soap *soap, const char *tag, int id, const std::vector<contest25__Qso *> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<contest25__Qso *> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerTocontest25__Qso(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<contest25__Qso *> * SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTocontest25__Qso(struct soap *soap, const char *tag, std::vector<contest25__Qso *> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfPointerTocontest25__Qso(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		contest25__Qso *n;
		n = NULL;
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_C2_contest25__Qso, SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__Qso, sizeof(contest25__Qso), 1, C2_finsert, C2_fbase))
				break;
			if (!soap_in_PointerTocontest25__Qso(soap, tag, NULL, "contest25:Qso"))
				break;
		}
		else
		{	if (!soap_in_PointerTocontest25__Qso(soap, tag, &n, "contest25:Qso"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<contest25__Qso *>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTocontest25__Qso(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerTocontest25__Qso(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<contest25__Qso *> *p;
	size_t k = sizeof(std::vector<contest25__Qso *> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_std__vectorTemplateOfPointerTocontest25__Qso, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<contest25__Qso *> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<contest25__Qso *> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<contest25__Qso *>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfint(struct soap *soap, std::vector<int> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfint(struct soap *soap, const std::vector<int> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfint(struct soap *soap, const char *tag, int id, const std::vector<int> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<int> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_int(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<int> * SOAP_FMAC4 soap_in_std__vectorTemplateOfint(struct soap *soap, const char *tag, std::vector<int> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfint(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		int n;
		soap_default_int(soap, &n);
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_C2_int, SOAP_TYPE_C2_std__vectorTemplateOfint, sizeof(int), 0, C2_finsert, C2_fbase))
				break;
			if (!soap_in_int(soap, tag, NULL, "xsd:int"))
				break;
		}
		else
		{	if (!soap_in_int(soap, tag, &n, "xsd:int"))
				break;
		}
		a->insert(a->end(), n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<int>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfint(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<int> *p;
	size_t k = sizeof(std::vector<int> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_std__vectorTemplateOfint, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<int> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<int> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<int>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfstd__string(struct soap *soap, std::vector<std::string> *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfstd__string(struct soap *soap, const std::vector<std::string> *a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<std::string> ::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_std__string(soap, &(*i));
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, int id, const std::vector<std::string> *a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<std::string> ::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_std__string(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<std::string> * SOAP_FMAC4 soap_in_std__vectorTemplateOfstd__string(struct soap *soap, const char *tag, std::vector<std::string> *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		if (!a && !(a = soap_new_std__vectorTemplateOfstd__string(soap)))
			return NULL;
		else if (static_cast<size_t>(a->size()) > soap->maxoccurs)
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
		std::string n;
		soap_default_std__string(soap, &n);
		short soap_shaky = soap_begin_shaky(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href == '#'))
		{	if (!soap_id_forward(soap, *soap->id?soap->id:soap->href, a, static_cast<size_t>(a->size()), SOAP_TYPE_C2_std__string, SOAP_TYPE_C2_std__vectorTemplateOfstd__string, sizeof(std::string), 0, C2_finsert, C2_fbase))
				break;
			if (!soap_in_std__string(soap, tag, NULL, "xsd:string"))
				break;
		}
		else
		{	if (!soap_in_std__string(soap, tag, &n, "xsd:string"))
				break;
		}
		soap_end_shaky(soap, soap_shaky);
		if (a->size())
		{	const void *p = &*a->begin();
			soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(std::string));
			if (p != &*a->begin())
			{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container capacity increased: updating pointers\n"));
				soap_update_pointers(soap, (const char*)&*a->begin(), (const char*)p, (a->size() - 1) * sizeof(std::string));
			}
		}
		else
		{	soap_update_pointers(soap, (const char*)&(*a->insert(a->end(), n)), (const char*)&n, sizeof(std::string));
		}
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<std::string>  * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfstd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfstd__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::vector<std::string> *p;
	size_t k = sizeof(std::vector<std::string> );
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_C2_std__vectorTemplateOfstd__string, n, C2_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::vector<std::string> );
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::vector<std::string> , n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::vector<std::string>  location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

} // namespace C2


#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of C2C.cpp */
